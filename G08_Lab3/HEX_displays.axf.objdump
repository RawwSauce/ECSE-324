
P:/G08_Lab3/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	9c 0a 00 00 a8 0a 00 00 b4 0a 00 00 c0 0a 00 00     ................
  30:	cc 0a 00 00 38 13 00 00 44 09 00 00 d8 0a 00 00     ....8...D.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00047e 	bl	12d4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001428 	.word	0x00001428

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001860 	.word	0x00001860

00000124 <__cs3_heap_start_ptr>:
     124:	00001888 	.word	0x00001888

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001868 	.word	0x00001868
     170:	0000186b 	.word	0x0000186b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001868 	.word	0x00001868
     1bc:	00001868 	.word	0x00001868
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001868 	.word	0x00001868
     200:	00000000 	.word	0x00000000
     204:	000013c4 	.word	0x000013c4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000013c4 	.word	0x000013c4
     250:	0000186c 	.word	0x0000186c
     254:	00001428 	.word	0x00001428
     258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM
	
HEX_clear_ASM:// put zeros on the displays that were passed in R0 as arguments
	MOV R1, #0
     25c:	e3a01000 	mov	r1, #0
	B Main_Sub
     260:	ea000007 	b	284 <Main_Sub>

00000264 <HEX_flood_ASM>:
HEX_flood_ASM: // put all ones on the displays that were passed in R0 as arguments
	MOV R1, #-1 // negative one is all ones in 2s complement
     264:	e3e01000 	mvn	r1, #0
	B Main_Sub
     268:	ea000005 	b	284 <Main_Sub>

0000026c <HEX_write_ASM>:
HEX_write_ASM: // put what is in R1 the displays that were passed in R0 as arguments
	PUSH {R0, LR}
     26c:	e92d4001 	push	{r0, lr}
	MOV R0, R1
     270:	e1a00001 	mov	r0, r1
	BL Convert // call convert subroutine to convert val to display into correct binary value
     274:	eb000034 	bl	34c <Convert>
	MOV R1, R0
     278:	e1a01000 	mov	r1, r0
	POP {R0, LR}
     27c:	e8bd4001 	pop	{r0, lr}
	B Main_Sub
     280:	eaffffff 	b	284 <Main_Sub>

00000284 <Main_Sub>:

Main_Sub:
	PUSH {LR}
     284:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R2,R3,R4}
     288:	e92d001c 	push	{r2, r3, r4}
	MOV R2, #1 // initialize comparator, this will be used to know which register will be modified and as a counter
     28c:	e3a02001 	mov	r2, #1
	MOV R4, #0 //counter
     290:	e3a04000 	mov	r4, #0

00000294 <LOOP>:
LOOP:
	AND R3, R2, R0 // compare R0 (argument) and R2 (comparator), put result in R3
     294:	e0023000 	and	r3, r2, r0
	PUSH {R0, LR}
     298:	e92d4001 	push	{r0, lr}
	MOV R0, R3 // Put nth enabled hex display in R0 so that it can be passed as an argument to UPDATE_HEX
     29c:	e1a00003 	mov	r0, r3
	CMP R3,R2 // compare to see if nth enabled bit is enabled
     2a0:	e1530002 	cmp	r3, r2
	BLEQ UPDATE_HEX // if equal means nth was enabled and that hex display needs to be modified, branch to that subroutine
     2a4:	0b000008 	bleq	2cc <UPDATE_HEX>
	POP {R0, LR}
     2a8:	e8bd4001 	pop	{r0, lr}
	LSL R2,#1 // update comparator, i.e. double its value
     2ac:	e1a02082 	lsl	r2, r2, #1
	CMP R2, #16 // compare R2 to know if we have iterated more than 6 times
     2b0:	e3520010 	cmp	r2, #16
	ADD R4, R4, #1	// invrement counter
     2b4:	e2844001 	add	r4, r4, #1
	CMP R4, #6 // check if we have iterated 5 times
     2b8:	e3540006 	cmp	r4, #6
	BLT LOOP
     2bc:	bafffff4 	blt	294 <LOOP>
	// loop is over we are done updating the HEX displays register and we can store the result in memory
	POP {R2,R3,R4}
     2c0:	e8bd001c 	pop	{r2, r3, r4}
	POP {LR}
     2c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     2c8:	e12fff1e 	bx	lr

000002cc <UPDATE_HEX>:

UPDATE_HEX:// update an HEX display
		   // display to be updated is one hot encoded in R0
		   // value to update to is in R1
	PUSH {R2, R3}
     2cc:	e92d000c 	push	{r2, r3}
	CMP R0, #8 // compare R0 with to know if we are working with register 0 to 3 or 4 to 5 
     2d0:	e3500008 	cmp	r0, #8
	LDRLE R2, =0xFF200020 // load address of HEX displays 0 to 3
     2d4:	d59f2170 	ldrle	r2, [pc, #368]	; 44c <seg15+0x8>
	LDRGT R2, =0xFF200030 // load address of HEX displays 4 to 5
     2d8:	c59f2170 	ldrgt	r2, [pc, #368]	; 450 <seg15+0xc>
	LDR R3, [R2] // load current value of HEX display in R3
     2dc:	e5923000 	ldr	r3, [r2]
	// update a register according to the value one hot encoded in R0
	CMP R0, #1
     2e0:	e3500001 	cmp	r0, #1
	BEQ HEX0
     2e4:	0a00000c 	beq	31c <HEX0>
	CMP R0, #2
     2e8:	e3500002 	cmp	r0, #2
	BEQ HEX1
     2ec:	0a00000c 	beq	324 <HEX1>
	CMP R0, #4
     2f0:	e3500004 	cmp	r0, #4
	BEQ HEX2
     2f4:	0a00000c 	beq	32c <HEX2>
	CMP R0, #8
     2f8:	e3500008 	cmp	r0, #8
	BEQ HEX3
     2fc:	0a00000c 	beq	334 <HEX3>
	CMP R0, #16
     300:	e3500010 	cmp	r0, #16
	BEQ HEX4
     304:	0a00000c 	beq	33c <HEX4>
	CMP R0, #32
     308:	e3500020 	cmp	r0, #32
	BEQ HEX5
     30c:	0a00000c 	beq	344 <HEX5>

00000310 <DONE>:

DONE:
	STR R3, [R2] // store modified display value back in memory
     310:	e5823000 	str	r3, [r2]
	POP {R2, R3}
     314:	e8bd000c 	pop	{r2, r3}
	BX LR
     318:	e12fff1e 	bx	lr

0000031c <HEX0>:

HEX0:
	BFI R3, R1, #0, #8
     31c:	e7c73011 	bfi	r3, r1, #0, #8
	// take the first 8 bits in R1 and put them aside
	// overwrite 8 consecutives bits in R3 starting at index 0 by what we just put aside
	B DONE
     320:	eafffffa 	b	310 <DONE>

00000324 <HEX1>:
HEX1:
	BFI R3, R1, #8, #8
     324:	e7cf3411 	bfi	r3, r1, #8, #8
	B DONE
     328:	eafffff8 	b	310 <DONE>

0000032c <HEX2>:
HEX2:
	BFI R3, R1, #16, #8
     32c:	e7d73811 	bfi	r3, r1, #16, #8
	B DONE
     330:	eafffff6 	b	310 <DONE>

00000334 <HEX3>:
HEX3:
	BFI R3, R1, #24, #8
     334:	e7df3c11 	bfi	r3, r1, #24, #8
	B DONE
     338:	eafffff4 	b	310 <DONE>

0000033c <HEX4>:
HEX4:
	BFI R3, R1, #0, #8
     33c:	e7c73011 	bfi	r3, r1, #0, #8
	B DONE
     340:	eafffff2 	b	310 <DONE>

00000344 <HEX5>:
HEX5:
	BFI R3, R1, #8, #8
     344:	e7cf3411 	bfi	r3, r1, #8, #8
	B DONE
     348:	eafffff0 	b	310 <DONE>

0000034c <Convert>:
	

Convert:
	CMP R0, #0
     34c:	e3500000 	cmp	r0, #0
	BEQ seg0
     350:	0a00001d 	beq	3cc <seg0>
	CMP R0, #1
     354:	e3500001 	cmp	r0, #1
	BEQ seg1
     358:	0a00001d 	beq	3d4 <seg1>
	CMP R0, #2
     35c:	e3500002 	cmp	r0, #2
	BEQ seg2
     360:	0a00001d 	beq	3dc <seg2>
	CMP R0, #3
     364:	e3500003 	cmp	r0, #3
	BEQ seg3
     368:	0a00001d 	beq	3e4 <seg3>
	CMP R0, #4
     36c:	e3500004 	cmp	r0, #4
	BEQ seg4
     370:	0a00001d 	beq	3ec <seg4>
	CMP R0, #5
     374:	e3500005 	cmp	r0, #5
	BEQ seg5
     378:	0a00001d 	beq	3f4 <seg5>
	CMP R0, #6
     37c:	e3500006 	cmp	r0, #6
	BEQ seg6
     380:	0a00001d 	beq	3fc <seg6>
	CMP R0, #7
     384:	e3500007 	cmp	r0, #7
	BEQ seg7
     388:	0a00001d 	beq	404 <seg7>
	CMP R0, #8
     38c:	e3500008 	cmp	r0, #8
	BEQ seg8
     390:	0a00001d 	beq	40c <seg8>
	CMP R0, #9
     394:	e3500009 	cmp	r0, #9
	BEQ seg9
     398:	0a00001d 	beq	414 <seg9>
	CMP R0, #10
     39c:	e350000a 	cmp	r0, #10
	BEQ seg10
     3a0:	0a00001d 	beq	41c <seg10>
	CMP R0, #11
     3a4:	e350000b 	cmp	r0, #11
	BEQ seg11
     3a8:	0a00001d 	beq	424 <seg11>
	CMP R0, #12
     3ac:	e350000c 	cmp	r0, #12
	BEQ seg12
     3b0:	0a00001d 	beq	42c <seg12>
	CMP R0, #13
     3b4:	e350000d 	cmp	r0, #13
	BEQ seg13
     3b8:	0a00001d 	beq	434 <seg13>
	CMP R0, #14
     3bc:	e350000e 	cmp	r0, #14
	BEQ seg14
     3c0:	0a00001d 	beq	43c <seg14>
	CMP R0, #15
     3c4:	e350000f 	cmp	r0, #15
	BEQ seg15
     3c8:	0a00001d 	beq	444 <seg15>

000003cc <seg0>:

seg0: 
	MOV R0, #63
     3cc:	e3a0003f 	mov	r0, #63	; 0x3f
	BX LR
     3d0:	e12fff1e 	bx	lr

000003d4 <seg1>:

seg1: 
	MOV R0, #6
     3d4:	e3a00006 	mov	r0, #6
	BX LR
     3d8:	e12fff1e 	bx	lr

000003dc <seg2>:

seg2: 
	MOV R0, #91
     3dc:	e3a0005b 	mov	r0, #91	; 0x5b
	BX LR
     3e0:	e12fff1e 	bx	lr

000003e4 <seg3>:

seg3: 
	MOV R0, #79
     3e4:	e3a0004f 	mov	r0, #79	; 0x4f
	BX LR
     3e8:	e12fff1e 	bx	lr

000003ec <seg4>:

seg4: 
	MOV R0, #102
     3ec:	e3a00066 	mov	r0, #102	; 0x66
	BX LR
     3f0:	e12fff1e 	bx	lr

000003f4 <seg5>:

seg5: 
	MOV R0, #109
     3f4:	e3a0006d 	mov	r0, #109	; 0x6d
	BX LR
     3f8:	e12fff1e 	bx	lr

000003fc <seg6>:

seg6: 
	MOV R0, #125
     3fc:	e3a0007d 	mov	r0, #125	; 0x7d
	BX LR
     400:	e12fff1e 	bx	lr

00000404 <seg7>:

seg7: 
	MOV R0, #7
     404:	e3a00007 	mov	r0, #7
	BX LR
     408:	e12fff1e 	bx	lr

0000040c <seg8>:

seg8: 
	MOV R0, #127
     40c:	e3a0007f 	mov	r0, #127	; 0x7f
	BX LR
     410:	e12fff1e 	bx	lr

00000414 <seg9>:

seg9: 
	MOV R0, #103
     414:	e3a00067 	mov	r0, #103	; 0x67
	BX LR
     418:	e12fff1e 	bx	lr

0000041c <seg10>:

seg10: //A
	MOV R0, #247
     41c:	e3a000f7 	mov	r0, #247	; 0xf7
	BX LR
     420:	e12fff1e 	bx	lr

00000424 <seg11>:

seg11: //B
	MOV R0, #255
     424:	e3a000ff 	mov	r0, #255	; 0xff
	BX LR
     428:	e12fff1e 	bx	lr

0000042c <seg12>:

seg12: //C
	MOV R0, #185
     42c:	e3a000b9 	mov	r0, #185	; 0xb9
	BX LR
     430:	e12fff1e 	bx	lr

00000434 <seg13>:

seg13: //D
	MOV R0, #191
     434:	e3a000bf 	mov	r0, #191	; 0xbf
	BX LR
     438:	e12fff1e 	bx	lr

0000043c <seg14>:

seg14: //E
	MOV R0, #249
     43c:	e3a000f9 	mov	r0, #249	; 0xf9
	BX LR
     440:	e12fff1e 	bx	lr

00000444 <seg15>:

seg15: //F
	MOV R0, #241
     444:	e3a000f1 	mov	r0, #241	; 0xf1
	BX LR
     448:	e12fff1e 	bx	lr
UPDATE_HEX:// update an HEX display
		   // display to be updated is one hot encoded in R0
		   // value to update to is in R1
	PUSH {R2, R3}
	CMP R0, #8 // compare R0 with to know if we are working with register 0 to 3 or 4 to 5 
	LDRLE R2, =0xFF200020 // load address of HEX displays 0 to 3
     44c:	ff200020 	.word	0xff200020
	LDRGT R2, =0xFF200030 // load address of HEX displays 4 to 5
     450:	ff200030 	.word	0xff200030

00000454 <read_LEDs_ASM>:
	.equ LEDs_BASE, 0xFF200000 // memory address reserved fo i/o with leds
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	PUSH {R1} // push R1 since we are modifying it
     454:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, = LEDs_BASE // load mem address of leds in R1
     458:	e59f101c 	ldr	r1, [pc, #28]	; 47c <write_LEDs_ASM+0x14>
	LDR R0, [R1] // load value of leds i/o in R0
     45c:	e5910000 	ldr	r0, [r1]
	POP {R1} // restore R1 since we are done
     460:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR // branch out of subroutine
     464:	e12fff1e 	bx	lr

00000468 <write_LEDs_ASM>:
write_LEDs_ASM:
	PUSH {R1} // push R1 since we are modifying it
     468:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, = LEDs_BASE // load mem address of leds in R1
     46c:	e59f1008 	ldr	r1, [pc, #8]	; 47c <write_LEDs_ASM+0x14>
	STR R0, [R1] // write what is in R0 in the mem address for LEDs
     470:	e5810000 	str	r0, [r1]
	POP {R1} // restore R1 since we are done
     474:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR // branch out of subroutine
     478:	e12fff1e 	bx	lr
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	PUSH {R1} // push R1 since we are modifying it
	LDR R1, = LEDs_BASE // load mem address of leds in R1
     47c:	ff200000 	.word	0xff200000

00000480 <read_PB_data_ASM>:
	.global PB_clear_edgecp_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM
	
read_PB_data_ASM:
	PUSH {R1}
     480:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_DATA_BASE
     484:	e59f10ac 	ldr	r1, [pc, #172]	; 538 <disable_PB_INT_ASM+0x1c>
	LDR R0, [R1] // load pushbuttons data in R0
     488:	e5910000 	ldr	r0, [r1]
	BFC R0, #4, #28 // clear all the bits excep first 4 bits as a precaution
     48c:	e7df021f 	bfc	r0, #4, #28
	POP {R1}
     490:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     494:	e12fff1e 	bx	lr

00000498 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
	PUSH {R1}
     498:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_DATA_BASE
     49c:	e59f1094 	ldr	r1, [pc, #148]	; 538 <disable_PB_INT_ASM+0x1c>
	LDR R1, [R1] // load pushbuttons data in R1
     4a0:	e5911000 	ldr	r1, [r1]
	CMP R1, R0 // compare data register with argument
     4a4:	e1510000 	cmp	r1, r0
	MOV R0, #0
     4a8:	e3a00000 	mov	r0, #0
	MOVEQ R0, #1 // if equal means the buttons the user entered as an argument are pressed
     4ac:	03a00001 	moveq	r0, #1
	POP {R1}
     4b0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     4b4:	e12fff1e 	bx	lr

000004b8 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:

	PUSH {R1}
     4b8:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_EDGE_BASE
     4bc:	e59f1078 	ldr	r1, [pc, #120]	; 53c <disable_PB_INT_ASM+0x20>
	LDR R0, [R1] // load pushbuttons edgecapture data in R0
     4c0:	e5910000 	ldr	r0, [r1]
	AND R0, R0, #0xF // clear all the bits excep first 4 bits as a precaution
     4c4:	e200000f 	and	r0, r0, #15
	POP {R1}
     4c8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     4cc:	e12fff1e 	bx	lr

000004d0 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
	PUSH {R1}
     4d0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_EDGE_BASE
     4d4:	e59f1060 	ldr	r1, [pc, #96]	; 53c <disable_PB_INT_ASM+0x20>
	LDR R1, [R1] // load pushbuttons edgecapture data in R0
     4d8:	e5911000 	ldr	r1, [r1]
	CMP R1, R0 // compare data register with argument
     4dc:	e1510000 	cmp	r1, r0
	MOV R0, #0
     4e0:	e3a00000 	mov	r0, #0
	MOVEQ R0, #1 // if equal means the buttons the user entered as an argument have been pressed (their state changed from 0 to 1)
     4e4:	03a00001 	moveq	r0, #1
	POP {R1}
     4e8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     4ec:	e12fff1e 	bx	lr

000004f0 <PB_clear_edgecp_ASM>:
	
PB_clear_edgecp_ASM:

	PUSH {R1}
     4f0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_EDGE_BASE
     4f4:	e59f1040 	ldr	r1, [pc, #64]	; 53c <disable_PB_INT_ASM+0x20>
	STR R0, [R1] // store R0 in edgecapture register to reset them
     4f8:	e5810000 	str	r0, [r1]
	POP {R1}
     4fc:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     500:	e12fff1e 	bx	lr

00000504 <enable_PB_INT_ASM>:

enable_PB_INT_ASM: // this uses a one hot encoded scheme to know which buttons to enable interrupts for

	PUSH {R1}
     504:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_INTER_BASE
     508:	e59f1030 	ldr	r1, [pc, #48]	; 540 <disable_PB_INT_ASM+0x24>
	AND R0, R0, #0xF // keep only last for bits of R0
     50c:	e200000f 	and	r0, r0, #15
	STR R0, [R1] // store desired interrupts bits sequence in the interrupt data register
     510:	e5810000 	str	r0, [r1]
	POP {R1}
     514:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     518:	e12fff1e 	bx	lr

0000051c <disable_PB_INT_ASM>:

disable_PB_INT_ASM: // this uses a one hot encoded scheme to know which buttons to disable interrupts for
	PUSH {R1}
     51c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_INTER_BASE
     520:	e59f1018 	ldr	r1, [pc, #24]	; 540 <disable_PB_INT_ASM+0x24>
	MVN R0, R0 // invert R0
     524:	e1e00000 	mvn	r0, r0
	BFC R0, #4, #28 // clear all the bits excep first 4 bits
     528:	e7df021f 	bfc	r0, #4, #28
	STR R0, [R1] // store desired interrupts bits sequence in the interrupt data register
     52c:	e5810000 	str	r0, [r1]
	POP {R1}
     530:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
     534:	e12fff1e 	bx	lr
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM
	
read_PB_data_ASM:
	PUSH {R1}
	LDR R1, =PB_DATA_BASE
     538:	ff200050 	.word	0xff200050
	BX LR

read_PB_edgecap_ASM:

	PUSH {R1}
	LDR R1, =PB_EDGE_BASE
     53c:	ff20005c 	.word	0xff20005c
	BX LR

enable_PB_INT_ASM: // this uses a one hot encoded scheme to know which buttons to enable interrupts for

	PUSH {R1}
	LDR R1, =PB_INTER_BASE
     540:	ff200058 	.word	0xff200058

00000544 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040 // memory address reserved fo i/o with slider switches
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} // push R1 since we are modifying it
     544:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, = SW_BASE // load mem address of sliders in R1
     548:	e59f1008 	ldr	r1, [pc, #8]	; 558 <read_slider_switches_ASM+0x14>
	LDR R0, [R1] // load value of slider i/o in R0
     54c:	e5910000 	ldr	r0, [r1]
	POP {R1} // restore R1 since we are done
     550:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR // branch out of subroutine
     554:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200040 // memory address reserved fo i/o with slider switches
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} // push R1 since we are modifying it
	LDR R1, = SW_BASE // load mem address of sliders in R1
     558:	ff200040 	.word	0xff200040

0000055c <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     55c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     560:	e3a01000 	mov	r1, #0
	MOV R2, #1
     564:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     568:	e5907000 	ldr	r7, [r0]
	B LOOP
     56c:	eaffffff 	b	570 <LOOP>

00000570 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     570:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     574:	0a000000 	beq	57c <CONTINUE>
	BL CONFIG
     578:	eb000004 	bl	590 <CONFIG>

0000057c <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     57c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     580:	e3510004 	cmp	r1, #4
	BLT LOOP
     584:	bafffff9 	blt	570 <LOOP>

00000588 <DONE>:

DONE:
	POP {R4-R7, LR}
     588:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     58c:	e12fff1e 	bx	lr

00000590 <CONFIG>:


CONFIG:
	PUSH {LR}
     590:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     594:	e59f3148 	ldr	r3, [pc, #328]	; 6e4 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     598:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     59c:	eb000005 	bl	5b8 <DISABLE>
	BL SET_LOAD_VAL
     5a0:	eb000008 	bl	5c8 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     5a4:	eb00000e 	bl	5e4 <SET_LOAD_BIT>
	BL SET_INT_BIT
     5a8:	eb000013 	bl	5fc <SET_INT_BIT>
	BL SET_EN_BIT
     5ac:	eb000019 	bl	618 <SET_EN_BIT>
	
	POP {LR}
     5b0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     5b4:	e12fff1e 	bx	lr

000005b8 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     5b8:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     5bc:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     5c0:	e5845008 	str	r5, [r4, #8]
	BX LR
     5c4:	e12fff1e 	bx	lr

000005c8 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     5c8:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     5cc:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     5d0:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     5d4:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     5d8:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     5dc:	e5845000 	str	r5, [r4]
	BX LR
     5e0:	e12fff1e 	bx	lr

000005e4 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     5e4:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     5e8:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     5ec:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     5f0:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     5f4:	e5845008 	str	r5, [r4, #8]
	BX LR
     5f8:	e12fff1e 	bx	lr

000005fc <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     5fc:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     600:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     604:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     608:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     60c:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     610:	e5845008 	str	r5, [r4, #8]
	BX LR
     614:	e12fff1e 	bx	lr

00000618 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     618:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     61c:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     620:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     624:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     628:	e5845008 	str	r5, [r4, #8]
	BX LR
     62c:	e12fff1e 	bx	lr

00000630 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     630:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     634:	e3a01000 	mov	r1, #0
	MOV R2, #1
     638:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     63c:	eaffffff 	b	640 <CLEAR_INT_LOOP>

00000640 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     640:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     644:	0a000000 	beq	64c <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     648:	eb000005 	bl	664 <CLEAR_INT>

0000064c <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     64c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     650:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     654:	bafffff9 	blt	640 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     658:	eaffffff 	b	65c <CLEAR_INT_DONE>

0000065c <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     65c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     660:	e12fff1e 	bx	lr

00000664 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     664:	e59f3078 	ldr	r3, [pc, #120]	; 6e4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     668:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     66c:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     670:	e12fff1e 	bx	lr

00000674 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     674:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     678:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     67c:	e3a01000 	mov	r1, #0
	MOV R2, #1
     680:	e3a02001 	mov	r2, #1
	MOV R4, #0
     684:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     688:	eaffffff 	b	68c <READ_INT_LOOP>

0000068c <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     68c:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     690:	0a000000 	beq	698 <READ_INT_CONTINUE>
	BL READ_INT
     694:	eb000008 	bl	6bc <READ_INT>

00000698 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     698:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     69c:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     6a0:	0a000001 	beq	6ac <READ_INT_DONE>
	LSL R4, R4, #1
     6a4:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     6a8:	eafffff7 	b	68c <READ_INT_LOOP>

000006ac <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     6ac:	e1a00004 	mov	r0, r4
	POP {R4}
     6b0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     6b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     6b8:	e12fff1e 	bx	lr

000006bc <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     6bc:	e59f3020 	ldr	r3, [pc, #32]	; 6e4 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     6c0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     6c4:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     6c8:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     6cc:	e0244003 	eor	r4, r4, r3
	BX LR
     6d0:	e12fff1e 	bx	lr

000006d4 <HPS_TIM_BASE>:
     6d4:	ffc08000 	.word	0xffc08000
     6d8:	ffc09000 	.word	0xffc09000
     6dc:	ffd00000 	.word	0xffd00000
     6e0:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     6e4:	000006d4 	.word	0x000006d4

000006e8 <hps_tim0_int_flag>:
     6e8:	00000000 	.word	0x00000000

000006ec <hps_pb_int_flag>:
     6ec:	00000000 	.word	0x00000000

000006f0 <A9_PRIV_TIM_ISR>:

hps_pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     6f0:	e12fff1e 	bx	lr

000006f4 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     6f4:	e12fff1e 	bx	lr

000006f8 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     6f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     6fc:	e3a00001 	mov	r0, #1
	
	//clear the interrupt status register of out timer
	BL HPS_TIM_clear_INT_ASM
     700:	ebffffca 	bl	630 <HPS_TIM_clear_INT_ASM>
	
	// set the hps_tim0_int_flag to 1
	LDR R0, =hps_tim0_int_flag
     704:	e59f0054 	ldr	r0, [pc, #84]	; 760 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     708:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     70c:	e5801000 	str	r1, [r0]

	POP {LR}
     710:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     714:	e12fff1e 	bx	lr

00000718 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     718:	e12fff1e 	bx	lr

0000071c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     71c:	e12fff1e 	bx	lr

00000720 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     720:	e12fff1e 	bx	lr

00000724 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     724:	e12fff1e 	bx	lr

00000728 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:

	PUSH {LR}
     728:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	//read the edgecap register to know which buttons have been pressed
	BL read_PB_edgecap_ASM
     72c:	ebffff61 	bl	4b8 <read_PB_edgecap_ASM>
	LDR R1, =hps_pb_int_flag
     730:	e59f102c 	ldr	r1, [pc, #44]	; 764 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]
     734:	e5810000 	str	r0, [r1]
	
	//clear the edgecap registors of the pushbuttons
	BL PB_clear_edgecp_ASM
     738:	ebffff6c 	bl	4f0 <PB_clear_edgecp_ASM>
	
	POP {LR}
     73c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     740:	e12fff1e 	bx	lr

00000744 <FPGA_Audio_ISR>:

FPGA_Audio_ISR:
	BX LR
     744:	e12fff1e 	bx	lr

00000748 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     748:	e12fff1e 	bx	lr

0000074c <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     74c:	e12fff1e 	bx	lr

00000750 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     750:	e12fff1e 	bx	lr

00000754 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     754:	e12fff1e 	bx	lr

00000758 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     758:	e12fff1e 	bx	lr

0000075c <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     75c:	e12fff1e 	bx	lr
	
	//clear the interrupt status register of out timer
	BL HPS_TIM_clear_INT_ASM
	
	// set the hps_tim0_int_flag to 1
	LDR R0, =hps_tim0_int_flag
     760:	000006e8 	.word	0x000006e8

	PUSH {LR}
	
	//read the edgecap register to know which buttons have been pressed
	BL read_PB_edgecap_ASM
	LDR R1, =hps_pb_int_flag
     764:	000006ec 	.word	0x000006ec

00000768 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     768:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     76c:	e28db000 	add	r11, sp, #0
     770:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     774:	e3a030d3 	mov	r3, #211	; 0xd3
     778:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     77c:	e51b3008 	ldr	r3, [r11, #-8]
     780:	e129f003 	msr	CPSR_fc, r3
}
     784:	e28bd000 	add	sp, r11, #0
     788:	e8bd0800 	ldmfd	sp!, {r11}
     78c:	e12fff1e 	bx	lr

00000790 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     790:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     794:	e28db000 	add	r11, sp, #0
     798:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     79c:	e3a03053 	mov	r3, #83	; 0x53
     7a0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     7a4:	e51b3008 	ldr	r3, [r11, #-8]
     7a8:	e129f003 	msr	CPSR_fc, r3
}
     7ac:	e28bd000 	add	sp, r11, #0
     7b0:	e8bd0800 	ldmfd	sp!, {r11}
     7b4:	e12fff1e 	bx	lr

000007b8 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     7b8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     7bc:	e28db000 	add	r11, sp, #0
     7c0:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     7c4:	e3e03007 	mvn	r3, #7
     7c8:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     7cc:	e3a030d2 	mov	r3, #210	; 0xd2
     7d0:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     7d4:	e51b300c 	ldr	r3, [r11, #-12]
     7d8:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     7dc:	e51b3008 	ldr	r3, [r11, #-8]
     7e0:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     7e4:	e3a030d3 	mov	r3, #211	; 0xd3
     7e8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     7ec:	e51b300c 	ldr	r3, [r11, #-12]
     7f0:	e129f003 	msr	CPSR_fc, r3
}
     7f4:	e28bd000 	add	sp, r11, #0
     7f8:	e8bd0800 	ldmfd	sp!, {r11}
     7fc:	e12fff1e 	bx	lr

00000800 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     800:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     804:	e28db000 	add	r11, sp, #0
     808:	e24dd01c 	sub	sp, sp, #28
     80c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     810:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     814:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     818:	e1a031c3 	asr	r3, r3, #3
     81c:	e3c33003 	bic	r3, r3, #3
     820:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     824:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     828:	e203301f 	and	r3, r3, #31
     82c:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     830:	e3a02001 	mov	r2, #1
     834:	e51b300c 	ldr	r3, [r11, #-12]
     838:	e1a03312 	lsl	r3, r2, r3
     83c:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     840:	e51b3008 	ldr	r3, [r11, #-8]
     844:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     848:	e2433c03 	sub	r3, r3, #768	; 0x300
     84c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     850:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     854:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     858:	e5921000 	ldr	r1, [r2]
     85c:	e51b2010 	ldr	r2, [r11, #-16]
     860:	e1812002 	orr	r2, r1, r2
     864:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     868:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     86c:	e3c33003 	bic	r3, r3, #3
     870:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     874:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     878:	e2033003 	and	r3, r3, #3
     87c:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     880:	e51b2008 	ldr	r2, [r11, #-8]
     884:	e51b300c 	ldr	r3, [r11, #-12]
     888:	e0823003 	add	r3, r2, r3
     88c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     890:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     894:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     898:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     89c:	e6ef2072 	uxtb	r2, r2
     8a0:	e5c32000 	strb	r2, [r3]
}
     8a4:	e28bd000 	add	sp, r11, #0
     8a8:	e8bd0800 	ldmfd	sp!, {r11}
     8ac:	e12fff1e 	bx	lr

000008b0 <config_GIC>:

void config_GIC(int len, int* IDs) {
     8b0:	e92d4800 	push	{r11, lr}
     8b4:	e28db004 	add	r11, sp, #4
     8b8:	e24dd010 	sub	sp, sp, #16
     8bc:	e50b0010 	str	r0, [r11, #-16]
     8c0:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     8c4:	e3a03000 	mov	r3, #0
     8c8:	e50b3008 	str	r3, [r11, #-8]
     8cc:	ea00000a 	b	8fc <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     8d0:	e51b3008 	ldr	r3, [r11, #-8]
     8d4:	e1a03103 	lsl	r3, r3, #2
     8d8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     8dc:	e0823003 	add	r3, r2, r3
     8e0:	e5933000 	ldr	r3, [r3]
     8e4:	e1a00003 	mov	r0, r3
     8e8:	e3a01001 	mov	r1, #1
     8ec:	ebffffc3 	bl	800 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     8f0:	e51b3008 	ldr	r3, [r11, #-8]
     8f4:	e2833001 	add	r3, r3, #1
     8f8:	e50b3008 	str	r3, [r11, #-8]
     8fc:	e51b2008 	ldr	r2, [r11, #-8]
     900:	e51b3010 	ldr	r3, [r11, #-16]
     904:	e1520003 	cmp	r2, r3
     908:	bafffff0 	blt	8d0 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     90c:	e30c3104 	movw	r3, #49412	; 0xc104
     910:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     914:	e30f2fff 	movw	r2, #65535	; 0xffff
     918:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     91c:	e3a03cc1 	mov	r3, #49408	; 0xc100
     920:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     924:	e3a02001 	mov	r2, #1
     928:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     92c:	e3a03a0d 	mov	r3, #53248	; 0xd000
     930:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     934:	e3a02001 	mov	r2, #1
     938:	e5832000 	str	r2, [r3]
}
     93c:	e24bd004 	sub	sp, r11, #4
     940:	e8bd8800 	pop	{r11, pc}

00000944 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     944:	e24ee004 	sub	lr, lr, #4
     948:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     94c:	e28db018 	add	r11, sp, #24
     950:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     954:	e30c310c 	movw	r3, #49420	; 0xc10c
     958:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     95c:	e5933000 	ldr	r3, [r3]
     960:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     964:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     968:	e3530053 	cmp	r3, #83	; 0x53
     96c:	0a00003d 	beq	a68 <__cs3_isr_irq+0x124>
     970:	e3530053 	cmp	r3, #83	; 0x53
     974:	ca000011 	bgt	9c0 <__cs3_isr_irq+0x7c>
     978:	e353004e 	cmp	r3, #78	; 0x4e
     97c:	0a000031 	beq	a48 <__cs3_isr_irq+0x104>
     980:	e353004e 	cmp	r3, #78	; 0x4e
     984:	ca000006 	bgt	9a4 <__cs3_isr_irq+0x60>
     988:	e3530048 	cmp	r3, #72	; 0x48
     98c:	0a000029 	beq	a38 <__cs3_isr_irq+0xf4>
     990:	e3530049 	cmp	r3, #73	; 0x49
     994:	0a000029 	beq	a40 <__cs3_isr_irq+0xfc>
     998:	e353001d 	cmp	r3, #29
     99c:	0a000019 	beq	a08 <__cs3_isr_irq+0xc4>
     9a0:	ea000036 	b	a80 <__cs3_isr_irq+0x13c>
     9a4:	e3530050 	cmp	r3, #80	; 0x50
     9a8:	0a00002a 	beq	a58 <__cs3_isr_irq+0x114>
     9ac:	e3530050 	cmp	r3, #80	; 0x50
     9b0:	ba000026 	blt	a50 <__cs3_isr_irq+0x10c>
     9b4:	e3530051 	cmp	r3, #81	; 0x51
     9b8:	0a000028 	beq	a60 <__cs3_isr_irq+0x11c>
     9bc:	ea00002f 	b	a80 <__cs3_isr_irq+0x13c>
     9c0:	e35300c7 	cmp	r3, #199	; 0xc7
     9c4:	0a000013 	beq	a18 <__cs3_isr_irq+0xd4>
     9c8:	e35300c7 	cmp	r3, #199	; 0xc7
     9cc:	ca000006 	bgt	9ec <__cs3_isr_irq+0xa8>
     9d0:	e3530059 	cmp	r3, #89	; 0x59
     9d4:	0a000027 	beq	a78 <__cs3_isr_irq+0x134>
     9d8:	e35300c5 	cmp	r3, #197	; 0xc5
     9dc:	0a00000b 	beq	a10 <__cs3_isr_irq+0xcc>
     9e0:	e3530054 	cmp	r3, #84	; 0x54
     9e4:	0a000021 	beq	a70 <__cs3_isr_irq+0x12c>
     9e8:	ea000024 	b	a80 <__cs3_isr_irq+0x13c>
     9ec:	e35300c9 	cmp	r3, #201	; 0xc9
     9f0:	0a00000c 	beq	a28 <__cs3_isr_irq+0xe4>
     9f4:	e35300c9 	cmp	r3, #201	; 0xc9
     9f8:	ba000008 	blt	a20 <__cs3_isr_irq+0xdc>
     9fc:	e35300ca 	cmp	r3, #202	; 0xca
     a00:	0a00000a 	beq	a30 <__cs3_isr_irq+0xec>
     a04:	ea00001d 	b	a80 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     a08:	ebffff38 	bl	6f0 <A9_PRIV_TIM_ISR>
     a0c:	ea00001c 	b	a84 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     a10:	ebffff37 	bl	6f4 <HPS_GPIO1_ISR>
     a14:	ea00001a 	b	a84 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     a18:	ebffff36 	bl	6f8 <HPS_TIM0_ISR>
     a1c:	ea000018 	b	a84 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     a20:	ebffff3c 	bl	718 <HPS_TIM1_ISR>
     a24:	ea000016 	b	a84 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     a28:	ebffff3b 	bl	71c <HPS_TIM2_ISR>
     a2c:	ea000014 	b	a84 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     a30:	ebffff3a 	bl	720 <HPS_TIM3_ISR>
     a34:	ea000012 	b	a84 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     a38:	ebffff39 	bl	724 <FPGA_INTERVAL_TIM_ISR>
     a3c:	ea000010 	b	a84 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     a40:	ebffff38 	bl	728 <FPGA_PB_KEYS_ISR>
     a44:	ea00000e 	b	a84 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     a48:	ebffff3d 	bl	744 <FPGA_Audio_ISR>
     a4c:	ea00000c 	b	a84 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     a50:	ebffff3c 	bl	748 <FPGA_PS2_ISR>
     a54:	ea00000a 	b	a84 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     a58:	ebffff3b 	bl	74c <FPGA_JTAG_ISR>
     a5c:	ea000008 	b	a84 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     a60:	ebffff3a 	bl	750 <FPGA_IrDA_ISR>
     a64:	ea000006 	b	a84 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     a68:	ebffff39 	bl	754 <FPGA_JP1_ISR>
     a6c:	ea000004 	b	a84 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     a70:	ebffff38 	bl	758 <FPGA_JP2_ISR>
     a74:	ea000002 	b	a84 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     a78:	ebffff37 	bl	75c <FPGA_PS2_DUAL_ISR>
     a7c:	ea000000 	b	a84 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     a80:	eafffffe 	b	a80 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     a84:	e30c3110 	movw	r3, #49424	; 0xc110
     a88:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a8c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     a90:	e5832000 	str	r2, [r3]
}
     a94:	e24bd018 	sub	sp, r11, #24
     a98:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000a9c <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     a9c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     aa0:	e28db000 	add	r11, sp, #0
	while(1);
     aa4:	eafffffe 	b	aa4 <__cs3_reset+0x8>

00000aa8 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     aa8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     aac:	e28db000 	add	r11, sp, #0
	while(1);
     ab0:	eafffffe 	b	ab0 <__cs3_isr_undef+0x8>

00000ab4 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     ab4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ab8:	e28db000 	add	r11, sp, #0
	while(1);
     abc:	eafffffe 	b	abc <__cs3_isr_swi+0x8>

00000ac0 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     ac0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ac4:	e28db000 	add	r11, sp, #0
	while(1);
     ac8:	eafffffe 	b	ac8 <__cs3_isr_pabort+0x8>

00000acc <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     acc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ad0:	e28db000 	add	r11, sp, #0
	while(1);
     ad4:	eafffffe 	b	ad4 <__cs3_isr_dabort+0x8>

00000ad8 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     ad8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     adc:	e28db000 	add	r11, sp, #0
	while(1);
     ae0:	eafffffe 	b	ae0 <__cs3_isr_fiq+0x8>

00000ae4 <fix_bug>:
}

void fix_bug() {
     ae4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ae8:	e28db000 	add	r11, sp, #0
     aec:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     af0:	e30d3198 	movw	r3, #53656	; 0xd198
     af4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     af8:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     afc:	e51b3008 	ldr	r3, [r11, #-8]
     b00:	e3a02703 	mov	r2, #786432	; 0xc0000
     b04:	e5832000 	str	r2, [r3]
}
     b08:	e28bd000 	add	sp, r11, #0
     b0c:	e8bd0800 	ldmfd	sp!, {r11}
     b10:	e12fff1e 	bx	lr

00000b14 <int_setup>:

void int_setup(int len, int* IDs) {
     b14:	e92d4800 	push	{r11, lr}
     b18:	e28db004 	add	r11, sp, #4
     b1c:	e24dd008 	sub	sp, sp, #8
     b20:	e50b0008 	str	r0, [r11, #-8]
     b24:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     b28:	ebffff0e 	bl	768 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     b2c:	ebffff21 	bl	7b8 <set_A9_IRQ_stack>
	fix_bug();
     b30:	ebffffeb 	bl	ae4 <fix_bug>
	config_GIC(len, IDs);
     b34:	e51b0008 	ldr	r0, [r11, #-8]
     b38:	e51b100c 	ldr	r1, [r11, #-12]
     b3c:	ebffff5b 	bl	8b0 <config_GIC>
	enable_A9_interrupts();
     b40:	ebffff12 	bl	790 <enable_A9_interrupts>
}
     b44:	e24bd004 	sub	sp, r11, #4
     b48:	e8bd8800 	pop	{r11, pc}

00000b4c <main>:
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/int_setup.h"
#include "./drivers/inc/ISRs.h"

int main(){
     b4c:	e92d4800 	push	{r11, lr}
     b50:	e28db004 	add	r11, sp, #4
     b54:	e24dd050 	sub	sp, sp, #80	; 0x50
	
	// setup interruptions
	int_setup(2, (int []){73, 199});
     b58:	e30133c8 	movw	r3, #5064	; 0x13c8
     b5c:	e3403000 	movt	r3, #0
     b60:	e24b203c 	sub	r2, r11, #60	; 0x3c
     b64:	e8930003 	ldm	r3, {r0, r1}
     b68:	e8820003 	stm	r2, {r0, r1}
     b6c:	e24b303c 	sub	r3, r11, #60	; 0x3c
     b70:	e3a00002 	mov	r0, #2
     b74:	e1a01003 	mov	r1, r3
     b78:	ebffffe5 	bl	b14 <int_setup>
	
	//create counters
	int count10_ms = 0;
     b7c:	e3a03000 	mov	r3, #0
     b80:	e50b3008 	str	r3, [r11, #-8]
	int count100_ms = 0;
     b84:	e3a03000 	mov	r3, #0
     b88:	e50b300c 	str	r3, [r11, #-12]
	int count1_sec = 0;
     b8c:	e3a03000 	mov	r3, #0
     b90:	e50b3010 	str	r3, [r11, #-16]
	int count10_sec = 0;
     b94:	e3a03000 	mov	r3, #0
     b98:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int count1_min = 0;
     b9c:	e3a03000 	mov	r3, #0
     ba0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int count10_min = 0;
     ba4:	e3a03000 	mov	r3, #0
     ba8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	
	// declares flags
	int flag1 = 0;
     bac:	e3a03000 	mov	r3, #0
     bb0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int flag2 = 0;
     bb4:	e3a03000 	mov	r3, #0
     bb8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	int flag3 = 0;
     bbc:	e3a03000 	mov	r3, #0
     bc0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int flag4 = 0;
     bc4:	e3a03000 	mov	r3, #0
     bc8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	int flag5 = 0;
     bcc:	e3a03000 	mov	r3, #0
     bd0:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	
	// run flags
	int run = 1;
     bd4:	e3a03001 	mov	r3, #1
     bd8:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc

	//create timer structure
	HPS_TIM_config_t hps_tim;
	
	// construct the timer struct for 10ms timer
	hps_tim.tim = TIM0; // use only one timer
     bdc:	e3a03001 	mov	r3, #1
     be0:	e54b3050 	strb	r3, [r11, #-80]	; 0xffffffb0
	hps_tim.timeout = 10000; // 10ms timeouts
     be4:	e3023710 	movw	r3, #10000	; 0x2710
     be8:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
	hps_tim.LD_en = 1; // 1 means we want to enable loading the timer
     bec:	e3a03001 	mov	r3, #1
     bf0:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
	hps_tim.INT_en = 1; // 1 means we want to enable the timer to generate interruptions
     bf4:	e3a03001 	mov	r3, #1
     bf8:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
	hps_tim.enable = 1; // means if we want to enable the timer
     bfc:	e3a03001 	mov	r3, #1
     c00:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0

	// configure the hardware timer for 10ms timer
	HPS_TIM_config_ASM(&hps_tim);
     c04:	e24b3050 	sub	r3, r11, #80	; 0x50
     c08:	e1a00003 	mov	r0, r3
     c0c:	ebfffe52 	bl	55c <HPS_TIM_config_ASM>

	// enable interruptions for pushbuttons
	enable_PB_INT_ASM(PB0 | PB1 | PB2);
     c10:	e3a00007 	mov	r0, #7
     c14:	ebfffe3a 	bl	504 <enable_PB_INT_ASM>
     c18:	ea000000 	b	c20 <main+0xd4>
			HEX_write_ASM(HEX3, count10_sec);
			HEX_write_ASM(HEX4, count1_min);
			HEX_write_ASM(HEX5, count10_min);
		}
	
	}
     c1c:	e1a00000 	nop			; (mov r0, r0)
	enable_PB_INT_ASM(PB0 | PB1 | PB2);

	while(1){
	
		//start counter if pushbutton 0 is pressed
		if(hps_pb_int_flag == 1){
     c20:	e30036ec 	movw	r3, #1772	; 0x6ec
     c24:	e3403000 	movt	r3, #0
     c28:	e5933000 	ldr	r3, [r3]
     c2c:	e3530001 	cmp	r3, #1
     c30:	1a0000a8 	bne	ed8 <main+0x38c>
			
			run = 1;
     c34:	e3a03001 	mov	r3, #1
     c38:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
			
			hps_pb_int_flag = 0;
     c3c:	e30036ec 	movw	r3, #1772	; 0x6ec
     c40:	e3403000 	movt	r3, #0
     c44:	e3a02000 	mov	r2, #0
     c48:	e5832000 	str	r2, [r3]
			
			//stop timer if reset button is pressed
			while(hps_pb_int_flag != 4){
     c4c:	ea00009c 	b	ec4 <main+0x378>
				
				// if start button is pressed run
				if(hps_pb_int_flag == 1){
     c50:	e30036ec 	movw	r3, #1772	; 0x6ec
     c54:	e3403000 	movt	r3, #0
     c58:	e5933000 	ldr	r3, [r3]
     c5c:	e3530001 	cmp	r3, #1
     c60:	1a000005 	bne	c7c <main+0x130>
					run = 1;
     c64:	e3a03001 	mov	r3, #1
     c68:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
					hps_pb_int_flag = 0;
     c6c:	e30036ec 	movw	r3, #1772	; 0x6ec
     c70:	e3403000 	movt	r3, #0
     c74:	e3a02000 	mov	r2, #0
     c78:	e5832000 	str	r2, [r3]
				}
				
				// if stop button is pressed dont run
				if(hps_pb_int_flag == 2){
     c7c:	e30036ec 	movw	r3, #1772	; 0x6ec
     c80:	e3403000 	movt	r3, #0
     c84:	e5933000 	ldr	r3, [r3]
     c88:	e3530002 	cmp	r3, #2
     c8c:	1a000005 	bne	ca8 <main+0x15c>
					run = 0;
     c90:	e3a03000 	mov	r3, #0
     c94:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
					hps_pb_int_flag = 0;
     c98:	e30036ec 	movw	r3, #1772	; 0x6ec
     c9c:	e3403000 	movt	r3, #0
     ca0:	e3a02000 	mov	r2, #0
     ca4:	e5832000 	str	r2, [r3]
				}
		
				if(run){
     ca8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     cac:	e3530000 	cmp	r3, #0
     cb0:	0a000065 	beq	e4c <main+0x300>
					// check interrupt flag to know if the timer has made an interruption saying that 10 ms has passed
					//if 10ms has passed then increment counters
					if(hps_tim0_int_flag){
     cb4:	e30036e8 	movw	r3, #1768	; 0x6e8
     cb8:	e3403000 	movt	r3, #0
     cbc:	e5933000 	ldr	r3, [r3]
     cc0:	e3530000 	cmp	r3, #0
     cc4:	0a00000d 	beq	d00 <main+0x1b4>
						// reset interrupt flad
						hps_tim0_int_flag = 0;
     cc8:	e30036e8 	movw	r3, #1768	; 0x6e8
     ccc:	e3403000 	movt	r3, #0
     cd0:	e3a02000 	mov	r2, #0
     cd4:	e5832000 	str	r2, [r3]
						count10_ms = count10_ms + 1;
     cd8:	e51b3008 	ldr	r3, [r11, #-8]
     cdc:	e2833001 	add	r3, r3, #1
     ce0:	e50b3008 	str	r3, [r11, #-8]
					
						// if we reached 100ms then reset 10ms counter and set flag1 up
						if(count10_ms == 10){
     ce4:	e51b3008 	ldr	r3, [r11, #-8]
     ce8:	e353000a 	cmp	r3, #10
     cec:	1a000003 	bne	d00 <main+0x1b4>
							count10_ms = 0;
     cf0:	e3a03000 	mov	r3, #0
     cf4:	e50b3008 	str	r3, [r11, #-8]
							flag1 = 1;
     cf8:	e3a03001 	mov	r3, #1
     cfc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
						}
					}
				
					// increment 100ms counter
					if(flag1){
     d00:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     d04:	e3530000 	cmp	r3, #0
     d08:	0a00000b 	beq	d3c <main+0x1f0>
						flag1 = 0;
     d0c:	e3a03000 	mov	r3, #0
     d10:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
						count100_ms = count100_ms + 1;
     d14:	e51b300c 	ldr	r3, [r11, #-12]
     d18:	e2833001 	add	r3, r3, #1
     d1c:	e50b300c 	str	r3, [r11, #-12]
						// if we reached 1s then reset 100ms counter and set flag2 up
						if(count100_ms == 10){
     d20:	e51b300c 	ldr	r3, [r11, #-12]
     d24:	e353000a 	cmp	r3, #10
     d28:	1a000003 	bne	d3c <main+0x1f0>
							count100_ms = 0;
     d2c:	e3a03000 	mov	r3, #0
     d30:	e50b300c 	str	r3, [r11, #-12]
							flag2 = 1;
     d34:	e3a03001 	mov	r3, #1
     d38:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
						}
					}

					if(flag2){
     d3c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     d40:	e3530000 	cmp	r3, #0
     d44:	0a00000b 	beq	d78 <main+0x22c>
						flag2 = 0;
     d48:	e3a03000 	mov	r3, #0
     d4c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
						count1_sec = count1_sec + 1;
     d50:	e51b3010 	ldr	r3, [r11, #-16]
     d54:	e2833001 	add	r3, r3, #1
     d58:	e50b3010 	str	r3, [r11, #-16]
						// if we reached 10s then reset 1s counter and set flag3 up
						if(count1_sec == 10){
     d5c:	e51b3010 	ldr	r3, [r11, #-16]
     d60:	e353000a 	cmp	r3, #10
     d64:	1a000003 	bne	d78 <main+0x22c>
							count1_sec = 0;
     d68:	e3a03000 	mov	r3, #0
     d6c:	e50b3010 	str	r3, [r11, #-16]
							flag3 = 1;
     d70:	e3a03001 	mov	r3, #1
     d74:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
						}
					}
	
					if(flag3){
     d78:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     d7c:	e3530000 	cmp	r3, #0
     d80:	0a00000b 	beq	db4 <main+0x268>
						flag3 = 0;
     d84:	e3a03000 	mov	r3, #0
     d88:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
						count10_sec = count10_sec + 1;
     d8c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     d90:	e2833001 	add	r3, r3, #1
     d94:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						// if we reached 60s then reset 10s counter and set flag4 up
						if(count10_sec == 6){
     d98:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     d9c:	e3530006 	cmp	r3, #6
     da0:	1a000003 	bne	db4 <main+0x268>
							count10_sec = 0;
     da4:	e3a03000 	mov	r3, #0
     da8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
							flag4 = 1;
     dac:	e3a03001 	mov	r3, #1
     db0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
						}
					}
		
					if(flag4){
     db4:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     db8:	e3530000 	cmp	r3, #0
     dbc:	0a00000b 	beq	df0 <main+0x2a4>
						flag4 = 0;
     dc0:	e3a03000 	mov	r3, #0
     dc4:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
						count1_min = count1_min + 1;
     dc8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     dcc:	e2833001 	add	r3, r3, #1
     dd0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
						// if we reached 10m then reset 1min counter and set flag5 up
						if(count1_min == 10){
     dd4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     dd8:	e353000a 	cmp	r3, #10
     ddc:	1a000003 	bne	df0 <main+0x2a4>
							count1_min = 0;
     de0:	e3a03000 	mov	r3, #0
     de4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
							flag5 = 1;
     de8:	e3a03001 	mov	r3, #1
     dec:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
						}
					}	

					if(flag5){
     df0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     df4:	e3530000 	cmp	r3, #0
     df8:	0a000013 	beq	e4c <main+0x300>
						flag5 = 0;
     dfc:	e3a03000 	mov	r3, #0
     e00:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
						count10_min = count10_min + 1;
     e04:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     e08:	e2833001 	add	r3, r3, #1
     e0c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
						// if we reached 60m then reset 10min counter and reset all counters
						if(count10_min == 6){
     e10:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     e14:	e3530006 	cmp	r3, #6
     e18:	1a00000b 	bne	e4c <main+0x300>
							count10_min = 0;
     e1c:	e3a03000 	mov	r3, #0
     e20:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
							count10_ms = 0;
     e24:	e3a03000 	mov	r3, #0
     e28:	e50b3008 	str	r3, [r11, #-8]
							count100_ms = 0;
     e2c:	e3a03000 	mov	r3, #0
     e30:	e50b300c 	str	r3, [r11, #-12]
							count1_sec = 0;
     e34:	e3a03000 	mov	r3, #0
     e38:	e50b3010 	str	r3, [r11, #-16]
							count10_sec = 0;
     e3c:	e3a03000 	mov	r3, #0
     e40:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
							count1_min = 0;
     e44:	e3a03000 	mov	r3, #0
     e48:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
						}
					}
				}
				// display counters
				HEX_write_ASM(HEX0, count10_ms);
     e4c:	e51b3008 	ldr	r3, [r11, #-8]
     e50:	e6ef3073 	uxtb	r3, r3
     e54:	e3a00001 	mov	r0, #1
     e58:	e1a01003 	mov	r1, r3
     e5c:	ebfffd02 	bl	26c <HEX_write_ASM>
				HEX_write_ASM(HEX1, count100_ms);
     e60:	e51b300c 	ldr	r3, [r11, #-12]
     e64:	e6ef3073 	uxtb	r3, r3
     e68:	e3a00002 	mov	r0, #2
     e6c:	e1a01003 	mov	r1, r3
     e70:	ebfffcfd 	bl	26c <HEX_write_ASM>
				HEX_write_ASM(HEX2, count1_sec);
     e74:	e51b3010 	ldr	r3, [r11, #-16]
     e78:	e6ef3073 	uxtb	r3, r3
     e7c:	e3a00004 	mov	r0, #4
     e80:	e1a01003 	mov	r1, r3
     e84:	ebfffcf8 	bl	26c <HEX_write_ASM>
				HEX_write_ASM(HEX3, count10_sec);
     e88:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     e8c:	e6ef3073 	uxtb	r3, r3
     e90:	e3a00008 	mov	r0, #8
     e94:	e1a01003 	mov	r1, r3
     e98:	ebfffcf3 	bl	26c <HEX_write_ASM>
				HEX_write_ASM(HEX4, count1_min);
     e9c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     ea0:	e6ef3073 	uxtb	r3, r3
     ea4:	e3a00010 	mov	r0, #16
     ea8:	e1a01003 	mov	r1, r3
     eac:	ebfffcee 	bl	26c <HEX_write_ASM>
				HEX_write_ASM(HEX5, count10_min);
     eb0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     eb4:	e6ef3073 	uxtb	r3, r3
     eb8:	e3a00020 	mov	r0, #32
     ebc:	e1a01003 	mov	r1, r3
     ec0:	ebfffce9 	bl	26c <HEX_write_ASM>
			run = 1;
			
			hps_pb_int_flag = 0;
			
			//stop timer if reset button is pressed
			while(hps_pb_int_flag != 4){
     ec4:	e30036ec 	movw	r3, #1772	; 0x6ec
     ec8:	e3403000 	movt	r3, #0
     ecc:	e5933000 	ldr	r3, [r3]
     ed0:	e3530004 	cmp	r3, #4
     ed4:	1affff5d 	bne	c50 <main+0x104>
				HEX_write_ASM(HEX5, count10_min);
			}
		}
		
		//reset counter if pushbutton 2 is presseds
		if(hps_pb_int_flag == 4){
     ed8:	e30036ec 	movw	r3, #1772	; 0x6ec
     edc:	e3403000 	movt	r3, #0
     ee0:	e5933000 	ldr	r3, [r3]
     ee4:	e3530004 	cmp	r3, #4
     ee8:	1affff4b 	bne	c1c <main+0xd0>
			//reset interrupt since we only want to "catch" it
			hps_pb_int_flag = 0;
     eec:	e30036ec 	movw	r3, #1772	; 0x6ec
     ef0:	e3403000 	movt	r3, #0
     ef4:	e3a02000 	mov	r2, #0
     ef8:	e5832000 	str	r2, [r3]
			count10_min = 0;
     efc:	e3a03000 	mov	r3, #0
     f00:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
			count10_ms = 0;
     f04:	e3a03000 	mov	r3, #0
     f08:	e50b3008 	str	r3, [r11, #-8]
			count100_ms = 0;
     f0c:	e3a03000 	mov	r3, #0
     f10:	e50b300c 	str	r3, [r11, #-12]
			count1_sec = 0;
     f14:	e3a03000 	mov	r3, #0
     f18:	e50b3010 	str	r3, [r11, #-16]
			count10_sec = 0;
     f1c:	e3a03000 	mov	r3, #0
     f20:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			count1_min = 0;
     f24:	e3a03000 	mov	r3, #0
     f28:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			HEX_write_ASM(HEX0, count10_ms);
     f2c:	e51b3008 	ldr	r3, [r11, #-8]
     f30:	e6ef3073 	uxtb	r3, r3
     f34:	e3a00001 	mov	r0, #1
     f38:	e1a01003 	mov	r1, r3
     f3c:	ebfffcca 	bl	26c <HEX_write_ASM>
			HEX_write_ASM(HEX1, count100_ms);
     f40:	e51b300c 	ldr	r3, [r11, #-12]
     f44:	e6ef3073 	uxtb	r3, r3
     f48:	e3a00002 	mov	r0, #2
     f4c:	e1a01003 	mov	r1, r3
     f50:	ebfffcc5 	bl	26c <HEX_write_ASM>
			HEX_write_ASM(HEX2, count1_sec);
     f54:	e51b3010 	ldr	r3, [r11, #-16]
     f58:	e6ef3073 	uxtb	r3, r3
     f5c:	e3a00004 	mov	r0, #4
     f60:	e1a01003 	mov	r1, r3
     f64:	ebfffcc0 	bl	26c <HEX_write_ASM>
			HEX_write_ASM(HEX3, count10_sec);
     f68:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     f6c:	e6ef3073 	uxtb	r3, r3
     f70:	e3a00008 	mov	r0, #8
     f74:	e1a01003 	mov	r1, r3
     f78:	ebfffcbb 	bl	26c <HEX_write_ASM>
			HEX_write_ASM(HEX4, count1_min);
     f7c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     f80:	e6ef3073 	uxtb	r3, r3
     f84:	e3a00010 	mov	r0, #16
     f88:	e1a01003 	mov	r1, r3
     f8c:	ebfffcb6 	bl	26c <HEX_write_ASM>
			HEX_write_ASM(HEX5, count10_min);
     f90:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     f94:	e6ef3073 	uxtb	r3, r3
     f98:	e3a00020 	mov	r0, #32
     f9c:	e1a01003 	mov	r1, r3
     fa0:	ebfffcb1 	bl	26c <HEX_write_ASM>
		}
	
	}
     fa4:	eaffff1c 	b	c1c <main+0xd0>

00000fa8 <atexit>:
     fa8:	e1a01000 	mov	r1, r0
     fac:	e3a00000 	mov	r0, #0
     fb0:	e92d4008 	push	{r3, lr}
     fb4:	e1a02000 	mov	r2, r0
     fb8:	e1a03000 	mov	r3, r0
     fbc:	eb00000e 	bl	ffc <__register_exitproc>
     fc0:	e8bd4008 	pop	{r3, lr}
     fc4:	e12fff1e 	bx	lr

00000fc8 <exit>:
     fc8:	e92d4008 	push	{r3, lr}
     fcc:	e3a01000 	mov	r1, #0
     fd0:	e1a04000 	mov	r4, r0
     fd4:	eb000045 	bl	10f0 <__call_exitprocs>
     fd8:	e59f3018 	ldr	r3, [pc, #24]	; ff8 <exit+0x30>
     fdc:	e5930000 	ldr	r0, [r3]
     fe0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     fe4:	e3530000 	cmp	r3, #0
     fe8:	11a0e00f 	movne	lr, pc
     fec:	112fff13 	bxne	r3
     ff0:	e1a00004 	mov	r0, r4
     ff4:	eb0000c9 	bl	1320 <_exit>
     ff8:	000013d0 	.word	0x000013d0

00000ffc <__register_exitproc>:
     ffc:	e59fc0e4 	ldr	r12, [pc, #228]	; 10e8 <__register_exitproc+0xec>
    1000:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1004:	e59c4000 	ldr	r4, [r12]
    1008:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    100c:	e35c0000 	cmp	r12, #0
    1010:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1014:	e59c5004 	ldr	r5, [r12, #4]
    1018:	0584c148 	streq	r12, [r4, #328]	; 0x148
    101c:	e355001f 	cmp	r5, #31
    1020:	e24dd010 	sub	sp, sp, #16
    1024:	e1a06000 	mov	r6, r0
    1028:	da000015 	ble	1084 <__register_exitproc+0x88>
    102c:	e59f00b8 	ldr	r0, [pc, #184]	; 10ec <__register_exitproc+0xf0>
    1030:	e3500000 	cmp	r0, #0
    1034:	1a000001 	bne	1040 <__register_exitproc+0x44>
    1038:	e3e00000 	mvn	r0, #0
    103c:	ea000018 	b	10a4 <__register_exitproc+0xa8>
    1040:	e3a00e19 	mov	r0, #400	; 0x190
    1044:	e58d100c 	str	r1, [sp, #12]
    1048:	e58d2008 	str	r2, [sp, #8]
    104c:	e58d3004 	str	r3, [sp, #4]
    1050:	e320f000 	nop	{0}
    1054:	e250c000 	subs	r12, r0, #0
    1058:	e59d100c 	ldr	r1, [sp, #12]
    105c:	e59d2008 	ldr	r2, [sp, #8]
    1060:	e59d3004 	ldr	r3, [sp, #4]
    1064:	0afffff3 	beq	1038 <__register_exitproc+0x3c>
    1068:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    106c:	e3a00000 	mov	r0, #0
    1070:	e58c0004 	str	r0, [r12, #4]
    1074:	e58c5000 	str	r5, [r12]
    1078:	e584c148 	str	r12, [r4, #328]	; 0x148
    107c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1080:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1084:	e3560000 	cmp	r6, #0
    1088:	e59c4004 	ldr	r4, [r12, #4]
    108c:	1a000007 	bne	10b0 <__register_exitproc+0xb4>
    1090:	e2843002 	add	r3, r4, #2
    1094:	e2844001 	add	r4, r4, #1
    1098:	e78c1103 	str	r1, [r12, r3, lsl #2]
    109c:	e58c4004 	str	r4, [r12, #4]
    10a0:	e3a00000 	mov	r0, #0
    10a4:	e28dd010 	add	sp, sp, #16
    10a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    10ac:	e12fff1e 	bx	lr
    10b0:	e3a00001 	mov	r0, #1
    10b4:	e1a00410 	lsl	r0, r0, r4
    10b8:	e08c8104 	add	r8, r12, r4, lsl #2
    10bc:	e3560002 	cmp	r6, #2
    10c0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    10c4:	e5883108 	str	r3, [r8, #264]	; 0x108
    10c8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    10cc:	e1877000 	orr	r7, r7, r0
    10d0:	01830000 	orreq	r0, r3, r0
    10d4:	e1a05008 	mov	r5, r8
    10d8:	e5882088 	str	r2, [r8, #136]	; 0x88
    10dc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    10e0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    10e4:	eaffffe9 	b	1090 <__register_exitproc+0x94>
    10e8:	000013d0 	.word	0x000013d0
    10ec:	00000000 	.word	0x00000000

000010f0 <__call_exitprocs>:
    10f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    10f4:	e59f3168 	ldr	r3, [pc, #360]	; 1264 <__call_exitprocs+0x174>
    10f8:	e5933000 	ldr	r3, [r3]
    10fc:	e24dd014 	sub	sp, sp, #20
    1100:	e58d3004 	str	r3, [sp, #4]
    1104:	e2833f52 	add	r3, r3, #328	; 0x148
    1108:	e58d0008 	str	r0, [sp, #8]
    110c:	e58d300c 	str	r3, [sp, #12]
    1110:	e1a07001 	mov	r7, r1
    1114:	e3a08001 	mov	r8, #1
    1118:	e59d3004 	ldr	r3, [sp, #4]
    111c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1120:	e3560000 	cmp	r6, #0
    1124:	e59db00c 	ldr	r11, [sp, #12]
    1128:	0a000033 	beq	11fc <__call_exitprocs+0x10c>
    112c:	e5965004 	ldr	r5, [r6, #4]
    1130:	e2554001 	subs	r4, r5, #1
    1134:	5286a088 	addpl	r10, r6, #136	; 0x88
    1138:	5285501f 	addpl	r5, r5, #31
    113c:	508a5105 	addpl	r5, r10, r5, lsl #2
    1140:	5a000007 	bpl	1164 <__call_exitprocs+0x74>
    1144:	ea000029 	b	11f0 <__call_exitprocs+0x100>
    1148:	e5953000 	ldr	r3, [r5]
    114c:	e1530007 	cmp	r3, r7
    1150:	0a000005 	beq	116c <__call_exitprocs+0x7c>
    1154:	e2444001 	sub	r4, r4, #1
    1158:	e3740001 	cmn	r4, #1
    115c:	e2455004 	sub	r5, r5, #4
    1160:	0a000022 	beq	11f0 <__call_exitprocs+0x100>
    1164:	e3570000 	cmp	r7, #0
    1168:	1afffff6 	bne	1148 <__call_exitprocs+0x58>
    116c:	e5963004 	ldr	r3, [r6, #4]
    1170:	e06a2005 	rsb	r2, r10, r5
    1174:	e2433001 	sub	r3, r3, #1
    1178:	e0862002 	add	r2, r6, r2
    117c:	e1530004 	cmp	r3, r4
    1180:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1184:	13a01000 	movne	r1, #0
    1188:	05864004 	streq	r4, [r6, #4]
    118c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1190:	e3530000 	cmp	r3, #0
    1194:	0affffee 	beq	1154 <__call_exitprocs+0x64>
    1198:	e1a02418 	lsl	r2, r8, r4
    119c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    11a0:	e1120001 	tst	r2, r1
    11a4:	e5969004 	ldr	r9, [r6, #4]
    11a8:	0a000016 	beq	1208 <__call_exitprocs+0x118>
    11ac:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    11b0:	e1120001 	tst	r2, r1
    11b4:	1a000016 	bne	1214 <__call_exitprocs+0x124>
    11b8:	e59d0008 	ldr	r0, [sp, #8]
    11bc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    11c0:	e1a0e00f 	mov	lr, pc
    11c4:	e12fff13 	bx	r3
    11c8:	e5963004 	ldr	r3, [r6, #4]
    11cc:	e1530009 	cmp	r3, r9
    11d0:	1affffd0 	bne	1118 <__call_exitprocs+0x28>
    11d4:	e59b3000 	ldr	r3, [r11]
    11d8:	e1530006 	cmp	r3, r6
    11dc:	1affffcd 	bne	1118 <__call_exitprocs+0x28>
    11e0:	e2444001 	sub	r4, r4, #1
    11e4:	e3740001 	cmn	r4, #1
    11e8:	e2455004 	sub	r5, r5, #4
    11ec:	1affffdc 	bne	1164 <__call_exitprocs+0x74>
    11f0:	e59f1070 	ldr	r1, [pc, #112]	; 1268 <__call_exitprocs+0x178>
    11f4:	e3510000 	cmp	r1, #0
    11f8:	1a000009 	bne	1224 <__call_exitprocs+0x134>
    11fc:	e28dd014 	add	sp, sp, #20
    1200:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1204:	e12fff1e 	bx	lr
    1208:	e1a0e00f 	mov	lr, pc
    120c:	e12fff13 	bx	r3
    1210:	eaffffec 	b	11c8 <__call_exitprocs+0xd8>
    1214:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1218:	e1a0e00f 	mov	lr, pc
    121c:	e12fff13 	bx	r3
    1220:	eaffffe8 	b	11c8 <__call_exitprocs+0xd8>
    1224:	e5963004 	ldr	r3, [r6, #4]
    1228:	e3530000 	cmp	r3, #0
    122c:	e5963000 	ldr	r3, [r6]
    1230:	1a000008 	bne	1258 <__call_exitprocs+0x168>
    1234:	e3530000 	cmp	r3, #0
    1238:	0a000006 	beq	1258 <__call_exitprocs+0x168>
    123c:	e1a00006 	mov	r0, r6
    1240:	e58b3000 	str	r3, [r11]
    1244:	e320f000 	nop	{0}
    1248:	e59b6000 	ldr	r6, [r11]
    124c:	e3560000 	cmp	r6, #0
    1250:	1affffb5 	bne	112c <__call_exitprocs+0x3c>
    1254:	eaffffe8 	b	11fc <__call_exitprocs+0x10c>
    1258:	e1a0b006 	mov	r11, r6
    125c:	e1a06003 	mov	r6, r3
    1260:	eafffff9 	b	124c <__call_exitprocs+0x15c>
    1264:	000013d0 	.word	0x000013d0
    1268:	00000000 	.word	0x00000000

0000126c <register_fini>:
    126c:	e92d4008 	push	{r3, lr}
    1270:	e59f3010 	ldr	r3, [pc, #16]	; 1288 <register_fini+0x1c>
    1274:	e3530000 	cmp	r3, #0
    1278:	159f000c 	ldrne	r0, [pc, #12]	; 128c <register_fini+0x20>
    127c:	1bffff49 	blne	fa8 <atexit>
    1280:	e8bd4008 	pop	{r3, lr}
    1284:	e12fff1e 	bx	lr
    1288:	000013f8 	.word	0x000013f8
    128c:	00001290 	.word	0x00001290

00001290 <__libc_fini_array>:
    1290:	e92d4038 	push	{r3, r4, r5, lr}
    1294:	e59f5030 	ldr	r5, [pc, #48]	; 12cc <__libc_fini_array+0x3c>
    1298:	e59f4030 	ldr	r4, [pc, #48]	; 12d0 <__libc_fini_array+0x40>
    129c:	e0654004 	rsb	r4, r5, r4
    12a0:	e1b04144 	asrs	r4, r4, #2
    12a4:	10855104 	addne	r5, r5, r4, lsl #2
    12a8:	0a000004 	beq	12c0 <__libc_fini_array+0x30>
    12ac:	e5353004 	ldr	r3, [r5, #-4]!
    12b0:	e1a0e00f 	mov	lr, pc
    12b4:	e12fff13 	bx	r3
    12b8:	e2544001 	subs	r4, r4, #1
    12bc:	1afffffa 	bne	12ac <__libc_fini_array+0x1c>
    12c0:	eb00004c 	bl	13f8 <__libc_fini>
    12c4:	e8bd4038 	pop	{r3, r4, r5, lr}
    12c8:	e12fff1e 	bx	lr
    12cc:	00001410 	.word	0x00001410
    12d0:	00001414 	.word	0x00001414

000012d4 <__cs3_premain>:
    12d4:	e92d4008 	push	{r3, lr}
    12d8:	eb000017 	bl	133c <__libc_init_array>
    12dc:	e59f3030 	ldr	r3, [pc, #48]	; 1314 <__cs3_premain+0x40>
    12e0:	e3530000 	cmp	r3, #0
    12e4:	15930000 	ldrne	r0, [r3]
    12e8:	01a00003 	moveq	r0, r3
    12ec:	e59f3024 	ldr	r3, [pc, #36]	; 1318 <__cs3_premain+0x44>
    12f0:	e3530000 	cmp	r3, #0
    12f4:	15931000 	ldrne	r1, [r3]
    12f8:	01a01003 	moveq	r1, r3
    12fc:	e3a02000 	mov	r2, #0
    1300:	ebfffe11 	bl	b4c <main>
    1304:	e59f3010 	ldr	r3, [pc, #16]	; 131c <__cs3_premain+0x48>
    1308:	e3530000 	cmp	r3, #0
    130c:	1bffff2d 	blne	fc8 <exit>
    1310:	eafffffe 	b	1310 <__cs3_premain+0x3c>
	...
    131c:	00000fc8 	.word	0x00000fc8

00001320 <_exit>:
    1320:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1324:	e3a00018 	mov	r0, #24
    1328:	e59f1004 	ldr	r1, [pc, #4]	; 1334 <_exit+0x14>
    132c:	ef123456 	svc	0x00123456
    1330:	eafffffe 	b	1330 <_exit+0x10>
    1334:	00020026 	.word	0x00020026

00001338 <__cs3_isr_interrupt>:
    1338:	eafffffe 	b	1338 <__cs3_isr_interrupt>

0000133c <__libc_init_array>:
    133c:	e92d4070 	push	{r4, r5, r6, lr}
    1340:	e59f506c 	ldr	r5, [pc, #108]	; 13b4 <__libc_init_array+0x78>
    1344:	e59f606c 	ldr	r6, [pc, #108]	; 13b8 <__libc_init_array+0x7c>
    1348:	e0656006 	rsb	r6, r5, r6
    134c:	e1b06146 	asrs	r6, r6, #2
    1350:	12455004 	subne	r5, r5, #4
    1354:	13a04000 	movne	r4, #0
    1358:	0a000005 	beq	1374 <__libc_init_array+0x38>
    135c:	e5b53004 	ldr	r3, [r5, #4]!
    1360:	e2844001 	add	r4, r4, #1
    1364:	e1a0e00f 	mov	lr, pc
    1368:	e12fff13 	bx	r3
    136c:	e1560004 	cmp	r6, r4
    1370:	1afffff9 	bne	135c <__libc_init_array+0x20>
    1374:	e59f5040 	ldr	r5, [pc, #64]	; 13bc <__libc_init_array+0x80>
    1378:	e59f6040 	ldr	r6, [pc, #64]	; 13c0 <__libc_init_array+0x84>
    137c:	e0656006 	rsb	r6, r5, r6
    1380:	eb000014 	bl	13d8 <_init>
    1384:	e1b06146 	asrs	r6, r6, #2
    1388:	12455004 	subne	r5, r5, #4
    138c:	13a04000 	movne	r4, #0
    1390:	0a000005 	beq	13ac <__libc_init_array+0x70>
    1394:	e5b53004 	ldr	r3, [r5, #4]!
    1398:	e2844001 	add	r4, r4, #1
    139c:	e1a0e00f 	mov	lr, pc
    13a0:	e12fff13 	bx	r3
    13a4:	e1560004 	cmp	r6, r4
    13a8:	1afffff9 	bne	1394 <__libc_init_array+0x58>
    13ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    13b0:	e12fff1e 	bx	lr
    13b4:	000013f0 	.word	0x000013f0
    13b8:	000013f0 	.word	0x000013f0
    13bc:	000013f0 	.word	0x000013f0
    13c0:	000013f8 	.word	0x000013f8

Disassembly of section .rodata:

000013c8 <_global_impure_ptr-0x8>:
    13c8:	00000049 	.word	0x00000049
    13cc:	000000c7 	.word	0x000000c7

000013d0 <_global_impure_ptr>:
    13d0:	00001438 00000043                       8...C...

000013d8 <_init>:
    13d8:	e1a0c00d 	mov	r12, sp
    13dc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    13e0:	e24cb004 	sub	r11, r12, #4
    13e4:	e24bd028 	sub	sp, r11, #40	; 0x28
    13e8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    13ec:	e12fff1e 	bx	lr

000013f0 <__init_array_start>:
    13f0:	0000126c 	.word	0x0000126c

000013f4 <__frame_dummy_init_array_entry>:
    13f4:	00000208                                ....

000013f8 <__libc_fini>:
    13f8:	e1a0c00d 	mov	r12, sp
    13fc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1400:	e24cb004 	sub	r11, r12, #4
    1404:	e24bd028 	sub	sp, r11, #40	; 0x28
    1408:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    140c:	e12fff1e 	bx	lr

00001410 <__fini_array_start>:
    1410:	000001c4 	.word	0x000001c4

00001414 <__cs3_regions>:
    1414:	00000000 	.word	0x00000000
    1418:	00000040 	.word	0x00000040
    141c:	00000040 	.word	0x00000040
    1420:	00001828 	.word	0x00001828
    1424:	00000020 	.word	0x00000020
