
P:/G08_Lab1_REALDEAL/center.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
// R2 address of where the signal begins in permanent memory
// R3 sum of all the numbers of our signal
// R4 value of one of the numbers in the signal
// R5 hold the result of sum/(num_of_entries), ie the average
// compute the sum of all numbers in the signal, and store result in a register
			LDR R0, =N // load the address of where all the data for the program will be
   0:	e59f0098 	ldr	r0, [pc, #152]	; a0 <SIGNAL+0x20>
			LDR R1, [R0] // load the number of entries in R1
   4:	e5901000 	ldr	r1, [r0]
			ADD R2, R0, #4 // put the address of where the signal begins in memory in R2
   8:	e2802004 	add	r2, r0, #4
			LDR R3, [R2] // load the first entrie/number of the list in R2
   c:	e5923000 	ldr	r3, [r2]

00000010 <LOOPSUM>:
			
LOOPSUM:	SUBS R1, R1, #1 // decrement the number of entries in the signal
  10:	e2511001 	subs	r1, r1, #1
			BEQ DONESUM // if R1 = 0, we went over all the elements, go to donesum
  14:	0a000003 	beq	28 <DONESUM>
			ADD R2, R2, #4 // increment the address by 4 so that R2 is now the address of the next element in the list
  18:	e2822004 	add	r2, r2, #4
			LDR R4, [R2] // put the value at address in R2 in R4
  1c:	e5924000 	ldr	r4, [r2]
			ADD R3, R3, R4 // add R2 (number that we are at in the list) to the current sum, which is stored in R3
  20:	e0833004 	add	r3, r3, r4
			B LOOPSUM // go back to loopsum to iterate over another element of the list
  24:	eafffff9 	b	10 <LOOPSUM>

00000028 <DONESUM>:
 
DONESUM: // sum is done and is now in R3		
// divide the sum by the number of entries in the list, store the average in a register
			STR R3, [R0, #-4]
  28:	e5003004 	str	r3, [r0, #-4]
			LDR R1, [R0] // load the number of entries in R1 again
  2c:	e5901000 	ldr	r1, [r0]

00000030 <LOOPDIV>:
			// now R3 will be where the average will be
LOOPDIV: // loop that divides the sum by two at each iteration
			ASR R3, R3, #1 // divide the sum by two  
  30:	e1a030c3 	asr	r3, r3, #1
			ASR R1, R1, #1 // divide by two numbers of entry
  34:	e1a010c1 	asr	r1, r1, #1
			CMP R1, #1 // compare R1 with 1
  38:	e3510001 	cmp	r1, #1
			BLE DONEDIV // if R1 is less or equal to one then we divided enough time and we go to donediv
  3c:	da000000 	ble	44 <DONEDIV>
			B LOOPDIV // go back to LOOPDIV so that we can divide once more
  40:	eafffffa 	b	30 <LOOPDIV>

00000044 <DONEDIV>:
			
DONEDIV: // we divided the sum by the number of entries and so average is in R3
// substract the average from each entries in the list and overwrite it in permanent memory
			STR R3, [R0, #-8]
  44:	e5003008 	str	r3, [r0, #-8]
			LDR R1, [R0] // load the number of entries in R1 again
  48:	e5901000 	ldr	r1, [r0]
			ADD R2, R0, #4 // put the address of where the signal begins in memory in R2
  4c:	e2802004 	add	r2, r0, #4
			LDR R4, [R0, #4] // load the first entrie of the list in R4
  50:	e5904004 	ldr	r4, [r0, #4]
			SUBS R4, R4, R3 // substract the average from the first value in the signal
  54:	e0544003 	subs	r4, r4, r3
			STR R4, [R2] // load the now centered value back in permanent memory
  58:	e5824000 	str	r4, [r2]

0000005c <LOOPSUB>:
			
LOOPSUB:	SUBS R1, R1, #1 // decrement the number of entries in the signal
  5c:	e2511001 	subs	r1, r1, #1
			BEQ DONESUB // if R1 = 0, we went over all the elements, go to donesum
  60:	0a000004 	beq	78 <DONESUB>
			ADD R2, R2, #4 // increment the address by 4 so that R2 is now the address of the next element in the list
  64:	e2822004 	add	r2, r2, #4
			LDR R4, [R2] // put the value at address in R2 in R4			
  68:	e5924000 	ldr	r4, [r2]
			SUBS R4, R4, R3 // substract the average from the first value in the signal
  6c:	e0544003 	subs	r4, r4, r3
			STR R4, [R2] // load the now centered value back in permanent memory			
  70:	e5824000 	str	r4, [r2]
			B LOOPSUB // do the same operation on the next number so go back to LOOPSUB
  74:	eafffff8 	b	5c <LOOPSUB>

00000078 <DONESUB>:
DONESUB:

END:		B END					//infinite loop!
  78:	eafffffe 	b	78 <DONESUB>

0000007c <N>:
  7c:	00000008 	.word	0x00000008

00000080 <SIGNAL>:
  80:	00000007 	.word	0x00000007
  84:	00000008 	.word	0x00000008
  88:	0000000c 	.word	0x0000000c
  8c:	0000002c 	.word	0x0000002c
  90:	0000007b 	.word	0x0000007b
  94:	000003e8 	.word	0x000003e8
  98:	00000037 	.word	0x00000037
  9c:	0000005b 	.word	0x0000005b
  a0:	0000007c 	.word	0x0000007c
