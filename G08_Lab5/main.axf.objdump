
P:/G08_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	d8 17 00 00 e4 17 00 00 f0 17 00 00 fc 17 00 00     ................
  30:	08 18 00 00 a4 27 00 00 80 16 00 00 14 18 00 00     .....'..........

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000999 	bl	2740 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000288c 	.word	0x0000288c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031b10 	.word	0x00031b10

00000124 <__cs3_heap_start_ptr>:
     124:	00031b58 	.word	0x00031b58

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031b18 	.word	0x00031b18
     170:	00031b1b 	.word	0x00031b1b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031b18 	.word	0x00031b18
     1bc:	00031b18 	.word	0x00031b18
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031b18 	.word	0x00031b18
     200:	00000000 	.word	0x00000000
     204:	00002830 	.word	0x00002830

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002830 	.word	0x00002830
     250:	00031b1c 	.word	0x00031b1c
     254:	00002890 	.word	0x00002890
     258:	00000000 	.word	0x00000000

0000025c <drawWelcome>:
double frequencies[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};

fitParameter = 505000;

// Write names at the top of the screen
void drawWelcome(){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
	//Screen is 79 x 59 in pixel dimensions
	VGA_write_char_ASM(0, 0, 'R');
     264:	e3a00000 	mov	r0, #0
     268:	e3a01000 	mov	r1, #0
     26c:	e3a02052 	mov	r2, #82	; 0x52
     270:	eb000453 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(1, 0, 'e');
     274:	e3a00001 	mov	r0, #1
     278:	e3a01000 	mov	r1, #0
     27c:	e3a02065 	mov	r2, #101	; 0x65
     280:	eb00044f 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(2, 0, 'n');
     284:	e3a00002 	mov	r0, #2
     288:	e3a01000 	mov	r1, #0
     28c:	e3a0206e 	mov	r2, #110	; 0x6e
     290:	eb00044b 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(3, 0, 'e');
     294:	e3a00003 	mov	r0, #3
     298:	e3a01000 	mov	r1, #0
     29c:	e3a02065 	mov	r2, #101	; 0x65
     2a0:	eb000447 	bl	13c4 <VGA_write_char_ASM>

	VGA_write_char_ASM(5, 0, 'R');
     2a4:	e3a00005 	mov	r0, #5
     2a8:	e3a01000 	mov	r1, #0
     2ac:	e3a02052 	mov	r2, #82	; 0x52
     2b0:	eb000443 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(6, 0, 'e');
     2b4:	e3a00006 	mov	r0, #6
     2b8:	e3a01000 	mov	r1, #0
     2bc:	e3a02065 	mov	r2, #101	; 0x65
     2c0:	eb00043f 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(7, 0, 'b');
     2c4:	e3a00007 	mov	r0, #7
     2c8:	e3a01000 	mov	r1, #0
     2cc:	e3a02062 	mov	r2, #98	; 0x62
     2d0:	eb00043b 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(8, 0, 'e');
     2d4:	e3a00008 	mov	r0, #8
     2d8:	e3a01000 	mov	r1, #0
     2dc:	e3a02065 	mov	r2, #101	; 0x65
     2e0:	eb000437 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(9, 0, 'c');
     2e4:	e3a00009 	mov	r0, #9
     2e8:	e3a01000 	mov	r1, #0
     2ec:	e3a02063 	mov	r2, #99	; 0x63
     2f0:	eb000433 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(10, 0, 'c');
     2f4:	e3a0000a 	mov	r0, #10
     2f8:	e3a01000 	mov	r1, #0
     2fc:	e3a02063 	mov	r2, #99	; 0x63
     300:	eb00042f 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(11, 0, 'a');
     304:	e3a0000b 	mov	r0, #11
     308:	e3a01000 	mov	r1, #0
     30c:	e3a02061 	mov	r2, #97	; 0x61
     310:	eb00042b 	bl	13c4 <VGA_write_char_ASM>

	VGA_write_char_ASM(13, 0, 'M');
     314:	e3a0000d 	mov	r0, #13
     318:	e3a01000 	mov	r1, #0
     31c:	e3a0204d 	mov	r2, #77	; 0x4d
     320:	eb000427 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(14, 0, 'a');
     324:	e3a0000e 	mov	r0, #14
     328:	e3a01000 	mov	r1, #0
     32c:	e3a02061 	mov	r2, #97	; 0x61
     330:	eb000423 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(15, 0, 't');
     334:	e3a0000f 	mov	r0, #15
     338:	e3a01000 	mov	r1, #0
     33c:	e3a02074 	mov	r2, #116	; 0x74
     340:	eb00041f 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(16, 0, 't');
     344:	e3a00010 	mov	r0, #16
     348:	e3a01000 	mov	r1, #0
     34c:	e3a02074 	mov	r2, #116	; 0x74
     350:	eb00041b 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(17, 0, 'h');
     354:	e3a00011 	mov	r0, #17
     358:	e3a01000 	mov	r1, #0
     35c:	e3a02068 	mov	r2, #104	; 0x68
     360:	eb000417 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(18, 0, 'e');
     364:	e3a00012 	mov	r0, #18
     368:	e3a01000 	mov	r1, #0
     36c:	e3a02065 	mov	r2, #101	; 0x65
     370:	eb000413 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(19, 0, 'w');
     374:	e3a00013 	mov	r0, #19
     378:	e3a01000 	mov	r1, #0
     37c:	e3a02077 	mov	r2, #119	; 0x77
     380:	eb00040f 	bl	13c4 <VGA_write_char_ASM>

}
     384:	e8bd8800 	pop	{r11, pc}

00000388 <drawWords>:

void drawWords(){
     388:	e92d4800 	push	{r11, lr}
     38c:	e28db004 	add	r11, sp, #4
     390:	e24dd008 	sub	sp, sp, #8
	int i = 0;
     394:	e3a03000 	mov	r3, #0
     398:	e50b3008 	str	r3, [r11, #-8]
	VGA_write_char_ASM(70, 59, 'V');
     39c:	e3a00046 	mov	r0, #70	; 0x46
     3a0:	e3a0103b 	mov	r1, #59	; 0x3b
     3a4:	e3a02056 	mov	r2, #86	; 0x56
     3a8:	eb000405 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(71, 59, 'o');
     3ac:	e3a00047 	mov	r0, #71	; 0x47
     3b0:	e3a0103b 	mov	r1, #59	; 0x3b
     3b4:	e3a0206f 	mov	r2, #111	; 0x6f
     3b8:	eb000401 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(72, 59, 'l');
     3bc:	e3a00048 	mov	r0, #72	; 0x48
     3c0:	e3a0103b 	mov	r1, #59	; 0x3b
     3c4:	e3a0206c 	mov	r2, #108	; 0x6c
     3c8:	eb0003fd 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(73, 59, 'u');
     3cc:	e3a00049 	mov	r0, #73	; 0x49
     3d0:	e3a0103b 	mov	r1, #59	; 0x3b
     3d4:	e3a02075 	mov	r2, #117	; 0x75
     3d8:	eb0003f9 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(74, 59, 'm');
     3dc:	e3a0004a 	mov	r0, #74	; 0x4a
     3e0:	e3a0103b 	mov	r1, #59	; 0x3b
     3e4:	e3a0206d 	mov	r2, #109	; 0x6d
     3e8:	eb0003f5 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(75, 59, 'e');
     3ec:	e3a0004b 	mov	r0, #75	; 0x4b
     3f0:	e3a0103b 	mov	r1, #59	; 0x3b
     3f4:	e3a02065 	mov	r2, #101	; 0x65
     3f8:	eb0003f1 	bl	13c4 <VGA_write_char_ASM>
	VGA_write_char_ASM(76, 59, ':');
     3fc:	e3a0004c 	mov	r0, #76	; 0x4c
     400:	e3a0103b 	mov	r1, #59	; 0x3b
     404:	e3a0203a 	mov	r2, #58	; 0x3a
     408:	eb0003ed 	bl	13c4 <VGA_write_char_ASM>
}
     40c:	e24bd004 	sub	sp, r11, #4
     410:	e8bd8800 	pop	{r11, pc}

00000414 <computeSignalSimple>:


// method that returns the corresponding sine value for a particular frequency and time
double computeSignalSimple(double *freqToPlay, int t){
     414:	e92d4800 	push	{r11, lr}
     418:	e28db004 	add	r11, sp, #4
     41c:	e24dd020 	sub	sp, sp, #32
     420:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
     424:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
	int i;
	double signalSum = 0;
     428:	e3a02000 	mov	r2, #0
     42c:	e3a03000 	mov	r3, #0
     430:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

	for(i=0; i<8; i++){
     434:	e3a03000 	mov	r3, #0
     438:	e50b3008 	str	r3, [r11, #-8]
     43c:	ea000031 	b	508 <computeSignalSimple+0xf4>
		if(freqToPlay[i]){
     440:	e51b3008 	ldr	r3, [r11, #-8]
     444:	e1a03183 	lsl	r3, r3, #3
     448:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     44c:	e0823003 	add	r3, r2, r3
     450:	e1c320d0 	ldrd	r2, [r3]
     454:	e1a00002 	mov	r0, r2
     458:	e1a01003 	mov	r1, r3
     45c:	e3a02000 	mov	r2, #0
     460:	e3a03000 	mov	r3, #0
     464:	eb000768 	bl	220c <__aeabi_dcmpeq>
     468:	e1a03000 	mov	r3, r0
     46c:	e3530000 	cmp	r3, #0
     470:	1a000021 	bne	4fc <computeSignalSimple+0xe8>
			int index = ((((int) freqToPlay[i])*t)%48000);
     474:	e51b3008 	ldr	r3, [r11, #-8]
     478:	e1a03183 	lsl	r3, r3, #3
     47c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     480:	e0823003 	add	r3, r2, r3
     484:	e1c320d0 	ldrd	r2, [r3]
     488:	e1a00002 	mov	r0, r2
     48c:	e1a01003 	mov	r1, r3
     490:	eb00077b 	bl	2284 <__aeabi_d2iz>
     494:	e1a03000 	mov	r3, r0
     498:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     49c:	e0030392 	mul	r3, r2, r3
     4a0:	e30129f1 	movw	r2, #6641	; 0x19f1
     4a4:	e3402576 	movt	r2, #1398	; 0x576
     4a8:	e0c21392 	smull	r1, r2, r2, r3
     4ac:	e1a01542 	asr	r1, r2, #10
     4b0:	e1a02fc3 	asr	r2, r3, #31
     4b4:	e0622001 	rsb	r2, r2, r1
     4b8:	e30b1b80 	movw	r1, #48000	; 0xbb80
     4bc:	e0020291 	mul	r2, r1, r2
     4c0:	e0623003 	rsb	r3, r2, r3
     4c4:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			signalSum += sine[index];
     4c8:	e30238e0 	movw	r3, #10464	; 0x28e0
     4cc:	e3403000 	movt	r3, #0
     4d0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     4d4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     4d8:	e1a00003 	mov	r0, r3
     4dc:	eb0005b9 	bl	1bc8 <__aeabi_i2d>
     4e0:	e1a02000 	mov	r2, r0
     4e4:	e1a03001 	mov	r3, r1
     4e8:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     4ec:	eb0004e8 	bl	1894 <__adddf3>
     4f0:	e1a02000 	mov	r2, r0
     4f4:	e1a03001 	mov	r3, r1
     4f8:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
// method that returns the corresponding sine value for a particular frequency and time
double computeSignalSimple(double *freqToPlay, int t){
	int i;
	double signalSum = 0;

	for(i=0; i<8; i++){
     4fc:	e51b3008 	ldr	r3, [r11, #-8]
     500:	e2833001 	add	r3, r3, #1
     504:	e50b3008 	str	r3, [r11, #-8]
     508:	e51b3008 	ldr	r3, [r11, #-8]
     50c:	e3530007 	cmp	r3, #7
     510:	daffffca 	ble	440 <computeSignalSimple+0x2c>
		if(freqToPlay[i]){
			int index = ((((int) freqToPlay[i])*t)%48000);
			signalSum += sine[index];
		}
	}
	return signalSum;
     514:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec

}
     518:	e1a00002 	mov	r0, r2
     51c:	e1a01003 	mov	r1, r3
     520:	e24bd004 	sub	sp, r11, #4
     524:	e8bd8800 	pop	{r11, pc}

00000528 <main>:


int main() {
     528:	e92d4830 	push	{r4, r5, r11, lr}
     52c:	e28db00c 	add	r11, sp, #12
     530:	e24ddea9 	sub	sp, sp, #2704	; 0xa90
	
	char data = 0;
     534:	e3a03000 	mov	r3, #0
     538:	e54b3041 	strb	r3, [r11, #-65]	; 0xffffffbf
	int vol = 0;
     53c:	e3a03000 	mov	r3, #0
     540:	e50b3010 	str	r3, [r11, #-16]
	double freqToPlay[8] = {0,0,0,0,0,0,0,0};
     544:	e3a02000 	mov	r2, #0
     548:	e3a03000 	mov	r3, #0
     54c:	e14b28f4 	strd	r2, [r11, #-132]	; 0xffffff7c
     550:	e3a02000 	mov	r2, #0
     554:	e3a03000 	mov	r3, #0
     558:	e14b27fc 	strd	r2, [r11, #-124]	; 0xffffff84
     55c:	e3a02000 	mov	r2, #0
     560:	e3a03000 	mov	r3, #0
     564:	e14b27f4 	strd	r2, [r11, #-116]	; 0xffffff8c
     568:	e3a02000 	mov	r2, #0
     56c:	e3a03000 	mov	r3, #0
     570:	e14b26fc 	strd	r2, [r11, #-108]	; 0xffffff94
     574:	e3a02000 	mov	r2, #0
     578:	e3a03000 	mov	r3, #0
     57c:	e14b26f4 	strd	r2, [r11, #-100]	; 0xffffff9c
     580:	e3a02000 	mov	r2, #0
     584:	e3a03000 	mov	r3, #0
     588:	e14b25fc 	strd	r2, [r11, #-92]	; 0xffffffa4
     58c:	e3a02000 	mov	r2, #0
     590:	e3a03000 	mov	r3, #0
     594:	e14b25f4 	strd	r2, [r11, #-84]	; 0xffffffac
     598:	e3a02000 	mov	r2, #0
     59c:	e3a03000 	mov	r3, #0
     5a0:	e14b24fc 	strd	r2, [r11, #-76]	; 0xffffffb4
	int keyReleasedFlag = 0;
     5a4:	e3a03000 	mov	r3, #0
     5a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int t = 0;
     5ac:	e3a03000 	mov	r3, #0
     5b0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	double totalSignal;
	int i;
	// setup interruptions
	int_setup(2, (int []){199});
     5b4:	e3a030c7 	mov	r3, #199	; 0xc7
     5b8:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
     5bc:	e24b3040 	sub	r3, r11, #64	; 0x40
     5c0:	e3a00002 	mov	r0, #2
     5c4:	e1a01003 	mov	r1, r3
     5c8:	eb0004a0 	bl	1850 <int_setup>

	//create timer structure
	HPS_TIM_config_t hps_tim;

	// construct the timer struct for 10ms timer
	hps_tim.tim = TIM0; // use only one timer
     5cc:	e3a03001 	mov	r3, #1
     5d0:	e54b309c 	strb	r3, [r11, #-156]	; 0xffffff64
	hps_tim.timeout = 20; // 1/48000 = 20.8 us
     5d4:	e3a03014 	mov	r3, #20
     5d8:	e50b3098 	str	r3, [r11, #-152]	; 0xffffff68
	hps_tim.LD_en = 1; // 1 means we want to enable loading the timer
     5dc:	e3a03001 	mov	r3, #1
     5e0:	e50b3094 	str	r3, [r11, #-148]	; 0xffffff6c
	hps_tim.INT_en = 1; // 1 means we want to enable the timer to generate interruptions
     5e4:	e3a03001 	mov	r3, #1
     5e8:	e50b3090 	str	r3, [r11, #-144]	; 0xffffff70
	hps_tim.enable = 1; // means if we want to enable the timer
     5ec:	e3a03001 	mov	r3, #1
     5f0:	e50b308c 	str	r3, [r11, #-140]	; 0xffffff74

	// configure the hardware timer for 10ms timer
	HPS_TIM_config_ASM(&hps_tim);
     5f4:	e24b309c 	sub	r3, r11, #156	; 0x9c
     5f8:	e1a00003 	mov	r0, r3
     5fc:	eb0001be 	bl	cfc <HPS_TIM_config_ASM>
	
	// clear screen and display info
	VGA_clear_charbuff_ASM();
     600:	eb00034f 	bl	1344 <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
     604:	eb00035e 	bl	1384 <VGA_clear_pixelbuff_ASM>
	drawWelcome();
     608:	ebffff13 	bl	25c <drawWelcome>
	drawWords();
     60c:	ebffff5d 	bl	388 <drawWords>

	double history[320] = { 0 };
     610:	e24b2ea9 	sub	r2, r11, #2704	; 0xa90
     614:	e242200c 	sub	r2, r2, #12
     618:	e3a03c0a 	mov	r3, #2560	; 0xa00
     61c:	e1a00002 	mov	r0, r2
     620:	e3a01000 	mov	r1, #0
     624:	e1a02003 	mov	r2, r3
     628:	eb000741 	bl	2334 <memset>
     62c:	ea000000 	b	634 <main+0x10c>
		// reset time
		if(t==48000){
			t=0;
		}
		
	}
     630:	e1a00000 	nop			; (mov r0, r0)

	while(1) {
		
		//read keyboard 

		char *datapointer = &data;
     634:	e24b3041 	sub	r3, r11, #65	; 0x41
     638:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

		if(read_ps2_data_ASM(datapointer)){
     63c:	e51b0020 	ldr	r0, [r11, #-32]	; 0xffffffe0
     640:	eb0002c2 	bl	1150 <read_ps2_data_ASM>
     644:	e1a03000 	mov	r3, r0
     648:	e3530000 	cmp	r3, #0
     64c:	0a0000b9 	beq	938 <ICDIPTR+0x138>
		switch(data){
     650:	e55b3041 	ldrb	r3, [r11, #-65]	; 0xffffffbf
     654:	e3530042 	cmp	r3, #66	; 0x42
     658:	0a000068 	beq	800 <ICDIPTR>
     65c:	e3530042 	cmp	r3, #66	; 0x42
     660:	ca00000d 	bgt	69c <main+0x174>
     664:	e3530023 	cmp	r3, #35	; 0x23
     668:	0a000037 	beq	74c <main+0x224>
     66c:	e3530023 	cmp	r3, #35	; 0x23
     670:	ca000004 	bgt	688 <main+0x160>
     674:	e353001b 	cmp	r3, #27
     678:	0a000024 	beq	710 <main+0x1e8>
     67c:	e353001c 	cmp	r3, #28
     680:	0a000013 	beq	6d4 <main+0x1ac>
     684:	ea0000a5 	b	920 <ICDIPTR+0x120>
     688:	e353002b 	cmp	r3, #43	; 0x2b
     68c:	0a00003d 	beq	788 <main+0x260>
     690:	e353003b 	cmp	r3, #59	; 0x3b
     694:	0a00004a 	beq	7c4 <main+0x29c>
     698:	ea0000a0 	b	920 <ICDIPTR+0x120>
     69c:	e353004e 	cmp	r3, #78	; 0x4e
     6a0:	0a000092 	beq	8f0 <ICDIPTR+0xf0>
     6a4:	e353004e 	cmp	r3, #78	; 0x4e
     6a8:	ca000004 	bgt	6c0 <main+0x198>
     6ac:	e353004b 	cmp	r3, #75	; 0x4b
     6b0:	0a000061 	beq	83c <ICDIPTR+0x3c>
     6b4:	e353004c 	cmp	r3, #76	; 0x4c
     6b8:	0a00006e 	beq	878 <ICDIPTR+0x78>
     6bc:	ea000097 	b	920 <ICDIPTR+0x120>
     6c0:	e3530055 	cmp	r3, #85	; 0x55
     6c4:	0a00007d 	beq	8c0 <ICDIPTR+0xc0>
     6c8:	e35300f0 	cmp	r3, #240	; 0xf0
     6cc:	0a000078 	beq	8b4 <ICDIPTR+0xb4>
     6d0:	ea000092 	b	920 <ICDIPTR+0x120>
			case 0x1C: //A has been pressed
				// if a key was previously released, ie keyreleasedflag is 1
				// we now know it was the 'a' key that was released
				// and we set the associated bit with the 'a' key to 0 in the keypressed array
				// also reset the keypressed flag to 0 since we aknowledge the released key
				if(keyReleasedFlag == 1){
     6d4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     6d8:	e3530001 	cmp	r3, #1
     6dc:	1a000006 	bne	6fc <main+0x1d4>
					keysPressed[0] = 0;
     6e0:	e3013b34 	movw	r3, #6964	; 0x1b34
     6e4:	e3403003 	movt	r3, #3
     6e8:	e3a02000 	mov	r2, #0
     6ec:	e5832000 	str	r2, [r3]
					keyReleasedFlag = 0;
     6f0:	e3a03000 	mov	r3, #0
     6f4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{// 'a' key has been pressed/is currently being pressed so set its associated bit to 1
					keysPressed[0] = 1;
				}
				break;
     6f8:	ea00008e 	b	938 <ICDIPTR+0x138>
				// also reset the keypressed flag to 0 since we aknowledge the released key
				if(keyReleasedFlag == 1){
					keysPressed[0] = 0;
					keyReleasedFlag = 0;
				}else{// 'a' key has been pressed/is currently being pressed so set its associated bit to 1
					keysPressed[0] = 1;
     6fc:	e3013b34 	movw	r3, #6964	; 0x1b34
     700:	e3403003 	movt	r3, #3
     704:	e3a02001 	mov	r2, #1
     708:	e5832000 	str	r2, [r3]
				}
				break;
     70c:	ea000089 	b	938 <ICDIPTR+0x138>
			case 0x1B: //S has been pressed
				if(keyReleasedFlag == 1){
     710:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     714:	e3530001 	cmp	r3, #1
     718:	1a000006 	bne	738 <main+0x210>
					keysPressed[1] = 0;
     71c:	e3013b34 	movw	r3, #6964	; 0x1b34
     720:	e3403003 	movt	r3, #3
     724:	e3a02000 	mov	r2, #0
     728:	e5832004 	str	r2, [r3, #4]
					keyReleasedFlag = 0;
     72c:	e3a03000 	mov	r3, #0
     730:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{
					keysPressed[1] = 1;
				}
				break;
     734:	ea00007f 	b	938 <ICDIPTR+0x138>
			case 0x1B: //S has been pressed
				if(keyReleasedFlag == 1){
					keysPressed[1] = 0;
					keyReleasedFlag = 0;
				}else{
					keysPressed[1] = 1;
     738:	e3013b34 	movw	r3, #6964	; 0x1b34
     73c:	e3403003 	movt	r3, #3
     740:	e3a02001 	mov	r2, #1
     744:	e5832004 	str	r2, [r3, #4]
				}
				break;
     748:	ea00007a 	b	938 <ICDIPTR+0x138>
			case 0x23: //D
				if(keyReleasedFlag == 1){
     74c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     750:	e3530001 	cmp	r3, #1
     754:	1a000006 	bne	774 <main+0x24c>
					keysPressed[2] = 0;
     758:	e3013b34 	movw	r3, #6964	; 0x1b34
     75c:	e3403003 	movt	r3, #3
     760:	e3a02000 	mov	r2, #0
     764:	e5832008 	str	r2, [r3, #8]
					keyReleasedFlag = 0;
     768:	e3a03000 	mov	r3, #0
     76c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{
					keysPressed[2] = 1;
				}
				break;	
     770:	ea000070 	b	938 <ICDIPTR+0x138>
			case 0x23: //D
				if(keyReleasedFlag == 1){
					keysPressed[2] = 0;
					keyReleasedFlag = 0;
				}else{
					keysPressed[2] = 1;
     774:	e3013b34 	movw	r3, #6964	; 0x1b34
     778:	e3403003 	movt	r3, #3
     77c:	e3a02001 	mov	r2, #1
     780:	e5832008 	str	r2, [r3, #8]
				}
				break;	
     784:	ea00006b 	b	938 <ICDIPTR+0x138>
			case 0x2B: //F
				if(keyReleasedFlag == 1){
     788:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     78c:	e3530001 	cmp	r3, #1
     790:	1a000006 	bne	7b0 <main+0x288>
					keysPressed[3] = 0;
     794:	e3013b34 	movw	r3, #6964	; 0x1b34
     798:	e3403003 	movt	r3, #3
     79c:	e3a02000 	mov	r2, #0
     7a0:	e583200c 	str	r2, [r3, #12]
					keyReleasedFlag = 0;
     7a4:	e3a03000 	mov	r3, #0
     7a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{
					keysPressed[3] = 1;
				}
				break;
     7ac:	ea000061 	b	938 <ICDIPTR+0x138>
			case 0x2B: //F
				if(keyReleasedFlag == 1){
					keysPressed[3] = 0;
					keyReleasedFlag = 0;
				}else{
					keysPressed[3] = 1;
     7b0:	e3013b34 	movw	r3, #6964	; 0x1b34
     7b4:	e3403003 	movt	r3, #3
     7b8:	e3a02001 	mov	r2, #1
     7bc:	e583200c 	str	r2, [r3, #12]
				}
				break;
     7c0:	ea00005c 	b	938 <ICDIPTR+0x138>
			case 0x3B: //J
				if(keyReleasedFlag == 1){
     7c4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     7c8:	e3530001 	cmp	r3, #1
     7cc:	1a000006 	bne	7ec <main+0x2c4>
					keysPressed[4] = 0;
     7d0:	e3013b34 	movw	r3, #6964	; 0x1b34
     7d4:	e3403003 	movt	r3, #3
     7d8:	e3a02000 	mov	r2, #0
     7dc:	e5832010 	str	r2, [r3, #16]
					keyReleasedFlag = 0;
     7e0:	e3a03000 	mov	r3, #0
     7e4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{
					keysPressed[4] = 1;
				}
				break;
     7e8:	ea000052 	b	938 <ICDIPTR+0x138>
			case 0x3B: //J
				if(keyReleasedFlag == 1){
					keysPressed[4] = 0;
					keyReleasedFlag = 0;
				}else{
					keysPressed[4] = 1;
     7ec:	e3013b34 	movw	r3, #6964	; 0x1b34
     7f0:	e3403003 	movt	r3, #3
     7f4:	e3a02001 	mov	r2, #1
     7f8:	e5832010 	str	r2, [r3, #16]
				}
				break;
     7fc:	ea00004d 	b	938 <ICDIPTR+0x138>
			case 0x42: //K
				if(keyReleasedFlag == 1){
     800:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     804:	e3530001 	cmp	r3, #1
     808:	1a000006 	bne	828 <ICDIPTR+0x28>
					keysPressed[5] = 0;
     80c:	e3013b34 	movw	r3, #6964	; 0x1b34
     810:	e3403003 	movt	r3, #3
     814:	e3a02000 	mov	r2, #0
     818:	e5832014 	str	r2, [r3, #20]
					keyReleasedFlag = 0;
     81c:	e3a03000 	mov	r3, #0
     820:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{
					keysPressed[5] = 1;
				}
				break;
     824:	ea000043 	b	938 <ICDIPTR+0x138>
			case 0x42: //K
				if(keyReleasedFlag == 1){
					keysPressed[5] = 0;
					keyReleasedFlag = 0;
				}else{
					keysPressed[5] = 1;
     828:	e3013b34 	movw	r3, #6964	; 0x1b34
     82c:	e3403003 	movt	r3, #3
     830:	e3a02001 	mov	r2, #1
     834:	e5832014 	str	r2, [r3, #20]
				}
				break;
     838:	ea00003e 	b	938 <ICDIPTR+0x138>
			case 0x4B: //L
				if(keyReleasedFlag == 1){
     83c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     840:	e3530001 	cmp	r3, #1
     844:	1a000006 	bne	864 <ICDIPTR+0x64>
					keysPressed[6] = 0;
     848:	e3013b34 	movw	r3, #6964	; 0x1b34
     84c:	e3403003 	movt	r3, #3
     850:	e3a02000 	mov	r2, #0
     854:	e5832018 	str	r2, [r3, #24]
					keyReleasedFlag = 0;
     858:	e3a03000 	mov	r3, #0
     85c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{
					keysPressed[6] = 1;
				}
				break;
     860:	ea000034 	b	938 <ICDIPTR+0x138>
			case 0x4B: //L
				if(keyReleasedFlag == 1){
					keysPressed[6] = 0;
					keyReleasedFlag = 0;
				}else{
					keysPressed[6] = 1;
     864:	e3013b34 	movw	r3, #6964	; 0x1b34
     868:	e3403003 	movt	r3, #3
     86c:	e3a02001 	mov	r2, #1
     870:	e5832018 	str	r2, [r3, #24]
				}
				break;
     874:	ea00002f 	b	938 <ICDIPTR+0x138>
			case 0x4C: //;
				if(keyReleasedFlag == 1){
     878:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     87c:	e3530001 	cmp	r3, #1
     880:	1a000006 	bne	8a0 <ICDIPTR+0xa0>
					keysPressed[7] = 0;
     884:	e3013b34 	movw	r3, #6964	; 0x1b34
     888:	e3403003 	movt	r3, #3
     88c:	e3a02000 	mov	r2, #0
     890:	e583201c 	str	r2, [r3, #28]
					keyReleasedFlag = 0;
     894:	e3a03000 	mov	r3, #0
     898:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}else{
					keysPressed[7] = 1;
				}
				break;
     89c:	ea000025 	b	938 <ICDIPTR+0x138>
			case 0x4C: //;
				if(keyReleasedFlag == 1){
					keysPressed[7] = 0;
					keyReleasedFlag = 0;
				}else{
					keysPressed[7] = 1;
     8a0:	e3013b34 	movw	r3, #6964	; 0x1b34
     8a4:	e3403003 	movt	r3, #3
     8a8:	e3a02001 	mov	r2, #1
     8ac:	e583201c 	str	r2, [r3, #28]
				}
				break;
     8b0:	ea000020 	b	938 <ICDIPTR+0x138>
			case 0xF0: //break code, ie a key has been released
				keyReleasedFlag = 1;
     8b4:	e3a03001 	mov	r3, #1
     8b8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				break;
     8bc:	ea00001d 	b	938 <ICDIPTR+0x138>
			case 0x55: //increase vol
				if(keyReleasedFlag == 1){
     8c0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     8c4:	e3530001 	cmp	r3, #1
     8c8:	1a000017 	bne	92c <ICDIPTR+0x12c>
					if(vol<10){
     8cc:	e51b3010 	ldr	r3, [r11, #-16]
     8d0:	e3530009 	cmp	r3, #9
     8d4:	ca000002 	bgt	8e4 <ICDIPTR+0xe4>
						vol++;
     8d8:	e51b3010 	ldr	r3, [r11, #-16]
     8dc:	e2833001 	add	r3, r3, #1
     8e0:	e50b3010 	str	r3, [r11, #-16]
					}
					keyReleasedFlag = 0;
     8e4:	e3a03000 	mov	r3, #0
     8e8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}
				break;
     8ec:	ea00000e 	b	92c <ICDIPTR+0x12c>
			case 0x4E: //decrease vol
				if(keyReleasedFlag == 1){
     8f0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     8f4:	e3530001 	cmp	r3, #1
     8f8:	1a00000d 	bne	934 <ICDIPTR+0x134>
					if(vol>0){
     8fc:	e51b3010 	ldr	r3, [r11, #-16]
     900:	e3530000 	cmp	r3, #0
     904:	da000002 	ble	914 <ICDIPTR+0x114>
						vol--;
     908:	e51b3010 	ldr	r3, [r11, #-16]
     90c:	e2433001 	sub	r3, r3, #1
     910:	e50b3010 	str	r3, [r11, #-16]
					}
					keyReleasedFlag = 0;
     914:	e3a03000 	mov	r3, #0
     918:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}
				break;
     91c:	ea000004 	b	934 <ICDIPTR+0x134>
			
			default:
				keyReleasedFlag = 0;
     920:	e3a03000 	mov	r3, #0
     924:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     928:	ea000002 	b	938 <ICDIPTR+0x138>
					if(vol<10){
						vol++;
					}
					keyReleasedFlag = 0;
				}
				break;
     92c:	e1a00000 	nop			; (mov r0, r0)
     930:	ea000000 	b	938 <ICDIPTR+0x138>
					if(vol>0){
						vol--;
					}
					keyReleasedFlag = 0;
				}
				break;
     934:	e1a00000 	nop			; (mov r0, r0)
				keyReleasedFlag = 0;
			
		}
		}
		// clear freq to play array
		for(i=0;i<8;i++){
     938:	e3a03000 	mov	r3, #0
     93c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     940:	ea00000b 	b	974 <ICDIPTR+0x174>
			freqToPlay[i] = 0;
     944:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     948:	e3e03077 	mvn	r3, #119	; 0x77
     94c:	e1a02182 	lsl	r2, r2, #3
     950:	e24b100c 	sub	r1, r11, #12
     954:	e0812002 	add	r2, r1, r2
     958:	e0821003 	add	r1, r2, r3
     95c:	e3a02000 	mov	r2, #0
     960:	e3a03000 	mov	r3, #0
     964:	e1c120f0 	strd	r2, [r1]
				keyReleasedFlag = 0;
			
		}
		}
		// clear freq to play array
		for(i=0;i<8;i++){
     968:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     96c:	e2833001 	add	r3, r3, #1
     970:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     974:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     978:	e3530007 	cmp	r3, #7
     97c:	dafffff0 	ble	944 <ICDIPTR+0x144>
			freqToPlay[i] = 0;
		}
		
		// add the frequencies to be played
		for(i=0;i<8;i++){
     980:	e3a03000 	mov	r3, #0
     984:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     988:	ea000015 	b	9e4 <ICDIPTR+0x1e4>
			if(keysPressed[i]){//if a key is pressed
     98c:	e3013b34 	movw	r3, #6964	; 0x1b34
     990:	e3403003 	movt	r3, #3
     994:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     998:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     99c:	e3530000 	cmp	r3, #0
     9a0:	0a00000c 	beq	9d8 <ICDIPTR+0x1d8>
				freqToPlay[i] = frequencies[i];// add that frequencies to the array of freq to play
     9a4:	e3023898 	movw	r3, #10392	; 0x2898
     9a8:	e3403000 	movt	r3, #0
     9ac:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     9b0:	e1a02182 	lsl	r2, r2, #3
     9b4:	e0833002 	add	r3, r3, r2
     9b8:	e1c320d0 	ldrd	r2, [r3]
     9bc:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     9c0:	e3e01077 	mvn	r1, #119	; 0x77
     9c4:	e1a00180 	lsl	r0, r0, #3
     9c8:	e24bc00c 	sub	r12, r11, #12
     9cc:	e08c0000 	add	r0, r12, r0
     9d0:	e0801001 	add	r1, r0, r1
     9d4:	e1c120f0 	strd	r2, [r1]
		for(i=0;i<8;i++){
			freqToPlay[i] = 0;
		}
		
		// add the frequencies to be played
		for(i=0;i<8;i++){
     9d8:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     9dc:	e2833001 	add	r3, r3, #1
     9e0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
     9e4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     9e8:	e3530007 	cmp	r3, #7
     9ec:	daffffe6 	ble	98c <ICDIPTR+0x18c>
				freqToPlay[i] = frequencies[i];// add that frequencies to the array of freq to play
			}
		
		}
		// construct the signal
		totalSignal = vol*computeSignalSimple(freqToPlay,t);
     9f0:	e51b0010 	ldr	r0, [r11, #-16]
     9f4:	eb000473 	bl	1bc8 <__aeabi_i2d>
     9f8:	e1a04000 	mov	r4, r0
     9fc:	e1a05001 	mov	r5, r1
     a00:	e24b3084 	sub	r3, r11, #132	; 0x84
     a04:	e1a00003 	mov	r0, r3
     a08:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     a0c:	ebfffe80 	bl	414 <computeSignalSimple>
     a10:	e1a02000 	mov	r2, r0
     a14:	e1a03001 	mov	r3, r1
     a18:	e1a00004 	mov	r0, r4
     a1c:	e1a01005 	mov	r1, r5
     a20:	eb00049f 	bl	1ca4 <__aeabi_dmul>
     a24:	e1a02000 	mov	r2, r0
     a28:	e1a03001 	mov	r3, r1
     a2c:	e14b22fc 	strd	r2, [r11, #-44]	; 0xffffffd4
		
		// play the signal			
		if(hps_tim0_int_flag == 1) {
     a30:	e3003e24 	movw	r3, #3620	; 0xe24
     a34:	e3403000 	movt	r3, #0
     a38:	e5933000 	ldr	r3, [r3]
     a3c:	e3530001 	cmp	r3, #1
     a40:	1a00000f 	bne	a84 <ICDIPTR+0x284>
			// Every 20 microseconds the timer flag goes high
			hps_tim0_int_flag = 0;// reset flag back to 0 since we assest the intertupt
     a44:	e3003e24 	movw	r3, #3620	; 0xe24
     a48:	e3403000 	movt	r3, #0
     a4c:	e3a02000 	mov	r2, #0
     a50:	e5832000 	str	r2, [r3]
			audio_write_data_ASM(totalSignal,totalSignal);
     a54:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     a58:	eb000609 	bl	2284 <__aeabi_d2iz>
     a5c:	e1a04000 	mov	r4, r0
     a60:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     a64:	eb000606 	bl	2284 <__aeabi_d2iz>
     a68:	e1a03000 	mov	r3, r0
     a6c:	e1a00004 	mov	r0, r4
     a70:	e1a01003 	mov	r1, r3
     a74:	eb000144 	bl	f8c <audio_write_data_ASM>
			t++;
     a78:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a7c:	e2833001 	add	r3, r3, #1
     a80:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		}
	
		// display the signal
		int drawIndex =0;
     a84:	e3a03000 	mov	r3, #0
     a88:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		double valToDraw = 0;
     a8c:	e3a02000 	mov	r2, #0
     a90:	e3a03000 	mov	r3, #0
     a94:	e14b23fc 	strd	r2, [r11, #-60]	; 0xffffffc4
		if((t%12 == 0)){
     a98:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     a9c:	e30a3aab 	movw	r3, #43691	; 0xaaab
     aa0:	e3423aaa 	movt	r3, #10922	; 0x2aaa
     aa4:	e0c32193 	smull	r2, r3, r3, r1
     aa8:	e1a020c3 	asr	r2, r3, #1
     aac:	e1a03fc1 	asr	r3, r1, #31
     ab0:	e0632002 	rsb	r2, r3, r2
     ab4:	e1a03002 	mov	r3, r2
     ab8:	e1a03083 	lsl	r3, r3, #1
     abc:	e0833002 	add	r3, r3, r2
     ac0:	e1a03103 	lsl	r3, r3, #2
     ac4:	e0632001 	rsb	r2, r3, r1
     ac8:	e3520000 	cmp	r2, #0
     acc:	1a000046 	bne	bec <ICDIPTR+0x3ec>
				drawIndex = (t/12)%320;
     ad0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     ad4:	e30a3aab 	movw	r3, #43691	; 0xaaab
     ad8:	e3423aaa 	movt	r3, #10922	; 0x2aaa
     adc:	e0c3c293 	smull	r12, r3, r3, r2
     ae0:	e1a010c3 	asr	r1, r3, #1
     ae4:	e1a03fc2 	asr	r3, r2, #31
     ae8:	e0632001 	rsb	r2, r3, r1
     aec:	e3063667 	movw	r3, #26215	; 0x6667
     af0:	e3463666 	movt	r3, #26214	; 0x6666
     af4:	e0c31293 	smull	r1, r3, r3, r2
     af8:	e1a013c3 	asr	r1, r3, #7
     afc:	e1a03fc2 	asr	r3, r2, #31
     b00:	e0631001 	rsb	r1, r3, r1
     b04:	e1a03001 	mov	r3, r1
     b08:	e1a03103 	lsl	r3, r3, #2
     b0c:	e0833001 	add	r3, r3, r1
     b10:	e1a03303 	lsl	r3, r3, #6
     b14:	e0633002 	rsb	r3, r3, r2
     b18:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
				//clear previously drawn points
				VGA_draw_point_ASM(drawIndex, history[drawIndex], 0);
     b1c:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     b20:	e30f3570 	movw	r3, #62832	; 0xf570
     b24:	e34f3fff 	movt	r3, #65535	; 0xffff
     b28:	e1a02182 	lsl	r2, r2, #3
     b2c:	e24bc00c 	sub	r12, r11, #12
     b30:	e08c2002 	add	r2, r12, r2
     b34:	e0823003 	add	r3, r2, r3
     b38:	e1c320d0 	ldrd	r2, [r3]
     b3c:	e1a00002 	mov	r0, r2
     b40:	e1a01003 	mov	r1, r3
     b44:	eb0005ce 	bl	2284 <__aeabi_d2iz>
     b48:	e1a03000 	mov	r3, r0
     b4c:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     b50:	e1a01003 	mov	r1, r3
     b54:	e3a02000 	mov	r2, #0
     b58:	eb00023d 	bl	1454 <VGA_draw_point_ASM>
				
				//120 centers the signal on the screen, fitParameter makes it fit on the screen
				valToDraw = 120 + totalSignal/fitParameter;
     b5c:	e30238d8 	movw	r3, #10456	; 0x28d8
     b60:	e3403000 	movt	r3, #0
     b64:	e5933000 	ldr	r3, [r3]
     b68:	e1a00003 	mov	r0, r3
     b6c:	eb000415 	bl	1bc8 <__aeabi_i2d>
     b70:	e1a02000 	mov	r2, r0
     b74:	e1a03001 	mov	r3, r1
     b78:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     b7c:	eb0004ec 	bl	1f34 <__aeabi_ddiv>
     b80:	e1a02000 	mov	r2, r0
     b84:	e1a03001 	mov	r3, r1
     b88:	e1a00002 	mov	r0, r2
     b8c:	e1a01003 	mov	r1, r3
     b90:	e3a02000 	mov	r2, #0
     b94:	e3a03000 	mov	r3, #0
     b98:	e344305e 	movt	r3, #16478	; 0x405e
     b9c:	eb00033c 	bl	1894 <__adddf3>
     ba0:	e1a02000 	mov	r2, r0
     ba4:	e1a03001 	mov	r3, r1
     ba8:	e14b23fc 	strd	r2, [r11, #-60]	; 0xffffffc4
				//add new points to history array
				history[drawIndex] = valToDraw;
     bac:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     bb0:	e30f3570 	movw	r3, #62832	; 0xf570
     bb4:	e34f3fff 	movt	r3, #65535	; 0xffff
     bb8:	e1a02182 	lsl	r2, r2, #3
     bbc:	e24b100c 	sub	r1, r11, #12
     bc0:	e0812002 	add	r2, r1, r2
     bc4:	e0821003 	add	r1, r2, r3
     bc8:	e14b23dc 	ldrd	r2, [r11, #-60]	; 0xffffffc4
     bcc:	e1c120f0 	strd	r2, [r1]
				//draw new points
				VGA_draw_point_ASM(drawIndex, valToDraw, 63);		
     bd0:	e14b03dc 	ldrd	r0, [r11, #-60]	; 0xffffffc4
     bd4:	eb0005aa 	bl	2284 <__aeabi_d2iz>
     bd8:	e1a03000 	mov	r3, r0
     bdc:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     be0:	e1a01003 	mov	r1, r3
     be4:	e3a0203f 	mov	r2, #63	; 0x3f
     be8:	eb000219 	bl	1454 <VGA_draw_point_ASM>
		}
		
		// display the volume
		if(vol == 10){
     bec:	e51b3010 	ldr	r3, [r11, #-16]
     bf0:	e353000a 	cmp	r3, #10
     bf4:	1a000008 	bne	c1c <ICDICFR+0x1c>
			VGA_write_char_ASM(77, 59, '1');
     bf8:	e3a0004d 	mov	r0, #77	; 0x4d
     bfc:	e3a0103b 	mov	r1, #59	; 0x3b
     c00:	e3a02031 	mov	r2, #49	; 0x31
     c04:	eb0001ee 	bl	13c4 <VGA_write_char_ASM>
			VGA_write_char_ASM(78, 59, '0');
     c08:	e3a0004e 	mov	r0, #78	; 0x4e
     c0c:	e3a0103b 	mov	r1, #59	; 0x3b
     c10:	e3a02030 	mov	r2, #48	; 0x30
     c14:	eb0001ea 	bl	13c4 <VGA_write_char_ASM>
     c18:	ea00000b 	b	c4c <ICDICFR+0x4c>
		}else{
			VGA_write_char_ASM(77, 59, '0');
     c1c:	e3a0004d 	mov	r0, #77	; 0x4d
     c20:	e3a0103b 	mov	r1, #59	; 0x3b
     c24:	e3a02030 	mov	r2, #48	; 0x30
     c28:	eb0001e5 	bl	13c4 <VGA_write_char_ASM>
			VGA_write_char_ASM(78, 59, vol + 48);
     c2c:	e51b3010 	ldr	r3, [r11, #-16]
     c30:	e6ef3073 	uxtb	r3, r3
     c34:	e2833030 	add	r3, r3, #48	; 0x30
     c38:	e6ef3073 	uxtb	r3, r3
     c3c:	e3a0004e 	mov	r0, #78	; 0x4e
     c40:	e3a0103b 	mov	r1, #59	; 0x3b
     c44:	e1a02003 	mov	r2, r3
     c48:	eb0001dd 	bl	13c4 <VGA_write_char_ASM>
		}

		// display the frequency		

		//reset signal
		totalSignal = 0;
     c4c:	e3a02000 	mov	r2, #0
     c50:	e3a03000 	mov	r3, #0
     c54:	e14b22fc 	strd	r2, [r11, #-44]	; 0xffffffd4
		// reset time
		if(t==48000){
     c58:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     c5c:	e30b3b80 	movw	r3, #48000	; 0xbb80
     c60:	e1520003 	cmp	r2, r3
     c64:	1afffe71 	bne	630 <main+0x108>
			t=0;
     c68:	e3a03000 	mov	r3, #0
     c6c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		}
		
	}
     c70:	eafffe6e 	b	630 <main+0x108>

00000c74 <HEX_clear_ASM>:
     c74:	e3a01000 	mov	r1, #0
     c78:	ea000004 	b	c90 <WRITE>

00000c7c <HEX_flood_ASM>:
     c7c:	e3a0107f 	mov	r1, #127	; 0x7f
     c80:	ea000002 	b	c90 <WRITE>

00000c84 <HEX_write_ASM>:
     c84:	e59f2064 	ldr	r2, [pc, #100]	; cf0 <PATTERNS+0x14>
     c88:	e7d21001 	ldrb	r1, [r2, r1]
     c8c:	eaffffff 	b	c90 <WRITE>

00000c90 <WRITE>:
     c90:	e92d0030 	push	{r4, r5}
     c94:	e59f2058 	ldr	r2, [pc, #88]	; cf4 <PATTERNS+0x18>
     c98:	e3a03000 	mov	r3, #0
     c9c:	e3e050ff 	mvn	r5, #255	; 0xff

00000ca0 <LOOP>:
     ca0:	e3100001 	tst	r0, #1
     ca4:	0a000003 	beq	cb8 <CONTINUE>
     ca8:	e5924000 	ldr	r4, [r2]
     cac:	e0044005 	and	r4, r4, r5
     cb0:	e1844001 	orr	r4, r4, r1
     cb4:	e5824000 	str	r4, [r2]

00000cb8 <CONTINUE>:
     cb8:	e1a05c65 	ror	r5, r5, #24
     cbc:	e1a01c61 	ror	r1, r1, #24
     cc0:	e2833001 	add	r3, r3, #1
     cc4:	e3530004 	cmp	r3, #4
     cc8:	059f2028 	ldreq	r2, [pc, #40]	; cf8 <PATTERNS+0x1c>
     ccc:	e1b000a0 	lsrs	r0, r0, #1
     cd0:	1afffff2 	bne	ca0 <LOOP>
     cd4:	e8bd0030 	pop	{r4, r5}
     cd8:	e12fff1e 	bx	lr

00000cdc <PATTERNS>:
     cdc:	4f5b063f 	.word	0x4f5b063f
     ce0:	077d6d66 	.word	0x077d6d66
     ce4:	7c776f7f 	.word	0x7c776f7f
     ce8:	71795e39 	.word	0x71795e39
     cec:	000000ff 	.word	0x000000ff
     cf0:	00000cdc 	.word	0x00000cdc
     cf4:	ff200020 	.word	0xff200020
     cf8:	ff200030 	.word	0xff200030

00000cfc <HPS_TIM_config_ASM>:
     cfc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     d00:	e3a01000 	mov	r1, #0
     d04:	e3a02001 	mov	r2, #1
     d08:	e5907000 	ldr	r7, [r0]
     d0c:	eaffffff 	b	d10 <LOOP>

00000d10 <LOOP>:
     d10:	e1170112 	tst	r7, r2, lsl r1
     d14:	0a000000 	beq	d1c <CONTINUE>
     d18:	eb000004 	bl	d30 <CONFIG>

00000d1c <CONTINUE>:
     d1c:	e2811001 	add	r1, r1, #1
     d20:	e3510004 	cmp	r1, #4
     d24:	bafffff9 	blt	d10 <LOOP>

00000d28 <DONE>:
     d28:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     d2c:	e12fff1e 	bx	lr

00000d30 <CONFIG>:
     d30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d34:	e59f30e4 	ldr	r3, [pc, #228]	; e20 <HPS_TIM_BASE+0x10>
     d38:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     d3c:	eb000005 	bl	d58 <DISABLE>
     d40:	eb000008 	bl	d68 <SET_LOAD_VAL>
     d44:	eb00000e 	bl	d84 <SET_LOAD_BIT>
     d48:	eb000013 	bl	d9c <SET_INT_BIT>
     d4c:	eb000019 	bl	db8 <SET_EN_BIT>
     d50:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d54:	e12fff1e 	bx	lr

00000d58 <DISABLE>:
     d58:	e5945008 	ldr	r5, [r4, #8]
     d5c:	e3c55001 	bic	r5, r5, #1
     d60:	e5845008 	str	r5, [r4, #8]
     d64:	e12fff1e 	bx	lr

00000d68 <SET_LOAD_VAL>:
     d68:	e5905004 	ldr	r5, [r0, #4]
     d6c:	e3a06019 	mov	r6, #25
     d70:	e0050695 	mul	r5, r5, r6
     d74:	e3510002 	cmp	r1, #2
     d78:	b1a05105 	lsllt	r5, r5, #2
     d7c:	e5845000 	str	r5, [r4]
     d80:	e12fff1e 	bx	lr

00000d84 <SET_LOAD_BIT>:
     d84:	e5945008 	ldr	r5, [r4, #8]
     d88:	e5906008 	ldr	r6, [r0, #8]
     d8c:	e3c55002 	bic	r5, r5, #2
     d90:	e1855086 	orr	r5, r5, r6, lsl #1
     d94:	e5845008 	str	r5, [r4, #8]
     d98:	e12fff1e 	bx	lr

00000d9c <SET_INT_BIT>:
     d9c:	e5945008 	ldr	r5, [r4, #8]
     da0:	e590600c 	ldr	r6, [r0, #12]
     da4:	e2266001 	eor	r6, r6, #1
     da8:	e3c55004 	bic	r5, r5, #4
     dac:	e1855106 	orr	r5, r5, r6, lsl #2
     db0:	e5845008 	str	r5, [r4, #8]
     db4:	e12fff1e 	bx	lr

00000db8 <SET_EN_BIT>:
     db8:	e5945008 	ldr	r5, [r4, #8]
     dbc:	e5906010 	ldr	r6, [r0, #16]
     dc0:	e3c55001 	bic	r5, r5, #1
     dc4:	e1855006 	orr	r5, r5, r6
     dc8:	e5845008 	str	r5, [r4, #8]
     dcc:	e12fff1e 	bx	lr

00000dd0 <HPS_TIM_clear_INT_ASM>:
     dd0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     dd4:	e3a01000 	mov	r1, #0
     dd8:	e3a02001 	mov	r2, #1
     ddc:	eaffffff 	b	de0 <INT_LOOP>

00000de0 <INT_LOOP>:
     de0:	e1100112 	tst	r0, r2, lsl r1
     de4:	0a000000 	beq	dec <INT_CONTINUE>
     de8:	eb000004 	bl	e00 <CLEAR_IT>

00000dec <INT_CONTINUE>:
     dec:	e2811001 	add	r1, r1, #1
     df0:	e3510004 	cmp	r1, #4
     df4:	bafffff9 	blt	de0 <INT_LOOP>

00000df8 <INT_DONE>:
     df8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dfc:	e12fff1e 	bx	lr

00000e00 <CLEAR_IT>:
     e00:	e59f3018 	ldr	r3, [pc, #24]	; e20 <HPS_TIM_BASE+0x10>
     e04:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     e08:	e593300c 	ldr	r3, [r3, #12]
     e0c:	e12fff1e 	bx	lr

00000e10 <HPS_TIM_BASE>:
     e10:	ffc08000 	.word	0xffc08000
     e14:	ffc09000 	.word	0xffc09000
     e18:	ffd00000 	.word	0xffd00000
     e1c:	ffd01000 	.word	0xffd01000
     e20:	00000e10 	.word	0x00000e10

00000e24 <hps_tim0_int_flag>:
     e24:	00000000 	.word	0x00000000

00000e28 <hps_pb_int_flag>:
     e28:	00000000 	.word	0x00000000

00000e2c <A9_PRIV_TIM_ISR>:

hps_pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     e2c:	e12fff1e 	bx	lr

00000e30 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     e30:	e12fff1e 	bx	lr

00000e34 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     e34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     e38:	e3a00001 	mov	r0, #1
	
	//clear the interrupt status register of out timer
	BL HPS_TIM_clear_INT_ASM
     e3c:	ebffffe3 	bl	dd0 <HPS_TIM_clear_INT_ASM>
	
	// set the hps_tim0_int_flag to 1
	LDR R0, =hps_tim0_int_flag
     e40:	e59f0054 	ldr	r0, [pc, #84]	; e9c <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     e44:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     e48:	e5801000 	str	r1, [r0]

	POP {LR}
     e4c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e50:	e12fff1e 	bx	lr

00000e54 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     e54:	e12fff1e 	bx	lr

00000e58 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     e58:	e12fff1e 	bx	lr

00000e5c <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     e5c:	e12fff1e 	bx	lr

00000e60 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     e60:	e12fff1e 	bx	lr

00000e64 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:

	PUSH {LR}
     e64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	//read the edgecap register to know which buttons have been pressed
	BL read_PB_edgecap_ASM
     e68:	eb000118 	bl	12d0 <read_PB_edgecap_ASM>
	LDR R1, =hps_pb_int_flag
     e6c:	e59f102c 	ldr	r1, [pc, #44]	; ea0 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]
     e70:	e5810000 	str	r0, [r1]
	
	//clear the edgecap registors of the pushbuttons
	BL PB_clear_edgecp_ASM
     e74:	eb00011e 	bl	12f4 <PB_clear_edgecp_ASM>
	
	POP {LR}
     e78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e7c:	e12fff1e 	bx	lr

00000e80 <FPGA_Audio_ISR>:

FPGA_Audio_ISR:
	BX LR
     e80:	e12fff1e 	bx	lr

00000e84 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     e84:	e12fff1e 	bx	lr

00000e88 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     e88:	e12fff1e 	bx	lr

00000e8c <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     e8c:	e12fff1e 	bx	lr

00000e90 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     e90:	e12fff1e 	bx	lr

00000e94 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     e94:	e12fff1e 	bx	lr

00000e98 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     e98:	e12fff1e 	bx	lr
	
	//clear the interrupt status register of out timer
	BL HPS_TIM_clear_INT_ASM
	
	// set the hps_tim0_int_flag to 1
	LDR R0, =hps_tim0_int_flag
     e9c:	00000e24 	.word	0x00000e24

	PUSH {LR}
	
	//read the edgecap register to know which buttons have been pressed
	BL read_PB_edgecap_ASM
	LDR R1, =hps_pb_int_flag
     ea0:	00000e28 	.word	0x00000e28

00000ea4 <read_LEDs_ASM>:
     ea4:	e59f1010 	ldr	r1, [pc, #16]	; ebc <write_LEDs_ASM+0xc>
     ea8:	e5910000 	ldr	r0, [r1]
     eac:	e12fff1e 	bx	lr

00000eb0 <write_LEDs_ASM>:
     eb0:	e59f1004 	ldr	r1, [pc, #4]	; ebc <write_LEDs_ASM+0xc>
     eb4:	e5810000 	str	r0, [r1]
     eb8:	e12fff1e 	bx	lr
     ebc:	ff200000 	.word	0xff200000

00000ec0 <audio_read_data_ASM>:
     ec0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ec4:	e92d0003 	push	{r0, r1}
     ec8:	eb000093 	bl	111c <audio_read_ralc_ASM>
     ecc:	e3500000 	cmp	r0, #0
     ed0:	08bd0003 	popeq	{r0, r1}
     ed4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ed8:	03a00000 	moveq	r0, #0
     edc:	012fff1e 	bxeq	lr
     ee0:	eb000092 	bl	1130 <audio_read_rarc_ASM>
     ee4:	e3500000 	cmp	r0, #0
     ee8:	08bd0003 	popeq	{r0, r1}
     eec:	03a00000 	moveq	r0, #0
     ef0:	012fff1e 	bxeq	lr
     ef4:	e8bd0003 	pop	{r0, r1}
     ef8:	e59f2240 	ldr	r2, [pc, #576]	; 1140 <audio_read_rarc_ASM+0x10>
     efc:	e5922000 	ldr	r2, [r2]
     f00:	e5802000 	str	r2, [r0]
     f04:	e59f3238 	ldr	r3, [pc, #568]	; 1144 <audio_read_rarc_ASM+0x14>
     f08:	e5933000 	ldr	r3, [r3]
     f0c:	e5813000 	str	r3, [r1]
     f10:	e3a00001 	mov	r0, #1

00000f14 <audio_read_leftdata_ASM>:
     f14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f18:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f1c:	eb00007e 	bl	111c <audio_read_ralc_ASM>
     f20:	e3500000 	cmp	r0, #0
     f24:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f28:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f2c:	03a00000 	moveq	r0, #0
     f30:	012fff1e 	bxeq	lr
     f34:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f38:	e59f2200 	ldr	r2, [pc, #512]	; 1140 <audio_read_rarc_ASM+0x10>
     f3c:	e5922000 	ldr	r2, [r2]
     f40:	e5802000 	str	r2, [r0]
     f44:	e3a00001 	mov	r0, #1
     f48:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f4c:	e12fff1e 	bx	lr

00000f50 <audio_read_rightdata_ASM>:
     f50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f54:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f58:	eb000074 	bl	1130 <audio_read_rarc_ASM>
     f5c:	e3500000 	cmp	r0, #0
     f60:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f64:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f68:	03a00000 	moveq	r0, #0
     f6c:	012fff1e 	bxeq	lr
     f70:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f74:	e59f21c8 	ldr	r2, [pc, #456]	; 1144 <audio_read_rarc_ASM+0x14>
     f78:	e5922000 	ldr	r2, [r2]
     f7c:	e5802000 	str	r2, [r0]
     f80:	e3a00001 	mov	r0, #1
     f84:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f88:	e12fff1e 	bx	lr

00000f8c <audio_write_data_ASM>:
     f8c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f90:	e92d0003 	push	{r0, r1}
     f94:	eb000056 	bl	10f4 <audio_read_wslc_ASM>
     f98:	e3500000 	cmp	r0, #0
     f9c:	08bd0003 	popeq	{r0, r1}
     fa0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fa4:	03a00000 	moveq	r0, #0
     fa8:	012fff1e 	bxeq	lr
     fac:	eb000055 	bl	1108 <audio_read_wsrc_ASM>
     fb0:	e3500000 	cmp	r0, #0
     fb4:	08bd0003 	popeq	{r0, r1}
     fb8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fbc:	03a00000 	moveq	r0, #0
     fc0:	012fff1e 	bxeq	lr
     fc4:	e8bd0003 	pop	{r0, r1}
     fc8:	e59f2170 	ldr	r2, [pc, #368]	; 1140 <audio_read_rarc_ASM+0x10>
     fcc:	e5820000 	str	r0, [r2]
     fd0:	e59f316c 	ldr	r3, [pc, #364]	; 1144 <audio_read_rarc_ASM+0x14>
     fd4:	e5831000 	str	r1, [r3]
     fd8:	e3a00001 	mov	r0, #1
     fdc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fe0:	e12fff1e 	bx	lr

00000fe4 <audio_write_leftdata_ASM>:
     fe4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fe8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fec:	eb000040 	bl	10f4 <audio_read_wslc_ASM>
     ff0:	e3500000 	cmp	r0, #0
     ff4:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     ff8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ffc:	03a00000 	moveq	r0, #0
    1000:	012fff1e 	bxeq	lr
    1004:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1008:	e59f2130 	ldr	r2, [pc, #304]	; 1140 <audio_read_rarc_ASM+0x10>
    100c:	e5820000 	str	r0, [r2]
    1010:	e3a00001 	mov	r0, #1
    1014:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1018:	e12fff1e 	bx	lr

0000101c <audio_write_rightdata_ASM>:
    101c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1020:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1024:	eb000037 	bl	1108 <audio_read_wsrc_ASM>
    1028:	e3500000 	cmp	r0, #0
    102c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1030:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1034:	03a00000 	moveq	r0, #0
    1038:	012fff1e 	bxeq	lr
    103c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1040:	e59f20fc 	ldr	r2, [pc, #252]	; 1144 <audio_read_rarc_ASM+0x14>
    1044:	e5820000 	str	r0, [r2]
    1048:	e3a00001 	mov	r0, #1
    104c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1050:	e12fff1e 	bx	lr

00001054 <audio_enable_read_fifo_clear_ASM>:
    1054:	e59f00ec 	ldr	r0, [pc, #236]	; 1148 <audio_read_rarc_ASM+0x18>
    1058:	e5901000 	ldr	r1, [r0]
    105c:	e3811004 	orr	r1, r1, #4
    1060:	e5801000 	str	r1, [r0]
    1064:	e12fff1e 	bx	lr

00001068 <audio_enable_write_fifo_clear_ASM>:
    1068:	e59f00d8 	ldr	r0, [pc, #216]	; 1148 <audio_read_rarc_ASM+0x18>
    106c:	e5901000 	ldr	r1, [r0]
    1070:	e3811008 	orr	r1, r1, #8
    1074:	e5801000 	str	r1, [r0]
    1078:	e12fff1e 	bx	lr

0000107c <audio_disable_read_fifo_clear_ASM>:
    107c:	e59f00c4 	ldr	r0, [pc, #196]	; 1148 <audio_read_rarc_ASM+0x18>
    1080:	e5901000 	ldr	r1, [r0]
    1084:	e3c11004 	bic	r1, r1, #4
    1088:	e5801000 	str	r1, [r0]
    108c:	e12fff1e 	bx	lr

00001090 <audio_disable_write_fifo_clear_ASM>:
    1090:	e59f00b0 	ldr	r0, [pc, #176]	; 1148 <audio_read_rarc_ASM+0x18>
    1094:	e5901000 	ldr	r1, [r0]
    1098:	e3c11008 	bic	r1, r1, #8
    109c:	e5801000 	str	r1, [r0]
    10a0:	e12fff1e 	bx	lr

000010a4 <audio_enable_read_int_ASM>:
    10a4:	e59f009c 	ldr	r0, [pc, #156]	; 1148 <audio_read_rarc_ASM+0x18>
    10a8:	e5901000 	ldr	r1, [r0]
    10ac:	e3811001 	orr	r1, r1, #1
    10b0:	e5801000 	str	r1, [r0]
    10b4:	e12fff1e 	bx	lr

000010b8 <audio_enable_write_int_ASM>:
    10b8:	e59f0088 	ldr	r0, [pc, #136]	; 1148 <audio_read_rarc_ASM+0x18>
    10bc:	e5901000 	ldr	r1, [r0]
    10c0:	e3811002 	orr	r1, r1, #2
    10c4:	e5801000 	str	r1, [r0]
    10c8:	e12fff1e 	bx	lr

000010cc <audio_disable_read_int_ASM>:
    10cc:	e59f0074 	ldr	r0, [pc, #116]	; 1148 <audio_read_rarc_ASM+0x18>
    10d0:	e5901000 	ldr	r1, [r0]
    10d4:	e3c11001 	bic	r1, r1, #1
    10d8:	e5801000 	str	r1, [r0]
    10dc:	e12fff1e 	bx	lr

000010e0 <audio_disable_write_int_ASM>:
    10e0:	e59f0060 	ldr	r0, [pc, #96]	; 1148 <audio_read_rarc_ASM+0x18>
    10e4:	e5901000 	ldr	r1, [r0]
    10e8:	e3c11002 	bic	r1, r1, #2
    10ec:	e5801000 	str	r1, [r0]
    10f0:	e12fff1e 	bx	lr

000010f4 <audio_read_wslc_ASM>:
    10f4:	e59f0050 	ldr	r0, [pc, #80]	; 114c <audio_read_rarc_ASM+0x1c>
    10f8:	e5900000 	ldr	r0, [r0]
    10fc:	e1a00c20 	lsr	r0, r0, #24
    1100:	e20000ff 	and	r0, r0, #255	; 0xff
    1104:	e12fff1e 	bx	lr

00001108 <audio_read_wsrc_ASM>:
    1108:	e59f003c 	ldr	r0, [pc, #60]	; 114c <audio_read_rarc_ASM+0x1c>
    110c:	e5900000 	ldr	r0, [r0]
    1110:	e1a00820 	lsr	r0, r0, #16
    1114:	e20000ff 	and	r0, r0, #255	; 0xff
    1118:	e12fff1e 	bx	lr

0000111c <audio_read_ralc_ASM>:
    111c:	e59f0028 	ldr	r0, [pc, #40]	; 114c <audio_read_rarc_ASM+0x1c>
    1120:	e5900000 	ldr	r0, [r0]
    1124:	e1a00420 	lsr	r0, r0, #8
    1128:	e20000ff 	and	r0, r0, #255	; 0xff
    112c:	e12fff1e 	bx	lr

00001130 <audio_read_rarc_ASM>:
    1130:	e59f0014 	ldr	r0, [pc, #20]	; 114c <audio_read_rarc_ASM+0x1c>
    1134:	e5900000 	ldr	r0, [r0]
    1138:	e20000ff 	and	r0, r0, #255	; 0xff
    113c:	e12fff1e 	bx	lr
    1140:	ff203048 	.word	0xff203048
    1144:	ff20304c 	.word	0xff20304c
    1148:	ff203040 	.word	0xff203040
    114c:	ff203044 	.word	0xff203044

00001150 <read_ps2_data_ASM>:
    1150:	e59f114c 	ldr	r1, [pc, #332]	; 12a4 <ps2_fifo_ravail+0x4>
    1154:	e5911000 	ldr	r1, [r1]
    1158:	e3a02902 	mov	r2, #32768	; 0x8000
    115c:	e1110002 	tst	r1, r2
    1160:	03a00000 	moveq	r0, #0
    1164:	012fff1e 	bxeq	lr
    1168:	e20120ff 	and	r2, r1, #255	; 0xff
    116c:	e5c02000 	strb	r2, [r0]
    1170:	e59f2130 	ldr	r2, [pc, #304]	; 12a8 <ps2_fifo_ravail+0x8>
    1174:	e0010002 	and	r0, r1, r2
    1178:	e1a00820 	lsr	r0, r0, #16
    117c:	e12fff1e 	bx	lr

00001180 <enable_ps2_int_ASM>:
    1180:	e59f011c 	ldr	r0, [pc, #284]	; 12a4 <ps2_fifo_ravail+0x4>
    1184:	e3a01001 	mov	r1, #1
    1188:	e5c01004 	strb	r1, [r0, #4]
    118c:	e12fff1e 	bx	lr

00001190 <disable_ps2_int_ASM>:
    1190:	e59f010c 	ldr	r0, [pc, #268]	; 12a4 <ps2_fifo_ravail+0x4>
    1194:	e3a01000 	mov	r1, #0
    1198:	e5c01004 	strb	r1, [r0, #4]
    119c:	e12fff1e 	bx	lr

000011a0 <ps2_fifo_data>:
	...

000012a0 <ps2_fifo_ravail>:
    12a0:	00000000 	.word	0x00000000
    12a4:	ff200100 	.word	0xff200100
    12a8:	ffff0000 	.word	0xffff0000

000012ac <read_PB_data_ASM>:
    12ac:	e59f1074 	ldr	r1, [pc, #116]	; 1328 <disable_PB_INT_ASM+0x14>
    12b0:	e5910000 	ldr	r0, [r1]
    12b4:	e12fff1e 	bx	lr

000012b8 <PB_data_is_pressed_ASM>:
    12b8:	e59f1068 	ldr	r1, [pc, #104]	; 1328 <disable_PB_INT_ASM+0x14>
    12bc:	e5912000 	ldr	r2, [r1]
    12c0:	e0000002 	and	r0, r0, r2
    12c4:	e3300000 	teq	r0, #0
    12c8:	13a00001 	movne	r0, #1
    12cc:	e12fff1e 	bx	lr

000012d0 <read_PB_edgecap_ASM>:
    12d0:	e59f1054 	ldr	r1, [pc, #84]	; 132c <disable_PB_INT_ASM+0x18>
    12d4:	e5910000 	ldr	r0, [r1]
    12d8:	e12fff1e 	bx	lr

000012dc <PB_edgecap_is_pressed_ASM>:
    12dc:	e59f1048 	ldr	r1, [pc, #72]	; 132c <disable_PB_INT_ASM+0x18>
    12e0:	e5912000 	ldr	r2, [r1]
    12e4:	e0000002 	and	r0, r0, r2
    12e8:	e3300000 	teq	r0, #0
    12ec:	13a00001 	movne	r0, #1
    12f0:	e12fff1e 	bx	lr

000012f4 <PB_clear_edgecp_ASM>:
    12f4:	e59f1030 	ldr	r1, [pc, #48]	; 132c <disable_PB_INT_ASM+0x18>
    12f8:	e5810000 	str	r0, [r1]
    12fc:	e12fff1e 	bx	lr

00001300 <enable_PB_INT_ASM>:
    1300:	e59f1028 	ldr	r1, [pc, #40]	; 1330 <disable_PB_INT_ASM+0x1c>
    1304:	e5912000 	ldr	r2, [r1]
    1308:	e1800002 	orr	r0, r0, r2
    130c:	e5810000 	str	r0, [r1]
    1310:	e12fff1e 	bx	lr

00001314 <disable_PB_INT_ASM>:
    1314:	e59f1014 	ldr	r1, [pc, #20]	; 1330 <disable_PB_INT_ASM+0x1c>
    1318:	e5912000 	ldr	r2, [r1]
    131c:	e1c00002 	bic	r0, r0, r2
    1320:	e5810000 	str	r0, [r1]
    1324:	e12fff1e 	bx	lr
    1328:	ff200050 	.word	0xff200050
    132c:	ff20005c 	.word	0xff20005c
    1330:	ff200058 	.word	0xff200058

00001334 <read_slider_switches_ASM>:
    1334:	e59f1004 	ldr	r1, [pc, #4]	; 1340 <read_slider_switches_ASM+0xc>
    1338:	e5910000 	ldr	r0, [r1]
    133c:	e12fff1e 	bx	lr
    1340:	ff200040 	.word	0xff200040

00001344 <VGA_clear_charbuff_ASM>:
    1344:	e92d0030 	push	{r4, r5}
    1348:	e3a02000 	mov	r2, #0
    134c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1350:	e3a00000 	mov	r0, #0

00001354 <CHAR_LOOPX>:
    1354:	e3a01000 	mov	r1, #0
    1358:	e0834000 	add	r4, r3, r0

0000135c <CHAR_LOOPY>:
    135c:	e0845381 	add	r5, r4, r1, lsl #7
    1360:	e5c52000 	strb	r2, [r5]
    1364:	e2811001 	add	r1, r1, #1
    1368:	e351003c 	cmp	r1, #60	; 0x3c
    136c:	bafffffa 	blt	135c <CHAR_LOOPY>
    1370:	e2800001 	add	r0, r0, #1
    1374:	e3500050 	cmp	r0, #80	; 0x50
    1378:	bafffff5 	blt	1354 <CHAR_LOOPX>
    137c:	e8bd0030 	pop	{r4, r5}
    1380:	e12fff1e 	bx	lr

00001384 <VGA_clear_pixelbuff_ASM>:
    1384:	e92d0030 	push	{r4, r5}
    1388:	e3a02000 	mov	r2, #0
    138c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1390:	e3a00000 	mov	r0, #0

00001394 <PIXEL_LOOPX>:
    1394:	e3a01000 	mov	r1, #0
    1398:	e0834080 	add	r4, r3, r0, lsl #1

0000139c <PIXEL_LOOPY>:
    139c:	e0845501 	add	r5, r4, r1, lsl #10
    13a0:	e1c520b0 	strh	r2, [r5]
    13a4:	e2811001 	add	r1, r1, #1
    13a8:	e35100f0 	cmp	r1, #240	; 0xf0
    13ac:	bafffffa 	blt	139c <PIXEL_LOOPY>
    13b0:	e2800001 	add	r0, r0, #1
    13b4:	e3500d05 	cmp	r0, #320	; 0x140
    13b8:	bafffff5 	blt	1394 <PIXEL_LOOPX>
    13bc:	e8bd0030 	pop	{r4, r5}
    13c0:	e12fff1e 	bx	lr

000013c4 <VGA_write_char_ASM>:
    13c4:	e3500000 	cmp	r0, #0
    13c8:	b12fff1e 	bxlt	lr
    13cc:	e3510000 	cmp	r1, #0
    13d0:	b12fff1e 	bxlt	lr
    13d4:	e350004f 	cmp	r0, #79	; 0x4f
    13d8:	c12fff1e 	bxgt	lr
    13dc:	e351003b 	cmp	r1, #59	; 0x3b
    13e0:	c12fff1e 	bxgt	lr
    13e4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13e8:	e0833000 	add	r3, r3, r0
    13ec:	e0833381 	add	r3, r3, r1, lsl #7
    13f0:	e5c32000 	strb	r2, [r3]
    13f4:	e12fff1e 	bx	lr

000013f8 <VGA_write_byte_ASM>:
    13f8:	e3500000 	cmp	r0, #0
    13fc:	b12fff1e 	bxlt	lr
    1400:	e3510000 	cmp	r1, #0
    1404:	b12fff1e 	bxlt	lr
    1408:	e350004e 	cmp	r0, #78	; 0x4e
    140c:	c12fff1e 	bxgt	lr
    1410:	e351003b 	cmp	r1, #59	; 0x3b
    1414:	c12fff1e 	bxgt	lr
    1418:	e92d0030 	push	{r4, r5}
    141c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1420:	e20250f0 	and	r5, r2, #240	; 0xf0
    1424:	e1a05225 	lsr	r5, r5, #4
    1428:	e202400f 	and	r4, r2, #15
    142c:	e59f2068 	ldr	r2, [pc, #104]	; 149c <HEX_ASCII+0x10>
    1430:	e7d25005 	ldrb	r5, [r2, r5]
    1434:	e7d24004 	ldrb	r4, [r2, r4]
    1438:	e0833000 	add	r3, r3, r0
    143c:	e0833381 	add	r3, r3, r1, lsl #7
    1440:	e5c35000 	strb	r5, [r3]
    1444:	e2833001 	add	r3, r3, #1
    1448:	e5c34000 	strb	r4, [r3]
    144c:	e8bd0030 	pop	{r4, r5}
    1450:	e12fff1e 	bx	lr

00001454 <VGA_draw_point_ASM>:
    1454:	e59f3044 	ldr	r3, [pc, #68]	; 14a0 <HEX_ASCII+0x14>
    1458:	e3500000 	cmp	r0, #0
    145c:	b12fff1e 	bxlt	lr
    1460:	e3510000 	cmp	r1, #0
    1464:	b12fff1e 	bxlt	lr
    1468:	e1500003 	cmp	r0, r3
    146c:	c12fff1e 	bxgt	lr
    1470:	e35100ef 	cmp	r1, #239	; 0xef
    1474:	c12fff1e 	bxgt	lr
    1478:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    147c:	e0833080 	add	r3, r3, r0, lsl #1
    1480:	e0833501 	add	r3, r3, r1, lsl #10
    1484:	e1c320b0 	strh	r2, [r3]
    1488:	e12fff1e 	bx	lr

0000148c <HEX_ASCII>:
    148c:	33323130 	.word	0x33323130
    1490:	37363534 	.word	0x37363534
    1494:	42413938 	.word	0x42413938
    1498:	46454443 	.word	0x46454443
    149c:	0000148c 	.word	0x0000148c
    14a0:	0000013f 	.word	0x0000013f

000014a4 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    14a4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14a8:	e28db000 	add	r11, sp, #0
    14ac:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    14b0:	e3a030d3 	mov	r3, #211	; 0xd3
    14b4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    14b8:	e51b3008 	ldr	r3, [r11, #-8]
    14bc:	e129f003 	msr	CPSR_fc, r3
}
    14c0:	e28bd000 	add	sp, r11, #0
    14c4:	e8bd0800 	ldmfd	sp!, {r11}
    14c8:	e12fff1e 	bx	lr

000014cc <enable_A9_interrupts>:

void enable_A9_interrupts() {
    14cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14d0:	e28db000 	add	r11, sp, #0
    14d4:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    14d8:	e3a03053 	mov	r3, #83	; 0x53
    14dc:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    14e0:	e51b3008 	ldr	r3, [r11, #-8]
    14e4:	e129f003 	msr	CPSR_fc, r3
}
    14e8:	e28bd000 	add	sp, r11, #0
    14ec:	e8bd0800 	ldmfd	sp!, {r11}
    14f0:	e12fff1e 	bx	lr

000014f4 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    14f4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14f8:	e28db000 	add	r11, sp, #0
    14fc:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    1500:	e3e03007 	mvn	r3, #7
    1504:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    1508:	e3a030d2 	mov	r3, #210	; 0xd2
    150c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1510:	e51b300c 	ldr	r3, [r11, #-12]
    1514:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    1518:	e51b3008 	ldr	r3, [r11, #-8]
    151c:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    1520:	e3a030d3 	mov	r3, #211	; 0xd3
    1524:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1528:	e51b300c 	ldr	r3, [r11, #-12]
    152c:	e129f003 	msr	CPSR_fc, r3
}
    1530:	e28bd000 	add	sp, r11, #0
    1534:	e8bd0800 	ldmfd	sp!, {r11}
    1538:	e12fff1e 	bx	lr

0000153c <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    153c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1540:	e28db000 	add	r11, sp, #0
    1544:	e24dd01c 	sub	sp, sp, #28
    1548:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    154c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    1550:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1554:	e1a031c3 	asr	r3, r3, #3
    1558:	e3c33003 	bic	r3, r3, #3
    155c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    1560:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1564:	e203301f 	and	r3, r3, #31
    1568:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    156c:	e3a02001 	mov	r2, #1
    1570:	e51b300c 	ldr	r3, [r11, #-12]
    1574:	e1a03312 	lsl	r3, r2, r3
    1578:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    157c:	e51b3008 	ldr	r3, [r11, #-8]
    1580:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1584:	e2433c03 	sub	r3, r3, #768	; 0x300
    1588:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    158c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1590:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1594:	e5921000 	ldr	r1, [r2]
    1598:	e51b2010 	ldr	r2, [r11, #-16]
    159c:	e1812002 	orr	r2, r1, r2
    15a0:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    15a4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    15a8:	e3c33003 	bic	r3, r3, #3
    15ac:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    15b0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    15b4:	e2033003 	and	r3, r3, #3
    15b8:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    15bc:	e51b2008 	ldr	r2, [r11, #-8]
    15c0:	e51b300c 	ldr	r3, [r11, #-12]
    15c4:	e0823003 	add	r3, r2, r3
    15c8:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    15cc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    15d0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    15d4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    15d8:	e6ef2072 	uxtb	r2, r2
    15dc:	e5c32000 	strb	r2, [r3]
}
    15e0:	e28bd000 	add	sp, r11, #0
    15e4:	e8bd0800 	ldmfd	sp!, {r11}
    15e8:	e12fff1e 	bx	lr

000015ec <config_GIC>:

void config_GIC(int len, int* IDs) {
    15ec:	e92d4800 	push	{r11, lr}
    15f0:	e28db004 	add	r11, sp, #4
    15f4:	e24dd010 	sub	sp, sp, #16
    15f8:	e50b0010 	str	r0, [r11, #-16]
    15fc:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    1600:	e3a03000 	mov	r3, #0
    1604:	e50b3008 	str	r3, [r11, #-8]
    1608:	ea00000a 	b	1638 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    160c:	e51b3008 	ldr	r3, [r11, #-8]
    1610:	e1a03103 	lsl	r3, r3, #2
    1614:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1618:	e0823003 	add	r3, r2, r3
    161c:	e5933000 	ldr	r3, [r3]
    1620:	e1a00003 	mov	r0, r3
    1624:	e3a01001 	mov	r1, #1
    1628:	ebffffc3 	bl	153c <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    162c:	e51b3008 	ldr	r3, [r11, #-8]
    1630:	e2833001 	add	r3, r3, #1
    1634:	e50b3008 	str	r3, [r11, #-8]
    1638:	e51b2008 	ldr	r2, [r11, #-8]
    163c:	e51b3010 	ldr	r3, [r11, #-16]
    1640:	e1520003 	cmp	r2, r3
    1644:	bafffff0 	blt	160c <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    1648:	e30c3104 	movw	r3, #49412	; 0xc104
    164c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1650:	e30f2fff 	movw	r2, #65535	; 0xffff
    1654:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    1658:	e3a03cc1 	mov	r3, #49408	; 0xc100
    165c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1660:	e3a02001 	mov	r2, #1
    1664:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    1668:	e3a03a0d 	mov	r3, #53248	; 0xd000
    166c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1670:	e3a02001 	mov	r2, #1
    1674:	e5832000 	str	r2, [r3]
}
    1678:	e24bd004 	sub	sp, r11, #4
    167c:	e8bd8800 	pop	{r11, pc}

00001680 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    1680:	e24ee004 	sub	lr, lr, #4
    1684:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1688:	e28db018 	add	r11, sp, #24
    168c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    1690:	e30c310c 	movw	r3, #49420	; 0xc10c
    1694:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1698:	e5933000 	ldr	r3, [r3]
    169c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    16a0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    16a4:	e3530053 	cmp	r3, #83	; 0x53
    16a8:	0a00003d 	beq	17a4 <__cs3_isr_irq+0x124>
    16ac:	e3530053 	cmp	r3, #83	; 0x53
    16b0:	ca000011 	bgt	16fc <__cs3_isr_irq+0x7c>
    16b4:	e353004e 	cmp	r3, #78	; 0x4e
    16b8:	0a000031 	beq	1784 <__cs3_isr_irq+0x104>
    16bc:	e353004e 	cmp	r3, #78	; 0x4e
    16c0:	ca000006 	bgt	16e0 <__cs3_isr_irq+0x60>
    16c4:	e3530048 	cmp	r3, #72	; 0x48
    16c8:	0a000029 	beq	1774 <__cs3_isr_irq+0xf4>
    16cc:	e3530049 	cmp	r3, #73	; 0x49
    16d0:	0a000029 	beq	177c <__cs3_isr_irq+0xfc>
    16d4:	e353001d 	cmp	r3, #29
    16d8:	0a000019 	beq	1744 <__cs3_isr_irq+0xc4>
    16dc:	ea000036 	b	17bc <__cs3_isr_irq+0x13c>
    16e0:	e3530050 	cmp	r3, #80	; 0x50
    16e4:	0a00002a 	beq	1794 <__cs3_isr_irq+0x114>
    16e8:	e3530050 	cmp	r3, #80	; 0x50
    16ec:	ba000026 	blt	178c <__cs3_isr_irq+0x10c>
    16f0:	e3530051 	cmp	r3, #81	; 0x51
    16f4:	0a000028 	beq	179c <__cs3_isr_irq+0x11c>
    16f8:	ea00002f 	b	17bc <__cs3_isr_irq+0x13c>
    16fc:	e35300c7 	cmp	r3, #199	; 0xc7
    1700:	0a000013 	beq	1754 <__cs3_isr_irq+0xd4>
    1704:	e35300c7 	cmp	r3, #199	; 0xc7
    1708:	ca000006 	bgt	1728 <__cs3_isr_irq+0xa8>
    170c:	e3530059 	cmp	r3, #89	; 0x59
    1710:	0a000027 	beq	17b4 <__cs3_isr_irq+0x134>
    1714:	e35300c5 	cmp	r3, #197	; 0xc5
    1718:	0a00000b 	beq	174c <__cs3_isr_irq+0xcc>
    171c:	e3530054 	cmp	r3, #84	; 0x54
    1720:	0a000021 	beq	17ac <__cs3_isr_irq+0x12c>
    1724:	ea000024 	b	17bc <__cs3_isr_irq+0x13c>
    1728:	e35300c9 	cmp	r3, #201	; 0xc9
    172c:	0a00000c 	beq	1764 <__cs3_isr_irq+0xe4>
    1730:	e35300c9 	cmp	r3, #201	; 0xc9
    1734:	ba000008 	blt	175c <__cs3_isr_irq+0xdc>
    1738:	e35300ca 	cmp	r3, #202	; 0xca
    173c:	0a00000a 	beq	176c <__cs3_isr_irq+0xec>
    1740:	ea00001d 	b	17bc <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    1744:	ebfffdb8 	bl	e2c <A9_PRIV_TIM_ISR>
    1748:	ea00001c 	b	17c0 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    174c:	ebfffdb7 	bl	e30 <HPS_GPIO1_ISR>
    1750:	ea00001a 	b	17c0 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1754:	ebfffdb6 	bl	e34 <HPS_TIM0_ISR>
    1758:	ea000018 	b	17c0 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    175c:	ebfffdbc 	bl	e54 <HPS_TIM1_ISR>
    1760:	ea000016 	b	17c0 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1764:	ebfffdbb 	bl	e58 <HPS_TIM2_ISR>
    1768:	ea000014 	b	17c0 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    176c:	ebfffdba 	bl	e5c <HPS_TIM3_ISR>
    1770:	ea000012 	b	17c0 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1774:	ebfffdb9 	bl	e60 <FPGA_INTERVAL_TIM_ISR>
    1778:	ea000010 	b	17c0 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    177c:	ebfffdb8 	bl	e64 <FPGA_PB_KEYS_ISR>
    1780:	ea00000e 	b	17c0 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1784:	ebfffdbd 	bl	e80 <FPGA_Audio_ISR>
    1788:	ea00000c 	b	17c0 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    178c:	ebfffdbc 	bl	e84 <FPGA_PS2_ISR>
    1790:	ea00000a 	b	17c0 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1794:	ebfffdbb 	bl	e88 <FPGA_JTAG_ISR>
    1798:	ea000008 	b	17c0 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    179c:	ebfffdba 	bl	e8c <FPGA_IrDA_ISR>
    17a0:	ea000006 	b	17c0 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    17a4:	ebfffdb9 	bl	e90 <FPGA_JP1_ISR>
    17a8:	ea000004 	b	17c0 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    17ac:	ebfffdb8 	bl	e94 <FPGA_JP2_ISR>
    17b0:	ea000002 	b	17c0 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    17b4:	ebfffdb7 	bl	e98 <FPGA_PS2_DUAL_ISR>
    17b8:	ea000000 	b	17c0 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    17bc:	eafffffe 	b	17bc <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    17c0:	e30c3110 	movw	r3, #49424	; 0xc110
    17c4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    17c8:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    17cc:	e5832000 	str	r2, [r3]
}
    17d0:	e24bd018 	sub	sp, r11, #24
    17d4:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000017d8 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    17d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17dc:	e28db000 	add	r11, sp, #0
	while(1);
    17e0:	eafffffe 	b	17e0 <__cs3_reset+0x8>

000017e4 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    17e4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17e8:	e28db000 	add	r11, sp, #0
	while(1);
    17ec:	eafffffe 	b	17ec <__cs3_isr_undef+0x8>

000017f0 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    17f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17f4:	e28db000 	add	r11, sp, #0
	while(1);
    17f8:	eafffffe 	b	17f8 <__cs3_isr_swi+0x8>

000017fc <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    17fc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1800:	e28db000 	add	r11, sp, #0
	while(1);
    1804:	eafffffe 	b	1804 <__cs3_isr_pabort+0x8>

00001808 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    1808:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    180c:	e28db000 	add	r11, sp, #0
	while(1);
    1810:	eafffffe 	b	1810 <__cs3_isr_dabort+0x8>

00001814 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1814:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1818:	e28db000 	add	r11, sp, #0
	while(1);
    181c:	eafffffe 	b	181c <__cs3_isr_fiq+0x8>

00001820 <fix_bug>:
}

void fix_bug() {
    1820:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1824:	e28db000 	add	r11, sp, #0
    1828:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    182c:	e30d3198 	movw	r3, #53656	; 0xd198
    1830:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1834:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    1838:	e51b3008 	ldr	r3, [r11, #-8]
    183c:	e3a02703 	mov	r2, #786432	; 0xc0000
    1840:	e5832000 	str	r2, [r3]
}
    1844:	e28bd000 	add	sp, r11, #0
    1848:	e8bd0800 	ldmfd	sp!, {r11}
    184c:	e12fff1e 	bx	lr

00001850 <int_setup>:

void int_setup(int len, int* IDs) {
    1850:	e92d4800 	push	{r11, lr}
    1854:	e28db004 	add	r11, sp, #4
    1858:	e24dd008 	sub	sp, sp, #8
    185c:	e50b0008 	str	r0, [r11, #-8]
    1860:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1864:	ebffff0e 	bl	14a4 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1868:	ebffff21 	bl	14f4 <set_A9_IRQ_stack>
	fix_bug();
    186c:	ebffffeb 	bl	1820 <fix_bug>
	config_GIC(len, IDs);
    1870:	e51b0008 	ldr	r0, [r11, #-8]
    1874:	e51b100c 	ldr	r1, [r11, #-12]
    1878:	ebffff5b 	bl	15ec <config_GIC>
	enable_A9_interrupts();
    187c:	ebffff12 	bl	14cc <enable_A9_interrupts>
}
    1880:	e24bd004 	sub	sp, r11, #4
    1884:	e8bd8800 	pop	{r11, pc}

00001888 <__aeabi_drsub>:
    1888:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    188c:	ea000000 	b	1894 <__adddf3>

00001890 <__aeabi_dsub>:
    1890:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001894 <__adddf3>:
    1894:	e92d4030 	push	{r4, r5, lr}
    1898:	e1a04081 	lsl	r4, r1, #1
    189c:	e1a05083 	lsl	r5, r3, #1
    18a0:	e1340005 	teq	r4, r5
    18a4:	01300002 	teqeq	r0, r2
    18a8:	1194c000 	orrsne	r12, r4, r0
    18ac:	1195c002 	orrsne	r12, r5, r2
    18b0:	11f0cac4 	mvnsne	r12, r4, asr #21
    18b4:	11f0cac5 	mvnsne	r12, r5, asr #21
    18b8:	0a00008c 	beq	1af0 <__adddf3+0x25c>
    18bc:	e1a04aa4 	lsr	r4, r4, #21
    18c0:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    18c4:	b2655000 	rsblt	r5, r5, #0
    18c8:	da000006 	ble	18e8 <__adddf3+0x54>
    18cc:	e0844005 	add	r4, r4, r5
    18d0:	e0202002 	eor	r2, r0, r2
    18d4:	e0213003 	eor	r3, r1, r3
    18d8:	e0220000 	eor	r0, r2, r0
    18dc:	e0231001 	eor	r1, r3, r1
    18e0:	e0202002 	eor	r2, r0, r2
    18e4:	e0213003 	eor	r3, r1, r3
    18e8:	e3550036 	cmp	r5, #54	; 0x36
    18ec:	88bd4030 	pophi	{r4, r5, lr}
    18f0:	812fff1e 	bxhi	lr
    18f4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    18f8:	e1a01601 	lsl	r1, r1, #12
    18fc:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1900:	e18c1621 	orr	r1, r12, r1, lsr #12
    1904:	0a000001 	beq	1910 <__adddf3+0x7c>
    1908:	e2700000 	rsbs	r0, r0, #0
    190c:	e2e11000 	rsc	r1, r1, #0
    1910:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1914:	e1a03603 	lsl	r3, r3, #12
    1918:	e18c3623 	orr	r3, r12, r3, lsr #12
    191c:	0a000001 	beq	1928 <__adddf3+0x94>
    1920:	e2722000 	rsbs	r2, r2, #0
    1924:	e2e33000 	rsc	r3, r3, #0
    1928:	e1340005 	teq	r4, r5
    192c:	0a000069 	beq	1ad8 <__adddf3+0x244>
    1930:	e2444001 	sub	r4, r4, #1
    1934:	e275e020 	rsbs	lr, r5, #32
    1938:	ba000005 	blt	1954 <__adddf3+0xc0>
    193c:	e1a0ce12 	lsl	r12, r2, lr
    1940:	e0900532 	adds	r0, r0, r2, lsr r5
    1944:	e2a11000 	adc	r1, r1, #0
    1948:	e0900e13 	adds	r0, r0, r3, lsl lr
    194c:	e0b11553 	adcs	r1, r1, r3, asr r5
    1950:	ea000006 	b	1970 <__adddf3+0xdc>
    1954:	e2455020 	sub	r5, r5, #32
    1958:	e28ee020 	add	lr, lr, #32
    195c:	e3520001 	cmp	r2, #1
    1960:	e1a0ce13 	lsl	r12, r3, lr
    1964:	238cc002 	orrcs	r12, r12, #2
    1968:	e0900553 	adds	r0, r0, r3, asr r5
    196c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1970:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1974:	5a000002 	bpl	1984 <__adddf3+0xf0>
    1978:	e27cc000 	rsbs	r12, r12, #0
    197c:	e2f00000 	rscs	r0, r0, #0
    1980:	e2e11000 	rsc	r1, r1, #0
    1984:	e3510601 	cmp	r1, #1048576	; 0x100000
    1988:	3a00000f 	bcc	19cc <__adddf3+0x138>
    198c:	e3510602 	cmp	r1, #2097152	; 0x200000
    1990:	3a000006 	bcc	19b0 <__adddf3+0x11c>
    1994:	e1b010a1 	lsrs	r1, r1, #1
    1998:	e1b00060 	rrxs	r0, r0
    199c:	e1a0c06c 	rrx	r12, r12
    19a0:	e2844001 	add	r4, r4, #1
    19a4:	e1a02a84 	lsl	r2, r4, #21
    19a8:	e3720501 	cmn	r2, #4194304	; 0x400000
    19ac:	2a00006b 	bcs	1b60 <__adddf3+0x2cc>
    19b0:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    19b4:	01b0c0a0 	lsrseq	r12, r0, #1
    19b8:	e2b00000 	adcs	r0, r0, #0
    19bc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    19c0:	e1811005 	orr	r1, r1, r5
    19c4:	e8bd4030 	pop	{r4, r5, lr}
    19c8:	e12fff1e 	bx	lr
    19cc:	e1b0c08c 	lsls	r12, r12, #1
    19d0:	e0b00000 	adcs	r0, r0, r0
    19d4:	e0a11001 	adc	r1, r1, r1
    19d8:	e3110601 	tst	r1, #1048576	; 0x100000
    19dc:	e2444001 	sub	r4, r4, #1
    19e0:	1afffff2 	bne	19b0 <__adddf3+0x11c>
    19e4:	e3310000 	teq	r1, #0
    19e8:	13a03014 	movne	r3, #20
    19ec:	03a03034 	moveq	r3, #52	; 0x34
    19f0:	01a01000 	moveq	r1, r0
    19f4:	03a00000 	moveq	r0, #0
    19f8:	e1a02001 	mov	r2, r1
    19fc:	e3520801 	cmp	r2, #65536	; 0x10000
    1a00:	21a02822 	lsrcs	r2, r2, #16
    1a04:	22433010 	subcs	r3, r3, #16
    1a08:	e3520c01 	cmp	r2, #256	; 0x100
    1a0c:	21a02422 	lsrcs	r2, r2, #8
    1a10:	22433008 	subcs	r3, r3, #8
    1a14:	e3520010 	cmp	r2, #16
    1a18:	21a02222 	lsrcs	r2, r2, #4
    1a1c:	22433004 	subcs	r3, r3, #4
    1a20:	e3520004 	cmp	r2, #4
    1a24:	22433002 	subcs	r3, r3, #2
    1a28:	304330a2 	subcc	r3, r3, r2, lsr #1
    1a2c:	e04331a2 	sub	r3, r3, r2, lsr #3
    1a30:	e2532020 	subs	r2, r3, #32
    1a34:	aa000007 	bge	1a58 <__adddf3+0x1c4>
    1a38:	e292200c 	adds	r2, r2, #12
    1a3c:	da000004 	ble	1a54 <__adddf3+0x1c0>
    1a40:	e282c014 	add	r12, r2, #20
    1a44:	e262200c 	rsb	r2, r2, #12
    1a48:	e1a00c11 	lsl	r0, r1, r12
    1a4c:	e1a01231 	lsr	r1, r1, r2
    1a50:	ea000004 	b	1a68 <__adddf3+0x1d4>
    1a54:	e2822014 	add	r2, r2, #20
    1a58:	d262c020 	rsble	r12, r2, #32
    1a5c:	e1a01211 	lsl	r1, r1, r2
    1a60:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1a64:	d1a00210 	lslle	r0, r0, r2
    1a68:	e0544003 	subs	r4, r4, r3
    1a6c:	a0811a04 	addge	r1, r1, r4, lsl #20
    1a70:	a1811005 	orrge	r1, r1, r5
    1a74:	a8bd4030 	popge	{r4, r5, lr}
    1a78:	a12fff1e 	bxge	lr
    1a7c:	e1e04004 	mvn	r4, r4
    1a80:	e254401f 	subs	r4, r4, #31
    1a84:	aa00000f 	bge	1ac8 <__adddf3+0x234>
    1a88:	e294400c 	adds	r4, r4, #12
    1a8c:	ca000006 	bgt	1aac <__adddf3+0x218>
    1a90:	e2844014 	add	r4, r4, #20
    1a94:	e2642020 	rsb	r2, r4, #32
    1a98:	e1a00430 	lsr	r0, r0, r4
    1a9c:	e1800211 	orr	r0, r0, r1, lsl r2
    1aa0:	e1851431 	orr	r1, r5, r1, lsr r4
    1aa4:	e8bd4030 	pop	{r4, r5, lr}
    1aa8:	e12fff1e 	bx	lr
    1aac:	e264400c 	rsb	r4, r4, #12
    1ab0:	e2642020 	rsb	r2, r4, #32
    1ab4:	e1a00230 	lsr	r0, r0, r2
    1ab8:	e1800411 	orr	r0, r0, r1, lsl r4
    1abc:	e1a01005 	mov	r1, r5
    1ac0:	e8bd4030 	pop	{r4, r5, lr}
    1ac4:	e12fff1e 	bx	lr
    1ac8:	e1a00431 	lsr	r0, r1, r4
    1acc:	e1a01005 	mov	r1, r5
    1ad0:	e8bd4030 	pop	{r4, r5, lr}
    1ad4:	e12fff1e 	bx	lr
    1ad8:	e3340000 	teq	r4, #0
    1adc:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1ae0:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1ae4:	02844001 	addeq	r4, r4, #1
    1ae8:	12455001 	subne	r5, r5, #1
    1aec:	eaffff8f 	b	1930 <__adddf3+0x9c>
    1af0:	e1f0cac4 	mvns	r12, r4, asr #21
    1af4:	11f0cac5 	mvnsne	r12, r5, asr #21
    1af8:	0a00001d 	beq	1b74 <__adddf3+0x2e0>
    1afc:	e1340005 	teq	r4, r5
    1b00:	01300002 	teqeq	r0, r2
    1b04:	0a000004 	beq	1b1c <__adddf3+0x288>
    1b08:	e194c000 	orrs	r12, r4, r0
    1b0c:	01a01003 	moveq	r1, r3
    1b10:	01a00002 	moveq	r0, r2
    1b14:	e8bd4030 	pop	{r4, r5, lr}
    1b18:	e12fff1e 	bx	lr
    1b1c:	e1310003 	teq	r1, r3
    1b20:	13a01000 	movne	r1, #0
    1b24:	13a00000 	movne	r0, #0
    1b28:	18bd4030 	popne	{r4, r5, lr}
    1b2c:	112fff1e 	bxne	lr
    1b30:	e1b0caa4 	lsrs	r12, r4, #21
    1b34:	1a000004 	bne	1b4c <__adddf3+0x2b8>
    1b38:	e1b00080 	lsls	r0, r0, #1
    1b3c:	e0b11001 	adcs	r1, r1, r1
    1b40:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1b44:	e8bd4030 	pop	{r4, r5, lr}
    1b48:	e12fff1e 	bx	lr
    1b4c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1b50:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1b54:	38bd4030 	popcc	{r4, r5, lr}
    1b58:	312fff1e 	bxcc	lr
    1b5c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1b60:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1b64:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1b68:	e3a00000 	mov	r0, #0
    1b6c:	e8bd4030 	pop	{r4, r5, lr}
    1b70:	e12fff1e 	bx	lr
    1b74:	e1f0cac4 	mvns	r12, r4, asr #21
    1b78:	11a01003 	movne	r1, r3
    1b7c:	11a00002 	movne	r0, r2
    1b80:	01f0cac5 	mvnseq	r12, r5, asr #21
    1b84:	11a03001 	movne	r3, r1
    1b88:	11a02000 	movne	r2, r0
    1b8c:	e1904601 	orrs	r4, r0, r1, lsl #12
    1b90:	01925603 	orrseq	r5, r2, r3, lsl #12
    1b94:	01310003 	teqeq	r1, r3
    1b98:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1b9c:	e8bd4030 	pop	{r4, r5, lr}
    1ba0:	e12fff1e 	bx	lr

00001ba4 <__aeabi_ui2d>:
    1ba4:	e3300000 	teq	r0, #0
    1ba8:	03a01000 	moveq	r1, #0
    1bac:	012fff1e 	bxeq	lr
    1bb0:	e92d4030 	push	{r4, r5, lr}
    1bb4:	e3a04b01 	mov	r4, #1024	; 0x400
    1bb8:	e2844032 	add	r4, r4, #50	; 0x32
    1bbc:	e3a05000 	mov	r5, #0
    1bc0:	e3a01000 	mov	r1, #0
    1bc4:	eaffff86 	b	19e4 <__adddf3+0x150>

00001bc8 <__aeabi_i2d>:
    1bc8:	e3300000 	teq	r0, #0
    1bcc:	03a01000 	moveq	r1, #0
    1bd0:	012fff1e 	bxeq	lr
    1bd4:	e92d4030 	push	{r4, r5, lr}
    1bd8:	e3a04b01 	mov	r4, #1024	; 0x400
    1bdc:	e2844032 	add	r4, r4, #50	; 0x32
    1be0:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1be4:	42600000 	rsbmi	r0, r0, #0
    1be8:	e3a01000 	mov	r1, #0
    1bec:	eaffff7c 	b	19e4 <__adddf3+0x150>

00001bf0 <__aeabi_f2d>:
    1bf0:	e1b02080 	lsls	r2, r0, #1
    1bf4:	e1a011c2 	asr	r1, r2, #3
    1bf8:	e1a01061 	rrx	r1, r1
    1bfc:	e1a00e02 	lsl	r0, r2, #28
    1c00:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1c04:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1c08:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1c0c:	112fff1e 	bxne	lr
    1c10:	e3320000 	teq	r2, #0
    1c14:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1c18:	012fff1e 	bxeq	lr
    1c1c:	e92d4030 	push	{r4, r5, lr}
    1c20:	e3a04d0e 	mov	r4, #896	; 0x380
    1c24:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1c28:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1c2c:	eaffff6c 	b	19e4 <__adddf3+0x150>

00001c30 <__aeabi_ul2d>:
    1c30:	e1902001 	orrs	r2, r0, r1
    1c34:	012fff1e 	bxeq	lr
    1c38:	e92d4030 	push	{r4, r5, lr}
    1c3c:	e3a05000 	mov	r5, #0
    1c40:	ea000006 	b	1c60 <__aeabi_l2d+0x1c>

00001c44 <__aeabi_l2d>:
    1c44:	e1902001 	orrs	r2, r0, r1
    1c48:	012fff1e 	bxeq	lr
    1c4c:	e92d4030 	push	{r4, r5, lr}
    1c50:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1c54:	5a000001 	bpl	1c60 <__aeabi_l2d+0x1c>
    1c58:	e2700000 	rsbs	r0, r0, #0
    1c5c:	e2e11000 	rsc	r1, r1, #0
    1c60:	e3a04b01 	mov	r4, #1024	; 0x400
    1c64:	e2844032 	add	r4, r4, #50	; 0x32
    1c68:	e1b0cb21 	lsrs	r12, r1, #22
    1c6c:	0affff44 	beq	1984 <__adddf3+0xf0>
    1c70:	e3a02003 	mov	r2, #3
    1c74:	e1b0c1ac 	lsrs	r12, r12, #3
    1c78:	12822003 	addne	r2, r2, #3
    1c7c:	e1b0c1ac 	lsrs	r12, r12, #3
    1c80:	12822003 	addne	r2, r2, #3
    1c84:	e08221ac 	add	r2, r2, r12, lsr #3
    1c88:	e2623020 	rsb	r3, r2, #32
    1c8c:	e1a0c310 	lsl	r12, r0, r3
    1c90:	e1a00230 	lsr	r0, r0, r2
    1c94:	e1800311 	orr	r0, r0, r1, lsl r3
    1c98:	e1a01231 	lsr	r1, r1, r2
    1c9c:	e0844002 	add	r4, r4, r2
    1ca0:	eaffff37 	b	1984 <__adddf3+0xf0>

00001ca4 <__aeabi_dmul>:
    1ca4:	e92d4070 	push	{r4, r5, r6, lr}
    1ca8:	e3a0c0ff 	mov	r12, #255	; 0xff
    1cac:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1cb0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1cb4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1cb8:	1134000c 	teqne	r4, r12
    1cbc:	1135000c 	teqne	r5, r12
    1cc0:	0b000075 	bleq	1e9c <__aeabi_dmul+0x1f8>
    1cc4:	e0844005 	add	r4, r4, r5
    1cc8:	e0216003 	eor	r6, r1, r3
    1ccc:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1cd0:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1cd4:	e1905601 	orrs	r5, r0, r1, lsl #12
    1cd8:	11925603 	orrsne	r5, r2, r3, lsl #12
    1cdc:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1ce0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1ce4:	0a00001d 	beq	1d60 <__aeabi_dmul+0xbc>
    1ce8:	e08ec290 	umull	r12, lr, r0, r2
    1cec:	e3a05000 	mov	r5, #0
    1cf0:	e0a5e291 	umlal	lr, r5, r1, r2
    1cf4:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1cf8:	e0a5e390 	umlal	lr, r5, r0, r3
    1cfc:	e3a06000 	mov	r6, #0
    1d00:	e0a65391 	umlal	r5, r6, r1, r3
    1d04:	e33c0000 	teq	r12, #0
    1d08:	138ee001 	orrne	lr, lr, #1
    1d0c:	e24440ff 	sub	r4, r4, #255	; 0xff
    1d10:	e3560c02 	cmp	r6, #512	; 0x200
    1d14:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1d18:	2a000002 	bcs	1d28 <__aeabi_dmul+0x84>
    1d1c:	e1b0e08e 	lsls	lr, lr, #1
    1d20:	e0b55005 	adcs	r5, r5, r5
    1d24:	e0a66006 	adc	r6, r6, r6
    1d28:	e1821586 	orr	r1, r2, r6, lsl #11
    1d2c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1d30:	e1a00585 	lsl	r0, r5, #11
    1d34:	e1800aae 	orr	r0, r0, lr, lsr #21
    1d38:	e1a0e58e 	lsl	lr, lr, #11
    1d3c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1d40:	835c0c07 	cmphi	r12, #1792	; 0x700
    1d44:	8a000011 	bhi	1d90 <__aeabi_dmul+0xec>
    1d48:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1d4c:	01b0e0a0 	lsrseq	lr, r0, #1
    1d50:	e2b00000 	adcs	r0, r0, #0
    1d54:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1d58:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d5c:	e12fff1e 	bx	lr
    1d60:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1d64:	e1861001 	orr	r1, r6, r1
    1d68:	e1800002 	orr	r0, r0, r2
    1d6c:	e0211003 	eor	r1, r1, r3
    1d70:	e05440ac 	subs	r4, r4, r12, lsr #1
    1d74:	c074500c 	rsbsgt	r5, r4, r12
    1d78:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1d7c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1d80:	c12fff1e 	bxgt	lr
    1d84:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1d88:	e3a0e000 	mov	lr, #0
    1d8c:	e2544001 	subs	r4, r4, #1
    1d90:	ca00005d 	bgt	1f0c <__aeabi_dmul+0x268>
    1d94:	e3740036 	cmn	r4, #54	; 0x36
    1d98:	d3a00000 	movle	r0, #0
    1d9c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1da0:	d8bd4070 	pople	{r4, r5, r6, lr}
    1da4:	d12fff1e 	bxle	lr
    1da8:	e2644000 	rsb	r4, r4, #0
    1dac:	e2544020 	subs	r4, r4, #32
    1db0:	aa00001a 	bge	1e20 <__aeabi_dmul+0x17c>
    1db4:	e294400c 	adds	r4, r4, #12
    1db8:	ca00000c 	bgt	1df0 <__aeabi_dmul+0x14c>
    1dbc:	e2844014 	add	r4, r4, #20
    1dc0:	e2645020 	rsb	r5, r4, #32
    1dc4:	e1a03510 	lsl	r3, r0, r5
    1dc8:	e1a00430 	lsr	r0, r0, r4
    1dcc:	e1800511 	orr	r0, r0, r1, lsl r5
    1dd0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1dd4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1dd8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1ddc:	e0a21431 	adc	r1, r2, r1, lsr r4
    1de0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1de4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1de8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1dec:	e12fff1e 	bx	lr
    1df0:	e264400c 	rsb	r4, r4, #12
    1df4:	e2645020 	rsb	r5, r4, #32
    1df8:	e1a03410 	lsl	r3, r0, r4
    1dfc:	e1a00530 	lsr	r0, r0, r5
    1e00:	e1800411 	orr	r0, r0, r1, lsl r4
    1e04:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1e08:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1e0c:	e2a11000 	adc	r1, r1, #0
    1e10:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1e14:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1e18:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e1c:	e12fff1e 	bx	lr
    1e20:	e2645020 	rsb	r5, r4, #32
    1e24:	e18ee510 	orr	lr, lr, r0, lsl r5
    1e28:	e1a03430 	lsr	r3, r0, r4
    1e2c:	e1833511 	orr	r3, r3, r1, lsl r5
    1e30:	e1a00431 	lsr	r0, r1, r4
    1e34:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1e38:	e1c00431 	bic	r0, r0, r1, lsr r4
    1e3c:	e0800fa3 	add	r0, r0, r3, lsr #31
    1e40:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1e44:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1e48:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e4c:	e12fff1e 	bx	lr
    1e50:	e3340000 	teq	r4, #0
    1e54:	1a000008 	bne	1e7c <__aeabi_dmul+0x1d8>
    1e58:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1e5c:	e1b00080 	lsls	r0, r0, #1
    1e60:	e0a11001 	adc	r1, r1, r1
    1e64:	e3110601 	tst	r1, #1048576	; 0x100000
    1e68:	02444001 	subeq	r4, r4, #1
    1e6c:	0afffffa 	beq	1e5c <__aeabi_dmul+0x1b8>
    1e70:	e1811006 	orr	r1, r1, r6
    1e74:	e3350000 	teq	r5, #0
    1e78:	112fff1e 	bxne	lr
    1e7c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1e80:	e1b02082 	lsls	r2, r2, #1
    1e84:	e0a33003 	adc	r3, r3, r3
    1e88:	e3130601 	tst	r3, #1048576	; 0x100000
    1e8c:	02455001 	subeq	r5, r5, #1
    1e90:	0afffffa 	beq	1e80 <__aeabi_dmul+0x1dc>
    1e94:	e1833006 	orr	r3, r3, r6
    1e98:	e12fff1e 	bx	lr
    1e9c:	e134000c 	teq	r4, r12
    1ea0:	e00c5a23 	and	r5, r12, r3, lsr #20
    1ea4:	1135000c 	teqne	r5, r12
    1ea8:	0a000007 	beq	1ecc <__aeabi_dmul+0x228>
    1eac:	e1906081 	orrs	r6, r0, r1, lsl #1
    1eb0:	11926083 	orrsne	r6, r2, r3, lsl #1
    1eb4:	1affffe5 	bne	1e50 <__aeabi_dmul+0x1ac>
    1eb8:	e0211003 	eor	r1, r1, r3
    1ebc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1ec0:	e3a00000 	mov	r0, #0
    1ec4:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ec8:	e12fff1e 	bx	lr
    1ecc:	e1906081 	orrs	r6, r0, r1, lsl #1
    1ed0:	01a00002 	moveq	r0, r2
    1ed4:	01a01003 	moveq	r1, r3
    1ed8:	11926083 	orrsne	r6, r2, r3, lsl #1
    1edc:	0a000010 	beq	1f24 <__aeabi_dmul+0x280>
    1ee0:	e134000c 	teq	r4, r12
    1ee4:	1a000001 	bne	1ef0 <__aeabi_dmul+0x24c>
    1ee8:	e1906601 	orrs	r6, r0, r1, lsl #12
    1eec:	1a00000c 	bne	1f24 <__aeabi_dmul+0x280>
    1ef0:	e135000c 	teq	r5, r12
    1ef4:	1a000003 	bne	1f08 <__aeabi_dmul+0x264>
    1ef8:	e1926603 	orrs	r6, r2, r3, lsl #12
    1efc:	11a00002 	movne	r0, r2
    1f00:	11a01003 	movne	r1, r3
    1f04:	1a000006 	bne	1f24 <__aeabi_dmul+0x280>
    1f08:	e0211003 	eor	r1, r1, r3
    1f0c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1f10:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1f14:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1f18:	e3a00000 	mov	r0, #0
    1f1c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f20:	e12fff1e 	bx	lr
    1f24:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1f28:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1f2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f30:	e12fff1e 	bx	lr

00001f34 <__aeabi_ddiv>:
    1f34:	e92d4070 	push	{r4, r5, r6, lr}
    1f38:	e3a0c0ff 	mov	r12, #255	; 0xff
    1f3c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1f40:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1f44:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1f48:	1134000c 	teqne	r4, r12
    1f4c:	1135000c 	teqne	r5, r12
    1f50:	0b00005e 	bleq	20d0 <__aeabi_ddiv+0x19c>
    1f54:	e0444005 	sub	r4, r4, r5
    1f58:	e021e003 	eor	lr, r1, r3
    1f5c:	e1925603 	orrs	r5, r2, r3, lsl #12
    1f60:	e1a01601 	lsl	r1, r1, #12
    1f64:	0a00004c 	beq	209c <__aeabi_ddiv+0x168>
    1f68:	e1a03603 	lsl	r3, r3, #12
    1f6c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1f70:	e1853223 	orr	r3, r5, r3, lsr #4
    1f74:	e1833c22 	orr	r3, r3, r2, lsr #24
    1f78:	e1a02402 	lsl	r2, r2, #8
    1f7c:	e1855221 	orr	r5, r5, r1, lsr #4
    1f80:	e1855c20 	orr	r5, r5, r0, lsr #24
    1f84:	e1a06400 	lsl	r6, r0, #8
    1f88:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1f8c:	e1550003 	cmp	r5, r3
    1f90:	01560002 	cmpeq	r6, r2
    1f94:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1f98:	e2844c03 	add	r4, r4, #768	; 0x300
    1f9c:	2a000001 	bcs	1fa8 <__aeabi_ddiv+0x74>
    1fa0:	e1b030a3 	lsrs	r3, r3, #1
    1fa4:	e1a02062 	rrx	r2, r2
    1fa8:	e0566002 	subs	r6, r6, r2
    1fac:	e0c55003 	sbc	r5, r5, r3
    1fb0:	e1b030a3 	lsrs	r3, r3, #1
    1fb4:	e1a02062 	rrx	r2, r2
    1fb8:	e3a00601 	mov	r0, #1048576	; 0x100000
    1fbc:	e3a0c702 	mov	r12, #524288	; 0x80000
    1fc0:	e056e002 	subs	lr, r6, r2
    1fc4:	e0d5e003 	sbcs	lr, r5, r3
    1fc8:	20466002 	subcs	r6, r6, r2
    1fcc:	21a0500e 	movcs	r5, lr
    1fd0:	2180000c 	orrcs	r0, r0, r12
    1fd4:	e1b030a3 	lsrs	r3, r3, #1
    1fd8:	e1a02062 	rrx	r2, r2
    1fdc:	e056e002 	subs	lr, r6, r2
    1fe0:	e0d5e003 	sbcs	lr, r5, r3
    1fe4:	20466002 	subcs	r6, r6, r2
    1fe8:	21a0500e 	movcs	r5, lr
    1fec:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1ff0:	e1b030a3 	lsrs	r3, r3, #1
    1ff4:	e1a02062 	rrx	r2, r2
    1ff8:	e056e002 	subs	lr, r6, r2
    1ffc:	e0d5e003 	sbcs	lr, r5, r3
    2000:	20466002 	subcs	r6, r6, r2
    2004:	21a0500e 	movcs	r5, lr
    2008:	2180012c 	orrcs	r0, r0, r12, lsr #2
    200c:	e1b030a3 	lsrs	r3, r3, #1
    2010:	e1a02062 	rrx	r2, r2
    2014:	e056e002 	subs	lr, r6, r2
    2018:	e0d5e003 	sbcs	lr, r5, r3
    201c:	20466002 	subcs	r6, r6, r2
    2020:	21a0500e 	movcs	r5, lr
    2024:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2028:	e195e006 	orrs	lr, r5, r6
    202c:	0a00000d 	beq	2068 <__aeabi_ddiv+0x134>
    2030:	e1a05205 	lsl	r5, r5, #4
    2034:	e1855e26 	orr	r5, r5, r6, lsr #28
    2038:	e1a06206 	lsl	r6, r6, #4
    203c:	e1a03183 	lsl	r3, r3, #3
    2040:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2044:	e1a02182 	lsl	r2, r2, #3
    2048:	e1b0c22c 	lsrs	r12, r12, #4
    204c:	1affffdb 	bne	1fc0 <__aeabi_ddiv+0x8c>
    2050:	e3110601 	tst	r1, #1048576	; 0x100000
    2054:	1a000006 	bne	2074 <__aeabi_ddiv+0x140>
    2058:	e1811000 	orr	r1, r1, r0
    205c:	e3a00000 	mov	r0, #0
    2060:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2064:	eaffffd5 	b	1fc0 <__aeabi_ddiv+0x8c>
    2068:	e3110601 	tst	r1, #1048576	; 0x100000
    206c:	01811000 	orreq	r1, r1, r0
    2070:	03a00000 	moveq	r0, #0
    2074:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2078:	835c0c07 	cmphi	r12, #1792	; 0x700
    207c:	8affff43 	bhi	1d90 <__aeabi_dmul+0xec>
    2080:	e055c003 	subs	r12, r5, r3
    2084:	0056c002 	subseq	r12, r6, r2
    2088:	01b0c0a0 	lsrseq	r12, r0, #1
    208c:	e2b00000 	adcs	r0, r0, #0
    2090:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2094:	e8bd4070 	pop	{r4, r5, r6, lr}
    2098:	e12fff1e 	bx	lr
    209c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    20a0:	e18e1621 	orr	r1, lr, r1, lsr #12
    20a4:	e09440ac 	adds	r4, r4, r12, lsr #1
    20a8:	c074500c 	rsbsgt	r5, r4, r12
    20ac:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    20b0:	c8bd4070 	popgt	{r4, r5, r6, lr}
    20b4:	c12fff1e 	bxgt	lr
    20b8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    20bc:	e3a0e000 	mov	lr, #0
    20c0:	e2544001 	subs	r4, r4, #1
    20c4:	eaffff31 	b	1d90 <__aeabi_dmul+0xec>
    20c8:	e185e006 	orr	lr, r5, r6
    20cc:	eaffff2f 	b	1d90 <__aeabi_dmul+0xec>
    20d0:	e00c5a23 	and	r5, r12, r3, lsr #20
    20d4:	e134000c 	teq	r4, r12
    20d8:	0135000c 	teqeq	r5, r12
    20dc:	0affff90 	beq	1f24 <__aeabi_dmul+0x280>
    20e0:	e134000c 	teq	r4, r12
    20e4:	1a000006 	bne	2104 <__aeabi_ddiv+0x1d0>
    20e8:	e1904601 	orrs	r4, r0, r1, lsl #12
    20ec:	1affff8c 	bne	1f24 <__aeabi_dmul+0x280>
    20f0:	e135000c 	teq	r5, r12
    20f4:	1affff83 	bne	1f08 <__aeabi_dmul+0x264>
    20f8:	e1a00002 	mov	r0, r2
    20fc:	e1a01003 	mov	r1, r3
    2100:	eaffff87 	b	1f24 <__aeabi_dmul+0x280>
    2104:	e135000c 	teq	r5, r12
    2108:	1a000004 	bne	2120 <__aeabi_ddiv+0x1ec>
    210c:	e1925603 	orrs	r5, r2, r3, lsl #12
    2110:	0affff68 	beq	1eb8 <__aeabi_dmul+0x214>
    2114:	e1a00002 	mov	r0, r2
    2118:	e1a01003 	mov	r1, r3
    211c:	eaffff80 	b	1f24 <__aeabi_dmul+0x280>
    2120:	e1906081 	orrs	r6, r0, r1, lsl #1
    2124:	11926083 	orrsne	r6, r2, r3, lsl #1
    2128:	1affff48 	bne	1e50 <__aeabi_dmul+0x1ac>
    212c:	e1904081 	orrs	r4, r0, r1, lsl #1
    2130:	1affff74 	bne	1f08 <__aeabi_dmul+0x264>
    2134:	e1925083 	orrs	r5, r2, r3, lsl #1
    2138:	1affff5e 	bne	1eb8 <__aeabi_dmul+0x214>
    213c:	eaffff78 	b	1f24 <__aeabi_dmul+0x280>

00002140 <__gedf2>:
    2140:	e3e0c000 	mvn	r12, #0
    2144:	ea000002 	b	2154 <__cmpdf2+0x4>

00002148 <__ledf2>:
    2148:	e3a0c001 	mov	r12, #1
    214c:	ea000000 	b	2154 <__cmpdf2+0x4>

00002150 <__cmpdf2>:
    2150:	e3a0c001 	mov	r12, #1
    2154:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    2158:	e1a0c081 	lsl	r12, r1, #1
    215c:	e1f0cacc 	mvns	r12, r12, asr #21
    2160:	e1a0c083 	lsl	r12, r3, #1
    2164:	11f0cacc 	mvnsne	r12, r12, asr #21
    2168:	0a00000e 	beq	21a8 <__cmpdf2+0x58>
    216c:	e28dd004 	add	sp, sp, #4
    2170:	e190c081 	orrs	r12, r0, r1, lsl #1
    2174:	0192c083 	orrseq	r12, r2, r3, lsl #1
    2178:	11310003 	teqne	r1, r3
    217c:	01300002 	teqeq	r0, r2
    2180:	03a00000 	moveq	r0, #0
    2184:	012fff1e 	bxeq	lr
    2188:	e3700000 	cmn	r0, #0
    218c:	e1310003 	teq	r1, r3
    2190:	51510003 	cmppl	r1, r3
    2194:	01500002 	cmpeq	r0, r2
    2198:	21a00fc3 	asrcs	r0, r3, #31
    219c:	31e00fc3 	mvncc	r0, r3, asr #31
    21a0:	e3800001 	orr	r0, r0, #1
    21a4:	e12fff1e 	bx	lr
    21a8:	e1a0c081 	lsl	r12, r1, #1
    21ac:	e1f0cacc 	mvns	r12, r12, asr #21
    21b0:	1a000001 	bne	21bc <__cmpdf2+0x6c>
    21b4:	e190c601 	orrs	r12, r0, r1, lsl #12
    21b8:	1a000004 	bne	21d0 <__cmpdf2+0x80>
    21bc:	e1a0c083 	lsl	r12, r3, #1
    21c0:	e1f0cacc 	mvns	r12, r12, asr #21
    21c4:	1affffe8 	bne	216c <__cmpdf2+0x1c>
    21c8:	e192c603 	orrs	r12, r2, r3, lsl #12
    21cc:	0affffe6 	beq	216c <__cmpdf2+0x1c>
    21d0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    21d4:	e12fff1e 	bx	lr

000021d8 <__aeabi_cdrcmple>:
    21d8:	e1a0c000 	mov	r12, r0
    21dc:	e1a00002 	mov	r0, r2
    21e0:	e1a0200c 	mov	r2, r12
    21e4:	e1a0c001 	mov	r12, r1
    21e8:	e1a01003 	mov	r1, r3
    21ec:	e1a0300c 	mov	r3, r12
    21f0:	eaffffff 	b	21f4 <__aeabi_cdcmpeq>

000021f4 <__aeabi_cdcmpeq>:
    21f4:	e92d4001 	push	{r0, lr}
    21f8:	ebffffd4 	bl	2150 <__cmpdf2>
    21fc:	e3500000 	cmp	r0, #0
    2200:	43700000 	cmnmi	r0, #0
    2204:	e8bd4001 	pop	{r0, lr}
    2208:	e12fff1e 	bx	lr

0000220c <__aeabi_dcmpeq>:
    220c:	e52de008 	str	lr, [sp, #-8]!
    2210:	ebfffff7 	bl	21f4 <__aeabi_cdcmpeq>
    2214:	03a00001 	moveq	r0, #1
    2218:	13a00000 	movne	r0, #0
    221c:	e49de008 	ldr	lr, [sp], #8
    2220:	e12fff1e 	bx	lr

00002224 <__aeabi_dcmplt>:
    2224:	e52de008 	str	lr, [sp, #-8]!
    2228:	ebfffff1 	bl	21f4 <__aeabi_cdcmpeq>
    222c:	33a00001 	movcc	r0, #1
    2230:	23a00000 	movcs	r0, #0
    2234:	e49de008 	ldr	lr, [sp], #8
    2238:	e12fff1e 	bx	lr

0000223c <__aeabi_dcmple>:
    223c:	e52de008 	str	lr, [sp, #-8]!
    2240:	ebffffeb 	bl	21f4 <__aeabi_cdcmpeq>
    2244:	93a00001 	movls	r0, #1
    2248:	83a00000 	movhi	r0, #0
    224c:	e49de008 	ldr	lr, [sp], #8
    2250:	e12fff1e 	bx	lr

00002254 <__aeabi_dcmpge>:
    2254:	e52de008 	str	lr, [sp, #-8]!
    2258:	ebffffde 	bl	21d8 <__aeabi_cdrcmple>
    225c:	93a00001 	movls	r0, #1
    2260:	83a00000 	movhi	r0, #0
    2264:	e49de008 	ldr	lr, [sp], #8
    2268:	e12fff1e 	bx	lr

0000226c <__aeabi_dcmpgt>:
    226c:	e52de008 	str	lr, [sp, #-8]!
    2270:	ebffffd8 	bl	21d8 <__aeabi_cdrcmple>
    2274:	33a00001 	movcc	r0, #1
    2278:	23a00000 	movcs	r0, #0
    227c:	e49de008 	ldr	lr, [sp], #8
    2280:	e12fff1e 	bx	lr

00002284 <__aeabi_d2iz>:
    2284:	e1a02081 	lsl	r2, r1, #1
    2288:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    228c:	2a00000c 	bcs	22c4 <__aeabi_d2iz+0x40>
    2290:	5a000009 	bpl	22bc <__aeabi_d2iz+0x38>
    2294:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2298:	e0532ac2 	subs	r2, r3, r2, asr #21
    229c:	9a00000a 	bls	22cc <__aeabi_d2iz+0x48>
    22a0:	e1a03581 	lsl	r3, r1, #11
    22a4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    22a8:	e1833aa0 	orr	r3, r3, r0, lsr #21
    22ac:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    22b0:	e1a00233 	lsr	r0, r3, r2
    22b4:	12600000 	rsbne	r0, r0, #0
    22b8:	e12fff1e 	bx	lr
    22bc:	e3a00000 	mov	r0, #0
    22c0:	e12fff1e 	bx	lr
    22c4:	e1900601 	orrs	r0, r0, r1, lsl #12
    22c8:	1a000002 	bne	22d8 <__aeabi_d2iz+0x54>
    22cc:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    22d0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    22d4:	e12fff1e 	bx	lr
    22d8:	e3a00000 	mov	r0, #0
    22dc:	e12fff1e 	bx	lr

000022e0 <atexit>:
    22e0:	e1a01000 	mov	r1, r0
    22e4:	e3a00000 	mov	r0, #0
    22e8:	e92d4008 	push	{r3, lr}
    22ec:	e1a02000 	mov	r2, r0
    22f0:	e1a03000 	mov	r3, r0
    22f4:	eb00005b 	bl	2468 <__register_exitproc>
    22f8:	e8bd4008 	pop	{r3, lr}
    22fc:	e12fff1e 	bx	lr

00002300 <exit>:
    2300:	e92d4008 	push	{r3, lr}
    2304:	e3a01000 	mov	r1, #0
    2308:	e1a04000 	mov	r4, r0
    230c:	eb000092 	bl	255c <__call_exitprocs>
    2310:	e59f3018 	ldr	r3, [pc, #24]	; 2330 <exit+0x30>
    2314:	e5930000 	ldr	r0, [r3]
    2318:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    231c:	e3530000 	cmp	r3, #0
    2320:	11a0e00f 	movne	lr, pc
    2324:	112fff13 	bxne	r3
    2328:	e1a00004 	mov	r0, r4
    232c:	eb000116 	bl	278c <_exit>
    2330:	00002834 	.word	0x00002834

00002334 <memset>:
    2334:	e3520003 	cmp	r2, #3
    2338:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    233c:	e20110ff 	and	r1, r1, #255	; 0xff
    2340:	8a000008 	bhi	2368 <memset+0x34>
    2344:	e3520000 	cmp	r2, #0
    2348:	0a000004 	beq	2360 <memset+0x2c>
    234c:	e1a03000 	mov	r3, r0
    2350:	e0822000 	add	r2, r2, r0
    2354:	e4c31001 	strb	r1, [r3], #1
    2358:	e1530002 	cmp	r3, r2
    235c:	1afffffc 	bne	2354 <memset+0x20>
    2360:	e8bd0010 	ldmfd	sp!, {r4}
    2364:	e12fff1e 	bx	lr
    2368:	e3100003 	tst	r0, #3
    236c:	e0802002 	add	r2, r0, r2
    2370:	0a000007 	beq	2394 <memset+0x60>
    2374:	e280c001 	add	r12, r0, #1
    2378:	e20c3003 	and	r3, r12, #3
    237c:	e3530000 	cmp	r3, #0
    2380:	e54c1001 	strb	r1, [r12, #-1]
    2384:	e1a0300c 	mov	r3, r12
    2388:	e28cc001 	add	r12, r12, #1
    238c:	1afffff9 	bne	2378 <memset+0x44>
    2390:	ea000000 	b	2398 <memset+0x64>
    2394:	e1a03000 	mov	r3, r0
    2398:	e0634002 	rsb	r4, r3, r2
    239c:	e081c401 	add	r12, r1, r1, lsl #8
    23a0:	e354003f 	cmp	r4, #63	; 0x3f
    23a4:	e08cc80c 	add	r12, r12, r12, lsl #16
    23a8:	da00001a 	ble	2418 <memset+0xe4>
    23ac:	e583c000 	str	r12, [r3]
    23b0:	e583c004 	str	r12, [r3, #4]
    23b4:	e583c008 	str	r12, [r3, #8]
    23b8:	e583c00c 	str	r12, [r3, #12]
    23bc:	e583c010 	str	r12, [r3, #16]
    23c0:	e583c014 	str	r12, [r3, #20]
    23c4:	e583c018 	str	r12, [r3, #24]
    23c8:	e583c01c 	str	r12, [r3, #28]
    23cc:	e583c020 	str	r12, [r3, #32]
    23d0:	e583c024 	str	r12, [r3, #36]	; 0x24
    23d4:	e583c028 	str	r12, [r3, #40]	; 0x28
    23d8:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    23dc:	e583c030 	str	r12, [r3, #48]	; 0x30
    23e0:	e583c034 	str	r12, [r3, #52]	; 0x34
    23e4:	e583c038 	str	r12, [r3, #56]	; 0x38
    23e8:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    23ec:	e2833040 	add	r3, r3, #64	; 0x40
    23f0:	e0634002 	rsb	r4, r3, r2
    23f4:	e354003f 	cmp	r4, #63	; 0x3f
    23f8:	caffffeb 	bgt	23ac <memset+0x78>
    23fc:	ea000005 	b	2418 <memset+0xe4>
    2400:	e583c000 	str	r12, [r3]
    2404:	e583c004 	str	r12, [r3, #4]
    2408:	e583c008 	str	r12, [r3, #8]
    240c:	e583c00c 	str	r12, [r3, #12]
    2410:	e2833010 	add	r3, r3, #16
    2414:	e0634002 	rsb	r4, r3, r2
    2418:	e354000f 	cmp	r4, #15
    241c:	cafffff7 	bgt	2400 <memset+0xcc>
    2420:	e3540003 	cmp	r4, #3
    2424:	da000006 	ble	2444 <memset+0x110>
    2428:	e2834004 	add	r4, r3, #4
    242c:	e0643002 	rsb	r3, r4, r2
    2430:	e3530003 	cmp	r3, #3
    2434:	e504c004 	str	r12, [r4, #-4]
    2438:	e1a03004 	mov	r3, r4
    243c:	e2844004 	add	r4, r4, #4
    2440:	cafffff9 	bgt	242c <memset+0xf8>
    2444:	e1520003 	cmp	r2, r3
    2448:	9affffc4 	bls	2360 <memset+0x2c>
    244c:	e2833001 	add	r3, r3, #1
    2450:	e2822001 	add	r2, r2, #1
    2454:	e5431001 	strb	r1, [r3, #-1]
    2458:	e2833001 	add	r3, r3, #1
    245c:	e1530002 	cmp	r3, r2
    2460:	1afffffb 	bne	2454 <memset+0x120>
    2464:	eaffffbd 	b	2360 <memset+0x2c>

00002468 <__register_exitproc>:
    2468:	e59fc0e4 	ldr	r12, [pc, #228]	; 2554 <__register_exitproc+0xec>
    246c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2470:	e59c4000 	ldr	r4, [r12]
    2474:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2478:	e35c0000 	cmp	r12, #0
    247c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2480:	e59c5004 	ldr	r5, [r12, #4]
    2484:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2488:	e355001f 	cmp	r5, #31
    248c:	e24dd010 	sub	sp, sp, #16
    2490:	e1a06000 	mov	r6, r0
    2494:	da000015 	ble	24f0 <__register_exitproc+0x88>
    2498:	e59f00b8 	ldr	r0, [pc, #184]	; 2558 <__register_exitproc+0xf0>
    249c:	e3500000 	cmp	r0, #0
    24a0:	1a000001 	bne	24ac <__register_exitproc+0x44>
    24a4:	e3e00000 	mvn	r0, #0
    24a8:	ea000018 	b	2510 <__register_exitproc+0xa8>
    24ac:	e3a00e19 	mov	r0, #400	; 0x190
    24b0:	e58d100c 	str	r1, [sp, #12]
    24b4:	e58d2008 	str	r2, [sp, #8]
    24b8:	e58d3004 	str	r3, [sp, #4]
    24bc:	e320f000 	nop	{0}
    24c0:	e250c000 	subs	r12, r0, #0
    24c4:	e59d100c 	ldr	r1, [sp, #12]
    24c8:	e59d2008 	ldr	r2, [sp, #8]
    24cc:	e59d3004 	ldr	r3, [sp, #4]
    24d0:	0afffff3 	beq	24a4 <__register_exitproc+0x3c>
    24d4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    24d8:	e3a00000 	mov	r0, #0
    24dc:	e58c0004 	str	r0, [r12, #4]
    24e0:	e58c5000 	str	r5, [r12]
    24e4:	e584c148 	str	r12, [r4, #328]	; 0x148
    24e8:	e58c0188 	str	r0, [r12, #392]	; 0x188
    24ec:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    24f0:	e3560000 	cmp	r6, #0
    24f4:	e59c4004 	ldr	r4, [r12, #4]
    24f8:	1a000007 	bne	251c <__register_exitproc+0xb4>
    24fc:	e2843002 	add	r3, r4, #2
    2500:	e2844001 	add	r4, r4, #1
    2504:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2508:	e58c4004 	str	r4, [r12, #4]
    250c:	e3a00000 	mov	r0, #0
    2510:	e28dd010 	add	sp, sp, #16
    2514:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2518:	e12fff1e 	bx	lr
    251c:	e3a00001 	mov	r0, #1
    2520:	e1a00410 	lsl	r0, r0, r4
    2524:	e08c8104 	add	r8, r12, r4, lsl #2
    2528:	e3560002 	cmp	r6, #2
    252c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2530:	e5883108 	str	r3, [r8, #264]	; 0x108
    2534:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2538:	e1877000 	orr	r7, r7, r0
    253c:	01830000 	orreq	r0, r3, r0
    2540:	e1a05008 	mov	r5, r8
    2544:	e5882088 	str	r2, [r8, #136]	; 0x88
    2548:	e58c7188 	str	r7, [r12, #392]	; 0x188
    254c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2550:	eaffffe9 	b	24fc <__register_exitproc+0x94>
    2554:	00002834 	.word	0x00002834
    2558:	00000000 	.word	0x00000000

0000255c <__call_exitprocs>:
    255c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2560:	e59f3168 	ldr	r3, [pc, #360]	; 26d0 <__call_exitprocs+0x174>
    2564:	e5933000 	ldr	r3, [r3]
    2568:	e24dd014 	sub	sp, sp, #20
    256c:	e58d3004 	str	r3, [sp, #4]
    2570:	e2833f52 	add	r3, r3, #328	; 0x148
    2574:	e58d0008 	str	r0, [sp, #8]
    2578:	e58d300c 	str	r3, [sp, #12]
    257c:	e1a07001 	mov	r7, r1
    2580:	e3a08001 	mov	r8, #1
    2584:	e59d3004 	ldr	r3, [sp, #4]
    2588:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    258c:	e3560000 	cmp	r6, #0
    2590:	e59db00c 	ldr	r11, [sp, #12]
    2594:	0a000033 	beq	2668 <__call_exitprocs+0x10c>
    2598:	e5965004 	ldr	r5, [r6, #4]
    259c:	e2554001 	subs	r4, r5, #1
    25a0:	5286a088 	addpl	r10, r6, #136	; 0x88
    25a4:	5285501f 	addpl	r5, r5, #31
    25a8:	508a5105 	addpl	r5, r10, r5, lsl #2
    25ac:	5a000007 	bpl	25d0 <__call_exitprocs+0x74>
    25b0:	ea000029 	b	265c <__call_exitprocs+0x100>
    25b4:	e5953000 	ldr	r3, [r5]
    25b8:	e1530007 	cmp	r3, r7
    25bc:	0a000005 	beq	25d8 <__call_exitprocs+0x7c>
    25c0:	e2444001 	sub	r4, r4, #1
    25c4:	e3740001 	cmn	r4, #1
    25c8:	e2455004 	sub	r5, r5, #4
    25cc:	0a000022 	beq	265c <__call_exitprocs+0x100>
    25d0:	e3570000 	cmp	r7, #0
    25d4:	1afffff6 	bne	25b4 <__call_exitprocs+0x58>
    25d8:	e5963004 	ldr	r3, [r6, #4]
    25dc:	e06a2005 	rsb	r2, r10, r5
    25e0:	e2433001 	sub	r3, r3, #1
    25e4:	e0862002 	add	r2, r6, r2
    25e8:	e1530004 	cmp	r3, r4
    25ec:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    25f0:	13a01000 	movne	r1, #0
    25f4:	05864004 	streq	r4, [r6, #4]
    25f8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    25fc:	e3530000 	cmp	r3, #0
    2600:	0affffee 	beq	25c0 <__call_exitprocs+0x64>
    2604:	e1a02418 	lsl	r2, r8, r4
    2608:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    260c:	e1120001 	tst	r2, r1
    2610:	e5969004 	ldr	r9, [r6, #4]
    2614:	0a000016 	beq	2674 <__call_exitprocs+0x118>
    2618:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    261c:	e1120001 	tst	r2, r1
    2620:	1a000016 	bne	2680 <__call_exitprocs+0x124>
    2624:	e59d0008 	ldr	r0, [sp, #8]
    2628:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    262c:	e1a0e00f 	mov	lr, pc
    2630:	e12fff13 	bx	r3
    2634:	e5963004 	ldr	r3, [r6, #4]
    2638:	e1530009 	cmp	r3, r9
    263c:	1affffd0 	bne	2584 <__call_exitprocs+0x28>
    2640:	e59b3000 	ldr	r3, [r11]
    2644:	e1530006 	cmp	r3, r6
    2648:	1affffcd 	bne	2584 <__call_exitprocs+0x28>
    264c:	e2444001 	sub	r4, r4, #1
    2650:	e3740001 	cmn	r4, #1
    2654:	e2455004 	sub	r5, r5, #4
    2658:	1affffdc 	bne	25d0 <__call_exitprocs+0x74>
    265c:	e59f1070 	ldr	r1, [pc, #112]	; 26d4 <__call_exitprocs+0x178>
    2660:	e3510000 	cmp	r1, #0
    2664:	1a000009 	bne	2690 <__call_exitprocs+0x134>
    2668:	e28dd014 	add	sp, sp, #20
    266c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2670:	e12fff1e 	bx	lr
    2674:	e1a0e00f 	mov	lr, pc
    2678:	e12fff13 	bx	r3
    267c:	eaffffec 	b	2634 <__call_exitprocs+0xd8>
    2680:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2684:	e1a0e00f 	mov	lr, pc
    2688:	e12fff13 	bx	r3
    268c:	eaffffe8 	b	2634 <__call_exitprocs+0xd8>
    2690:	e5963004 	ldr	r3, [r6, #4]
    2694:	e3530000 	cmp	r3, #0
    2698:	e5963000 	ldr	r3, [r6]
    269c:	1a000008 	bne	26c4 <__call_exitprocs+0x168>
    26a0:	e3530000 	cmp	r3, #0
    26a4:	0a000006 	beq	26c4 <__call_exitprocs+0x168>
    26a8:	e1a00006 	mov	r0, r6
    26ac:	e58b3000 	str	r3, [r11]
    26b0:	e320f000 	nop	{0}
    26b4:	e59b6000 	ldr	r6, [r11]
    26b8:	e3560000 	cmp	r6, #0
    26bc:	1affffb5 	bne	2598 <__call_exitprocs+0x3c>
    26c0:	eaffffe8 	b	2668 <__call_exitprocs+0x10c>
    26c4:	e1a0b006 	mov	r11, r6
    26c8:	e1a06003 	mov	r6, r3
    26cc:	eafffff9 	b	26b8 <__call_exitprocs+0x15c>
    26d0:	00002834 	.word	0x00002834
    26d4:	00000000 	.word	0x00000000

000026d8 <register_fini>:
    26d8:	e92d4008 	push	{r3, lr}
    26dc:	e59f3010 	ldr	r3, [pc, #16]	; 26f4 <register_fini+0x1c>
    26e0:	e3530000 	cmp	r3, #0
    26e4:	159f000c 	ldrne	r0, [pc, #12]	; 26f8 <register_fini+0x20>
    26e8:	1bfffefc 	blne	22e0 <atexit>
    26ec:	e8bd4008 	pop	{r3, lr}
    26f0:	e12fff1e 	bx	lr
    26f4:	0000285c 	.word	0x0000285c
    26f8:	000026fc 	.word	0x000026fc

000026fc <__libc_fini_array>:
    26fc:	e92d4038 	push	{r3, r4, r5, lr}
    2700:	e59f5030 	ldr	r5, [pc, #48]	; 2738 <__libc_fini_array+0x3c>
    2704:	e59f4030 	ldr	r4, [pc, #48]	; 273c <__libc_fini_array+0x40>
    2708:	e0654004 	rsb	r4, r5, r4
    270c:	e1b04144 	asrs	r4, r4, #2
    2710:	10855104 	addne	r5, r5, r4, lsl #2
    2714:	0a000004 	beq	272c <__libc_fini_array+0x30>
    2718:	e5353004 	ldr	r3, [r5, #-4]!
    271c:	e1a0e00f 	mov	lr, pc
    2720:	e12fff13 	bx	r3
    2724:	e2544001 	subs	r4, r4, #1
    2728:	1afffffa 	bne	2718 <__libc_fini_array+0x1c>
    272c:	eb00004a 	bl	285c <__libc_fini>
    2730:	e8bd4038 	pop	{r3, r4, r5, lr}
    2734:	e12fff1e 	bx	lr
    2738:	00002874 	.word	0x00002874
    273c:	00002878 	.word	0x00002878

00002740 <__cs3_premain>:
    2740:	e92d4008 	push	{r3, lr}
    2744:	eb000017 	bl	27a8 <__libc_init_array>
    2748:	e59f3030 	ldr	r3, [pc, #48]	; 2780 <__cs3_premain+0x40>
    274c:	e3530000 	cmp	r3, #0
    2750:	15930000 	ldrne	r0, [r3]
    2754:	01a00003 	moveq	r0, r3
    2758:	e59f3024 	ldr	r3, [pc, #36]	; 2784 <__cs3_premain+0x44>
    275c:	e3530000 	cmp	r3, #0
    2760:	15931000 	ldrne	r1, [r3]
    2764:	01a01003 	moveq	r1, r3
    2768:	e3a02000 	mov	r2, #0
    276c:	ebfff76d 	bl	528 <main>
    2770:	e59f3010 	ldr	r3, [pc, #16]	; 2788 <__cs3_premain+0x48>
    2774:	e3530000 	cmp	r3, #0
    2778:	1bfffee0 	blne	2300 <exit>
    277c:	eafffffe 	b	277c <__cs3_premain+0x3c>
	...
    2788:	00002300 	.word	0x00002300

0000278c <_exit>:
    278c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2790:	e3a00018 	mov	r0, #24
    2794:	e59f1004 	ldr	r1, [pc, #4]	; 27a0 <_exit+0x14>
    2798:	ef123456 	svc	0x00123456
    279c:	eafffffe 	b	279c <_exit+0x10>
    27a0:	00020026 	.word	0x00020026

000027a4 <__cs3_isr_interrupt>:
    27a4:	eafffffe 	b	27a4 <__cs3_isr_interrupt>

000027a8 <__libc_init_array>:
    27a8:	e92d4070 	push	{r4, r5, r6, lr}
    27ac:	e59f506c 	ldr	r5, [pc, #108]	; 2820 <__libc_init_array+0x78>
    27b0:	e59f606c 	ldr	r6, [pc, #108]	; 2824 <__libc_init_array+0x7c>
    27b4:	e0656006 	rsb	r6, r5, r6
    27b8:	e1b06146 	asrs	r6, r6, #2
    27bc:	12455004 	subne	r5, r5, #4
    27c0:	13a04000 	movne	r4, #0
    27c4:	0a000005 	beq	27e0 <__libc_init_array+0x38>
    27c8:	e5b53004 	ldr	r3, [r5, #4]!
    27cc:	e2844001 	add	r4, r4, #1
    27d0:	e1a0e00f 	mov	lr, pc
    27d4:	e12fff13 	bx	r3
    27d8:	e1560004 	cmp	r6, r4
    27dc:	1afffff9 	bne	27c8 <__libc_init_array+0x20>
    27e0:	e59f5040 	ldr	r5, [pc, #64]	; 2828 <__libc_init_array+0x80>
    27e4:	e59f6040 	ldr	r6, [pc, #64]	; 282c <__libc_init_array+0x84>
    27e8:	e0656006 	rsb	r6, r5, r6
    27ec:	eb000012 	bl	283c <_init>
    27f0:	e1b06146 	asrs	r6, r6, #2
    27f4:	12455004 	subne	r5, r5, #4
    27f8:	13a04000 	movne	r4, #0
    27fc:	0a000005 	beq	2818 <__libc_init_array+0x70>
    2800:	e5b53004 	ldr	r3, [r5, #4]!
    2804:	e2844001 	add	r4, r4, #1
    2808:	e1a0e00f 	mov	lr, pc
    280c:	e12fff13 	bx	r3
    2810:	e1560004 	cmp	r6, r4
    2814:	1afffff9 	bne	2800 <__libc_init_array+0x58>
    2818:	e8bd4070 	pop	{r4, r5, r6, lr}
    281c:	e12fff1e 	bx	lr
    2820:	00002854 	.word	0x00002854
    2824:	00002854 	.word	0x00002854
    2828:	00002854 	.word	0x00002854
    282c:	0000285c 	.word	0x0000285c

Disassembly of section .rodata:

00002834 <_global_impure_ptr>:
    2834:	000316e8 00000043                       ....C...

0000283c <_init>:
    283c:	e1a0c00d 	mov	r12, sp
    2840:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2844:	e24cb004 	sub	r11, r12, #4
    2848:	e24bd028 	sub	sp, r11, #40	; 0x28
    284c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2850:	e12fff1e 	bx	lr

00002854 <__init_array_start>:
    2854:	000026d8 	.word	0x000026d8

00002858 <__frame_dummy_init_array_entry>:
    2858:	00000208                                ....

0000285c <__libc_fini>:
    285c:	e1a0c00d 	mov	r12, sp
    2860:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2864:	e24cb004 	sub	r11, r12, #4
    2868:	e24bd028 	sub	sp, r11, #40	; 0x28
    286c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2870:	e12fff1e 	bx	lr

00002874 <__fini_array_start>:
    2874:	000001c4 	.word	0x000001c4

00002878 <__cs3_regions>:
    2878:	00000000 	.word	0x00000000
    287c:	00000040 	.word	0x00000040
    2880:	00000040 	.word	0x00000040
    2884:	00031ad8 	.word	0x00031ad8
    2888:	00000040 	.word	0x00000040

0000288c <__cs3_regions_end>:
    288c:	00000000 	.word	0x00000000
