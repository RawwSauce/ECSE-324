
P:/G08_Lab4/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 6c 0b 00 00 70 0b 00 00 74 0b 00 00     @...l...p...t...
  30:	78 0b 00 00 68 0b 00 00 7c 0b 00 00 80 0b 00 00     x...h...|.......

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <H_CHARACTER_RESOL+0x89>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <H_CHARACTER_RESOL+0x85>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <H_CHARACTER_RESOL+0x8d>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <H_CHARACTER_RESOL+0x55>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <H_CHARACTER_RESOL+0x55>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <H_CHARACTER_RESOL+0x3d>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <H_CHARACTER_RESOL+0x75>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <H_CHARACTER_RESOL+0x65>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <H_CHARACTER_RESOL+0x15>
  d4:	eb00028a 	bl	b04 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000c68 	.word	0x00000c68

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <V_PIXEL_MAX_RESOL+0x29>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <V_PIXEL_MAX_RESOL+0x2d>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <V_PIXEL_MAX_RESOL+0x31>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000010a0 	.word	0x000010a0

00000124 <__cs3_heap_start_ptr>:
 124:	000010c8 	.word	0x000010c8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <H_PIXEL_MAX_RESOL+0x2d>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <H_PIXEL_MAX_RESOL+0x31>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <H_PIXEL_MAX_RESOL+0x15>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <H_PIXEL_MAX_RESOL+0x35>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <H_PIXEL_MAX_RESOL+0xd>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <H_PIXEL_MAX_RESOL+0xd>
 16c:	000010a8 	.word	0x000010a8
 170:	000010ab 	.word	0x000010ab
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000010a8 	.word	0x000010a8
 1bc:	000010a8 	.word	0x000010a8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000010a8 	.word	0x000010a8
 200:	00000000 	.word	0x00000000
 204:	00000c0c 	.word	0x00000c0c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c0c 	.word	0x00000c0c
 250:	000010ac 	.word	0x000010ac
 254:	00000c68 	.word	0x00000c68
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/VGA.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/ps2_keyboard.h"

void test_char(){
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e54b300d 	strb	r3, [r11, #-13]
	//write 1 char
	for(y=0;y<=59;y++)
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
 278:	ea000013 	b	2cc <H_PIXEL_MAX_MEM+0x4e>
		for(x=0;x<=79;x++)
 27c:	e3a03000 	mov	r3, #0
 280:	e50b3008 	str	r3, [r11, #-8]
 284:	ea00000a 	b	2b4 <H_PIXEL_MAX_MEM+0x36>
			VGA_write_char_ASM(x,y,c++);
 288:	e55b300d 	ldrb	r3, [r11, #-13]
 28c:	e55b200d 	ldrb	r2, [r11, #-13]
 290:	e2822001 	add	r2, r2, #1
 294:	e54b200d 	strb	r2, [r11, #-13]
 298:	e51b0008 	ldr	r0, [r11, #-8]
 29c:	e51b100c 	ldr	r1, [r11, #-12]
 2a0:	e1a02003 	mov	r2, r3
 2a4:	eb0000ac 	bl	55c <VGA_write_char_ASM>
void test_char(){
	int x,y;
	char c = 0;
	//write 1 char
	for(y=0;y<=59;y++)
		for(x=0;x<=79;x++)
 2a8:	e51b3008 	ldr	r3, [r11, #-8]
 2ac:	e2833001 	add	r3, r3, #1
 2b0:	e50b3008 	str	r3, [r11, #-8]
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e353004f 	cmp	r3, #79	; 0x4f
 2bc:	dafffff1 	ble	288 <H_PIXEL_MAX_MEM+0xa>

void test_char(){
	int x,y;
	char c = 0;
	//write 1 char
	for(y=0;y<=59;y++)
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
 2cc:	e51b300c 	ldr	r3, [r11, #-12]
 2d0:	e353003b 	cmp	r3, #59	; 0x3b
 2d4:	daffffe8 	ble	27c <test_char+0x20>
		for(x=0;x<=79;x++)
			VGA_write_char_ASM(x,y,c++);
	
}
 2d8:	e24bd004 	sub	sp, r11, #4
 2dc:	e8bd8800 	pop	{r11, pc}

000002e0 <test_byte>:
//write 2 char

void test_byte(){	
 2e0:	e92d4800 	push	{r11, lr}
 2e4:	e28db004 	add	r11, sp, #4
 2e8:	e24dd010 	sub	sp, sp, #16
	int x,y;
	char c=0;
 2ec:	e3a03000 	mov	r3, #0
 2f0:	e54b300d 	strb	r3, [r11, #-13]
	for(y=0;y<=59;y++)
 2f4:	e3a03000 	mov	r3, #0
 2f8:	e50b300c 	str	r3, [r11, #-12]
 2fc:	ea000013 	b	350 <test_byte+0x70>
		for(x=0;x<=78;x+=3)
 300:	e3a03000 	mov	r3, #0
 304:	e50b3008 	str	r3, [r11, #-8]
 308:	ea00000a 	b	338 <test_byte+0x58>
			VGA_write_byte_ASM(x,y,c++);
 30c:	e55b300d 	ldrb	r3, [r11, #-13]
 310:	e55b200d 	ldrb	r2, [r11, #-13]
 314:	e2822001 	add	r2, r2, #1
 318:	e54b200d 	strb	r2, [r11, #-13]
 31c:	e51b0008 	ldr	r0, [r11, #-8]
 320:	e51b100c 	ldr	r1, [r11, #-12]
 324:	e1a02003 	mov	r2, r3
 328:	eb00009c 	bl	5a0 <VGA_write_byte_ASM>

void test_byte(){	
	int x,y;
	char c=0;
	for(y=0;y<=59;y++)
		for(x=0;x<=78;x+=3)
 32c:	e51b3008 	ldr	r3, [r11, #-8]
 330:	e2833003 	add	r3, r3, #3
 334:	e50b3008 	str	r3, [r11, #-8]
 338:	e51b3008 	ldr	r3, [r11, #-8]
 33c:	e353004e 	cmp	r3, #78	; 0x4e
 340:	dafffff1 	ble	30c <test_byte+0x2c>
//write 2 char

void test_byte(){	
	int x,y;
	char c=0;
	for(y=0;y<=59;y++)
 344:	e51b300c 	ldr	r3, [r11, #-12]
 348:	e2833001 	add	r3, r3, #1
 34c:	e50b300c 	str	r3, [r11, #-12]
 350:	e51b300c 	ldr	r3, [r11, #-12]
 354:	e353003b 	cmp	r3, #59	; 0x3b
 358:	daffffe8 	ble	300 <test_byte+0x20>
		for(x=0;x<=78;x+=3)
			VGA_write_byte_ASM(x,y,c++);
}
 35c:	e24bd004 	sub	sp, r11, #4
 360:	e8bd8800 	pop	{r11, pc}

00000364 <test_pixel>:

void test_pixel(){
 364:	e92d4800 	push	{r11, lr}
 368:	e28db004 	add	r11, sp, #4
 36c:	e24dd010 	sub	sp, sp, #16
	int x,y;
	unsigned short colour=0;
 370:	e3a03000 	mov	r3, #0
 374:	e14b30be 	strh	r3, [r11, #-14]
	for(y=0;y<=239;y++)
 378:	e3a03000 	mov	r3, #0
 37c:	e50b300c 	str	r3, [r11, #-12]
 380:	ea000015 	b	3dc <test_pixel+0x78>
		for(x=0;x<=319;x++)
 384:	e3a03000 	mov	r3, #0
 388:	e50b3008 	str	r3, [r11, #-8]
 38c:	ea00000b 	b	3c0 <test_pixel+0x5c>
			VGA_draw_point_ASM(x,y,colour++);
 390:	e15b30be 	ldrh	r3, [r11, #-14]
 394:	e15b20be 	ldrh	r2, [r11, #-14]
 398:	e2822001 	add	r2, r2, #1
 39c:	e14b20be 	strh	r2, [r11, #-14]
 3a0:	e6bf3073 	sxth	r3, r3
 3a4:	e51b0008 	ldr	r0, [r11, #-8]
 3a8:	e51b100c 	ldr	r1, [r11, #-12]
 3ac:	e1a02003 	mov	r2, r3
 3b0:	eb000094 	bl	608 <VGA_draw_point_ASM>

void test_pixel(){
	int x,y;
	unsigned short colour=0;
	for(y=0;y<=239;y++)
		for(x=0;x<=319;x++)
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e50b3008 	str	r3, [r11, #-8]
 3c0:	e51b2008 	ldr	r2, [r11, #-8]
 3c4:	e300313f 	movw	r3, #319	; 0x13f
 3c8:	e1520003 	cmp	r2, r3
 3cc:	daffffef 	ble	390 <test_pixel+0x2c>
}

void test_pixel(){
	int x,y;
	unsigned short colour=0;
	for(y=0;y<=239;y++)
 3d0:	e51b300c 	ldr	r3, [r11, #-12]
 3d4:	e2833001 	add	r3, r3, #1
 3d8:	e50b300c 	str	r3, [r11, #-12]
 3dc:	e51b300c 	ldr	r3, [r11, #-12]
 3e0:	e35300ef 	cmp	r3, #239	; 0xef
 3e4:	daffffe6 	ble	384 <test_pixel+0x20>
		for(x=0;x<=319;x++)
			VGA_draw_point_ASM(x,y,colour++);

}
 3e8:	e24bd004 	sub	sp, r11, #4
 3ec:	e8bd8800 	pop	{r11, pc}

000003f0 <audio>:
// so we can write 48000 times per sec
// so the while loop is going to run faster 48000 hz but we are bottlenecked at outputing audio at 48000hz
// we want to have a 100hz square wave input
// 48000/100 = 480 samples per onecycle of our square wave
// so 240 need to be high and 240 need to be low
void audio(){
 3f0:	e92d4800 	push	{r11, lr}
 3f4:	e28db004 	add	r11, sp, #4
 3f8:	e24dd008 	sub	sp, sp, #8
	int i = 0;
 3fc:	e3a03000 	mov	r3, #0
 400:	e50b3008 	str	r3, [r11, #-8]
	while(1){
		// try to write 240 high samples, we only increment i when we successfuly output audio, ie write audio outputs return 1
		for(i=0;i<240;i++){
 404:	e3a03000 	mov	r3, #0
 408:	e50b3008 	str	r3, [r11, #-8]
 40c:	ea00000a 	b	43c <audio+0x4c>
			if(write_audio_data_ASM(0x00FFFFFF) == 0){// if we coulnt write a high sample then keep i at the same value
 410:	e3e004ff 	mvn	r0, #-16777216	; 0xff000000
 414:	eb0000d8 	bl	77c <write_audio_data_ASM>
 418:	e1a03000 	mov	r3, r0
 41c:	e3530000 	cmp	r3, #0
 420:	1a000002 	bne	430 <audio+0x40>
				i--;
 424:	e51b3008 	ldr	r3, [r11, #-8]
 428:	e2433001 	sub	r3, r3, #1
 42c:	e50b3008 	str	r3, [r11, #-8]
// so 240 need to be high and 240 need to be low
void audio(){
	int i = 0;
	while(1){
		// try to write 240 high samples, we only increment i when we successfuly output audio, ie write audio outputs return 1
		for(i=0;i<240;i++){
 430:	e51b3008 	ldr	r3, [r11, #-8]
 434:	e2833001 	add	r3, r3, #1
 438:	e50b3008 	str	r3, [r11, #-8]
 43c:	e51b3008 	ldr	r3, [r11, #-8]
 440:	e35300ef 	cmp	r3, #239	; 0xef
 444:	dafffff1 	ble	410 <audio+0x20>
			if(write_audio_data_ASM(0x00FFFFFF) == 0){// if we coulnt write a high sample then keep i at the same value
				i--;
			}
		}
		// similar logic for lows
		for(i=0;i<240;i++){
 448:	e3a03000 	mov	r3, #0
 44c:	e50b3008 	str	r3, [r11, #-8]
 450:	ea00000a 	b	480 <audio+0x90>
			if(write_audio_data_ASM(0x00000000) == 0){
 454:	e3a00000 	mov	r0, #0
 458:	eb0000c7 	bl	77c <write_audio_data_ASM>
 45c:	e1a03000 	mov	r3, r0
 460:	e3530000 	cmp	r3, #0
 464:	1a000002 	bne	474 <audio+0x84>
				i--;
 468:	e51b3008 	ldr	r3, [r11, #-8]
 46c:	e2433001 	sub	r3, r3, #1
 470:	e50b3008 	str	r3, [r11, #-8]
			if(write_audio_data_ASM(0x00FFFFFF) == 0){// if we coulnt write a high sample then keep i at the same value
				i--;
			}
		}
		// similar logic for lows
		for(i=0;i<240;i++){
 474:	e51b3008 	ldr	r3, [r11, #-8]
 478:	e2833001 	add	r3, r3, #1
 47c:	e50b3008 	str	r3, [r11, #-8]
 480:	e51b3008 	ldr	r3, [r11, #-8]
 484:	e35300ef 	cmp	r3, #239	; 0xef
 488:	dafffff1 	ble	454 <audio+0x64>
			if(write_audio_data_ASM(0x00000000) == 0){
				i--;
			}
		}
	}
 48c:	eaffffdc 	b	404 <audio+0x14>

00000490 <main>:
}
*/

// PART 3 --------------------------------------------------------------------------------------

int main(){
 490:	e92d4800 	push	{r11, lr}
 494:	e28db004 	add	r11, sp, #4
	audio();
 498:	ebffffd4 	bl	3f0 <audio>
	return 0;
 49c:	e3a03000 	mov	r3, #0
}
 4a0:	e1a00003 	mov	r0, r3
 4a4:	e8bd8800 	pop	{r11, pc}

000004a8 <VGA_clear_pixelbuff_ASM>:
	.equ H_PIXEL_MAX_RESOL, 319
	.equ V_PIXEL_MAX_RESOL, 239

VGA_clear_pixelbuff_ASM:
	
	PUSH {R0-R9, LR}
 4a8:	e92d43ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	MOV R3, #255
 4ac:	e3a030ff 	mov	r3, #255	; 0xff
	ADD R3, R3, # 64
 4b0:	e2833040 	add	r3, r3, #64	; 0x40
	MOV R4, #239
 4b4:	e3a040ef 	mov	r4, #239	; 0xef
	LDR R0, =VGA_BASE_PIXELBUFF // base address
 4b8:	e3a00332 	mov	r0, #-939524096	; 0xc8000000
	MOV R1, #0 // x counter
 4bc:	e3a01000 	mov	r1, #0
	MOV R2, #0 // y counter
 4c0:	e3a02000 	mov	r2, #0
	MOV R6, #0 // R6 is going to be what we load in the buffer address during each iteration
 4c4:	e3a06000 	mov	r6, #0

000004c8 <LOOPX>:
	
LOOPX:
	
	STRH R6, [R0] // write R6 at that memory address	
 4c8:	e1c060b0 	strh	r6, [r0]
	ADD R0, R0, #2 // base memory + x memory base offset
 4cc:	e2800002 	add	r0, r0, #2
	ADD R1, R1, #1 // increment to next the horizontal pixel, ie increment x 
 4d0:	e2811001 	add	r1, r1, #1
	CMP R1, R3
 4d4:	e1510003 	cmp	r1, r3
	BLE LOOPX
 4d8:	dafffffa 	ble	4c8 <LOOPX>

	
	ADD R2, R2, #1 // increment y
 4dc:	e2822001 	add	r2, r2, #1
	ADD R0, R0, #1024 // add one row memory offset to base memory address
 4e0:	e2800b01 	add	r0, r0, #1024	; 0x400
	MOV R1, #255  // compute mem offset to remove from R0 to start at the begining of the row
 4e4:	e3a010ff 	mov	r1, #255	; 0xff
	ADD R1, R1, # 65 
 4e8:	e2811041 	add	r1, r1, #65	; 0x41
	LSL R1, R1, #1
 4ec:	e1a01081 	lsl	r1, r1, #1
	SUB R0, R0, R1 // 
 4f0:	e0400001 	sub	r0, r0, r1
	MOV R1, #0 // reset x memory base offset
 4f4:	e3a01000 	mov	r1, #0
	CMP R2, R4
 4f8:	e1520004 	cmp	r2, r4
	BLE LOOPX
 4fc:	dafffff1 	ble	4c8 <LOOPX>
	
	POP {R0-R9, LR}
 500:	e8bd43ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	BX LR
 504:	e12fff1e 	bx	lr

00000508 <VGA_clear_charbuff_ASM>:
	
VGA_clear_charbuff_ASM:
	
	PUSH {R0-R9, LR}
 508:	e92d43ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	MOV R3, #79
 50c:	e3a0304f 	mov	r3, #79	; 0x4f
	MOV R4, # 59
 510:	e3a0403b 	mov	r4, #59	; 0x3b
	LDR R0, =VGA_BASE_CHARBUFF // base address
 514:	e3a004c9 	mov	r0, #-922746880	; 0xc9000000
	MOV R1, #0 // x counter
 518:	e3a01000 	mov	r1, #0
	MOV R2, #0 // y counter
 51c:	e3a02000 	mov	r2, #0
	MOV R6, #0 // R6 is going to be what we load in the buffer address during each iteration
 520:	e3a06000 	mov	r6, #0

00000524 <LOOPCHAR>:
	
LOOPCHAR:
	
	STRB R6, [R0] // write R6 at that memory address	
 524:	e5c06000 	strb	r6, [r0]
	ADD R0, R0, #1 // base memory + x memory base offset
 528:	e2800001 	add	r0, r0, #1
	ADD R1, R1, #1 // increment to next the horizontal pixel, ie increment x 
 52c:	e2811001 	add	r1, r1, #1
	CMP R1, R3
 530:	e1510003 	cmp	r1, r3
	BLE LOOPCHAR
 534:	dafffffa 	ble	524 <LOOPCHAR>

	
	ADD R2, R2, #1 // increment y
 538:	e2822001 	add	r2, r2, #1
	ADD R0, R0, #128 // add one row memory offset to base memory address
 53c:	e2800080 	add	r0, r0, #128	; 0x80
	MOV R1, #80  // mem offset to remove from R0 to start at the begining of the row
 540:	e3a01050 	mov	r1, #80	; 0x50
	SUB R0, R0, R1 
 544:	e0400001 	sub	r0, r0, r1
	MOV R1, #0 // reset x memory base offset
 548:	e3a01000 	mov	r1, #0
	CMP R2, R4
 54c:	e1520004 	cmp	r2, r4
	BLE LOOPCHAR
 550:	dafffff3 	ble	524 <LOOPCHAR>
	
	POP {R0-R9, LR}
 554:	e8bd43ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	BX LR
 558:	e12fff1e 	bx	lr

0000055c <VGA_write_char_ASM>:

VGA_write_char_ASM:
	PUSH {R0-R9, LR}
 55c:	e92d43ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	
	//check x coordinate
	CMP R0, #0
 560:	e3500000 	cmp	r0, #0
	BLT DONEWRITECHAR
 564:	ba00000b 	blt	598 <DONEWRITECHAR>
	CMP R0, #79
 568:	e350004f 	cmp	r0, #79	; 0x4f
	BGT DONEWRITECHAR       
 56c:	ca000009 	bgt	598 <DONEWRITECHAR>

	//check y coordinate
	CMP R1, #0
 570:	e3510000 	cmp	r1, #0
	BLT DONEWRITECHAR
 574:	ba000007 	blt	598 <DONEWRITECHAR>
	CMP R1, #59
 578:	e351003b 	cmp	r1, #59	; 0x3b
	BGT DONEWRITECHAR	
 57c:	ca000005 	bgt	598 <DONEWRITECHAR>

	LDR R3, =VGA_BASE_CHARBUFF
 580:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	MOV R4, #128
 584:	e3a04080 	mov	r4, #128	; 0x80
	MUL R1, R1, R4
 588:	e0010491 	mul	r1, r1, r4
	ADD R3, R1, R3
 58c:	e0813003 	add	r3, r1, r3
	ADD R3, R3, R0
 590:	e0833000 	add	r3, r3, r0
	STRB R2, [R3]
 594:	e5c32000 	strb	r2, [r3]

00000598 <DONEWRITECHAR>:
DONEWRITECHAR:
	POP {R0-R9, LR}
 598:	e8bd43ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	BX LR
 59c:	e12fff1e 	bx	lr

000005a0 <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
	PUSH {R0-R9, LR}
 5a0:	e92d43ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	LDR R7, =CHAR_HEX
 5a4:	e59f70b4 	ldr	r7, [pc, #180]	; 660 <VGA_draw_point_ASM+0x58>
	//check x coordinate
	CMP R0, #0
 5a8:	e3500000 	cmp	r0, #0
	BLT DONEWRITECHAR
 5ac:	bafffff9 	blt	598 <DONEWRITECHAR>
	CMP R0, #78
 5b0:	e350004e 	cmp	r0, #78	; 0x4e
	BGT DONEWRITECHAR
 5b4:	cafffff7 	bgt	598 <DONEWRITECHAR>

	//check y coordinate
	CMP R1, #0
 5b8:	e3510000 	cmp	r1, #0
	BLT DONEWRITECHAR
 5bc:	bafffff5 	blt	598 <DONEWRITECHAR>
	CMP R1, #59
 5c0:	e351003b 	cmp	r1, #59	; 0x3b
	BGT DONEWRITECHAR	
 5c4:	cafffff3 	bgt	598 <DONEWRITECHAR>
	MOV R6, R2 //save value of R2 (what we want to display)
 5c8:	e1a06002 	mov	r6, r2
	LSR R2, R6, #4 //shift right 4 bits
 5cc:	e1a02226 	lsr	r2, r6, #4
	AND R2, R2, #15 		// only want the last 4 bits
 5d0:	e202200f 	and	r2, r2, #15
	LDRB R2, [R7, R2] //R7 points to first elem in array and we want to offset by the value that is in R2 to get to other elem in the array
 5d4:	e7d72002 	ldrb	r2, [r7, r2]
	BL VGA_write_char_ASM // display the first character on the screen
 5d8:	ebffffdf 	bl	55c <VGA_write_char_ASM>
	ADD R0, R0, #1
 5dc:	e2800001 	add	r0, r0, #1
	MOV R2, R6
 5e0:	e1a02006 	mov	r2, r6
	AND R2, R2, #15 //only want the last 4 bits
 5e4:	e202200f 	and	r2, r2, #15
	LDRB R2, [R7, R2] //R7 points to first elem in array and we want to offset by the value that is in R2 to get to other elem in the array
 5e8:	e7d72002 	ldrb	r2, [r7, r2]
	BL VGA_write_char_ASM //display the second character on the screen
 5ec:	ebffffda 	bl	55c <VGA_write_char_ASM>
	
	POP {R0-R9, LR}
 5f0:	e8bd43ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	BX LR
 5f4:	e12fff1e 	bx	lr

000005f8 <CHAR_HEX>:
 5f8:	33323130 	.word	0x33323130
 5fc:	37363534 	.word	0x37363534
 600:	42413938 	.word	0x42413938
 604:	46454443 	.word	0x46454443

00000608 <VGA_draw_point_ASM>:
	.byte 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46
	//      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F  //


VGA_draw_point_ASM:
	PUSH {R0-R9, LR}
 608:	e92d43ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	
	//check x coordinate
	CMP R0, #0
 60c:	e3500000 	cmp	r0, #0
	BLT DONEWRITECHAR
 610:	baffffe0 	blt	598 <DONEWRITECHAR>
	MOV R8, #0
 614:	e3a08000 	mov	r8, #0
	ADD R8, R8, #255
 618:	e28880ff 	add	r8, r8, #255	; 0xff
	ADD R8, R8, #64
 61c:	e2888040 	add	r8, r8, #64	; 0x40
	CMP R0, R8
 620:	e1500008 	cmp	r0, r8
	BGT DONEWRITECHAR
 624:	caffffdb 	bgt	598 <DONEWRITECHAR>

	//check y coordinate
	CMP R1, #0
 628:	e3510000 	cmp	r1, #0
	BLT DONEWRITECHAR
 62c:	baffffd9 	blt	598 <DONEWRITECHAR>
	MOV R8, #0
 630:	e3a08000 	mov	r8, #0
	ADD R8, R8, #239
 634:	e28880ef 	add	r8, r8, #239	; 0xef
	CMP R1, R8
 638:	e1510008 	cmp	r1, r8
	BGT DONEWRITECHAR	
 63c:	caffffd5 	bgt	598 <DONEWRITECHAR>

	LDR R3, =VGA_BASE_PIXELBUFF
 640:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	LSL R1, R1, #10
 644:	e1a01501 	lsl	r1, r1, #10
	LSL R0, R0, #2
 648:	e1a00100 	lsl	r0, r0, #2
	ADD R3, R3, R1 // add x mem offset to base address
 64c:	e0833001 	add	r3, r3, r1
	ADD R3, R3, R0 // add y mem offset to base address
 650:	e0833000 	add	r3, r3, r0
	STRH R2, [R3]
 654:	e1c320b0 	strh	r2, [r3]

	POP {R0-R9, LR}
 658:	e8bd43ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	BX LR
 65c:	e12fff1e 	bx	lr
	POP {R0-R9, LR}
	BX LR

VGA_write_byte_ASM:
	PUSH {R0-R9, LR}
	LDR R7, =CHAR_HEX
 660:	000005f8 	.word	0x000005f8

00000664 <read_PB_data_ASM>:
	.global PB_clear_edgecp_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM
	
read_PB_data_ASM:
	PUSH {R1}
 664:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_DATA_BASE
 668:	e59f10ac 	ldr	r1, [pc, #172]	; 71c <disable_PB_INT_ASM+0x1c>
	LDR R0, [R1] // load pushbuttons data in R0
 66c:	e5910000 	ldr	r0, [r1]
	BFC R0, #4, #28 // clear all the bits excep first 4 bits as a precaution
 670:	e7df021f 	bfc	r0, #4, #28
	POP {R1}
 674:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 678:	e12fff1e 	bx	lr

0000067c <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
	PUSH {R1}
 67c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_DATA_BASE
 680:	e59f1094 	ldr	r1, [pc, #148]	; 71c <disable_PB_INT_ASM+0x1c>
	LDR R1, [R1] // load pushbuttons data in R1
 684:	e5911000 	ldr	r1, [r1]
	CMP R1, R0 // compare data register with argument
 688:	e1510000 	cmp	r1, r0
	MOV R0, #0
 68c:	e3a00000 	mov	r0, #0
	MOVEQ R0, #1 // if equal means the buttons the user entered as an argument are pressed
 690:	03a00001 	moveq	r0, #1
	POP {R1}
 694:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 698:	e12fff1e 	bx	lr

0000069c <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:

	PUSH {R1}
 69c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_EDGE_BASE
 6a0:	e59f1078 	ldr	r1, [pc, #120]	; 720 <disable_PB_INT_ASM+0x20>
	LDR R0, [R1] // load pushbuttons edgecapture data in R0
 6a4:	e5910000 	ldr	r0, [r1]
	AND R0, R0, #0xF // clear all the bits excep first 4 bits as a precaution
 6a8:	e200000f 	and	r0, r0, #15
	POP {R1}
 6ac:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 6b0:	e12fff1e 	bx	lr

000006b4 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
	PUSH {R1}
 6b4:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_EDGE_BASE
 6b8:	e59f1060 	ldr	r1, [pc, #96]	; 720 <disable_PB_INT_ASM+0x20>
	LDR R1, [R1] // load pushbuttons edgecapture data in R0
 6bc:	e5911000 	ldr	r1, [r1]
	CMP R1, R0 // compare data register with argument
 6c0:	e1510000 	cmp	r1, r0
	MOV R0, #0
 6c4:	e3a00000 	mov	r0, #0
	MOVEQ R0, #1 // if equal means the buttons the user entered as an argument have been pressed (their state changed from 0 to 1)
 6c8:	03a00001 	moveq	r0, #1
	POP {R1}
 6cc:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 6d0:	e12fff1e 	bx	lr

000006d4 <PB_clear_edgecp_ASM>:
	
PB_clear_edgecp_ASM:

	PUSH {R1}
 6d4:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_EDGE_BASE
 6d8:	e59f1040 	ldr	r1, [pc, #64]	; 720 <disable_PB_INT_ASM+0x20>
	STR R0, [R1] // store R0 in edgecapture register to reset them
 6dc:	e5810000 	str	r0, [r1]
	POP {R1}
 6e0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 6e4:	e12fff1e 	bx	lr

000006e8 <enable_PB_INT_ASM>:

enable_PB_INT_ASM: // this uses a one hot encoded scheme to know which buttons to enable interrupts for

	PUSH {R1}
 6e8:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_INTER_BASE
 6ec:	e59f1030 	ldr	r1, [pc, #48]	; 724 <disable_PB_INT_ASM+0x24>
	AND R0, R0, #0xF // keep only last for bits of R0
 6f0:	e200000f 	and	r0, r0, #15
	STR R0, [R1] // store desired interrupts bits sequence in the interrupt data register
 6f4:	e5810000 	str	r0, [r1]
	POP {R1}
 6f8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 6fc:	e12fff1e 	bx	lr

00000700 <disable_PB_INT_ASM>:

disable_PB_INT_ASM: // this uses a one hot encoded scheme to know which buttons to disable interrupts for
	PUSH {R1}
 700:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =PB_INTER_BASE
 704:	e59f1018 	ldr	r1, [pc, #24]	; 724 <disable_PB_INT_ASM+0x24>
	MVN R0, R0 // invert R0
 708:	e1e00000 	mvn	r0, r0
	BFC R0, #4, #28 // clear all the bits excep first 4 bits
 70c:	e7df021f 	bfc	r0, #4, #28
	STR R0, [R1] // store desired interrupts bits sequence in the interrupt data register
 710:	e5810000 	str	r0, [r1]
	POP {R1}
 714:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 718:	e12fff1e 	bx	lr
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM
	
read_PB_data_ASM:
	PUSH {R1}
	LDR R1, =PB_DATA_BASE
 71c:	ff200050 	.word	0xff200050
	BX LR

read_PB_edgecap_ASM:

	PUSH {R1}
	LDR R1, =PB_EDGE_BASE
 720:	ff20005c 	.word	0xff20005c
	BX LR

enable_PB_INT_ASM: // this uses a one hot encoded scheme to know which buttons to enable interrupts for

	PUSH {R1}
	LDR R1, =PB_INTER_BASE
 724:	ff200058 	.word	0xff200058

00000728 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040 // memory address reserved fo i/o with slider switches
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} // push R1 since we are modifying it
 728:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, = SW_BASE // load mem address of sliders in R1
 72c:	e59f1008 	ldr	r1, [pc, #8]	; 73c <read_slider_switches_ASM+0x14>
	LDR R0, [R1] // load value of slider i/o in R0
 730:	e5910000 	ldr	r0, [r1]
	POP {R1} // restore R1 since we are done
 734:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR // branch out of subroutine
 738:	e12fff1e 	bx	lr
	.equ SW_BASE, 0xFF200040 // memory address reserved fo i/o with slider switches
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	PUSH {R1} // push R1 since we are modifying it
	LDR R1, = SW_BASE // load mem address of sliders in R1
 73c:	ff200040 	.word	0xff200040

00000740 <read_PS2_data_ASM>:
	.equ PS2_BASE_DATA, 0xFF200100
	.global read_PS2_data_ASM
		
read_PS2_data_ASM:
	
	PUSH {R1, R2, R3, LR}
 740:	e92d400e 	push	{r1, r2, r3, lr}
	
	LDR R1, =PS2_BASE_DATA
 744:	e59f102c 	ldr	r1, [pc, #44]	; 778 <STOREDATA+0x14>
	LDR R2, [R1] // load keyboard data register in R2
 748:	e5912000 	ldr	r2, [r1]
	
	AND R3, R2, #0x8000 // check if we can read data from the keyboard, ie check if Rvalid is one
 74c:	e2023902 	and	r3, r2, #32768	; 0x8000
	CMP R3,  #0x8000
 750:	e3530902 	cmp	r3, #32768	; 0x8000
	BEQ STOREDATA
 754:	0a000002 	beq	764 <STOREDATA>
	MOV R0, #0 // nothing has been read so return 0
 758:	e3a00000 	mov	r0, #0
	POP {R1, R2, R3, LR}
 75c:	e8bd400e 	pop	{r1, r2, r3, lr}
	BX LR
 760:	e12fff1e 	bx	lr

00000764 <STOREDATA>:
	
STOREDATA:
	AND R2,R2, #255 // end with 255 to get last 8bits
 764:	e20220ff 	and	r2, r2, #255	; 0xff
	STRB R2, [R0] // store read keyboard data
 768:	e5c02000 	strb	r2, [r0]
	MOV R0, #1 // we read from the keyboard so return 1
 76c:	e3a00001 	mov	r0, #1
	POP {R1, R2, R3, LR}
 770:	e8bd400e 	pop	{r1, r2, r3, lr}
	BX LR
 774:	e12fff1e 	bx	lr
		
read_PS2_data_ASM:
	
	PUSH {R1, R2, R3, LR}
	
	LDR R1, =PS2_BASE_DATA
 778:	ff200100 	.word	0xff200100

0000077c <write_audio_data_ASM>:
	.equ LEFTDATA, 0xFF203048
	.equ RIGHTDATA, 0xFF20304C
	
write_audio_data_ASM:

	PUSH {R1-R9, LR}
 77c:	e92d43fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	LDR R1, =FIFOSPACE
 780:	e59f1044 	ldr	r1, [pc, #68]	; 7cc <TOEND+0xc>
	LDR R2, [R1] // load fifo space in R2 so that we can check WSRC and WSLC
 784:	e5912000 	ldr	r2, [r1]
	LSR R2, R2, #16 // get rid of the first 16bits and only keep the last 16
 788:	e1a02822 	lsr	r2, r2, #16
	AND R3, R2, #255 // keep the first 8bits, ie keep WSRC
 78c:	e20230ff 	and	r3, r2, #255	; 0xff
	LSR R2, R2, #8 // get rid of first 8bits
 790:	e1a02422 	lsr	r2, r2, #8
	AND R4, R2, #255 // keep the last 8bits. ie keep WSLC
 794:	e20240ff 	and	r4, r2, #255	; 0xff
	// check if can wirte to left and right data, ie if WSLC and WSRC are bigger than 1, they indicate how much space is left 
	CMP R3, #1
 798:	e3530001 	cmp	r3, #1
	BLT TOEND
 79c:	ba000007 	blt	7c0 <TOEND>
	CMP R4, #1
 7a0:	e3540001 	cmp	r4, #1
	BLT TOEND
 7a4:	ba000005 	blt	7c0 <TOEND>
	// we can write to audio so do so
 	LDR R7,=LEFTDATA		
 7a8:	e59f7020 	ldr	r7, [pc, #32]	; 7d0 <TOEND+0x10>
   	LDR R8,=RIGHTDATA		
 7ac:	e59f8020 	ldr	r8, [pc, #32]	; 7d4 <TOEND+0x14>
    STR R0,[R7]			
 7b0:	e5870000 	str	r0, [r7]
    STR R0,[R8]			
 7b4:	e5880000 	str	r0, [r8]
    MOV R0, #1 // return 1 since we outputed audio
 7b8:	e3a00001 	mov	r0, #1
	BX LR
 7bc:	e12fff1e 	bx	lr

000007c0 <TOEND>:
	
TOEND:
	POP {R1-R9, LR}
 7c0:	e8bd43fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	MOV R0, #0 // return 0 since we didnt write audio
 7c4:	e3a00000 	mov	r0, #0
	BX LR
 7c8:	e12fff1e 	bx	lr
	.equ RIGHTDATA, 0xFF20304C
	
write_audio_data_ASM:

	PUSH {R1-R9, LR}
	LDR R1, =FIFOSPACE
 7cc:	ff203044 	.word	0xff203044
	CMP R3, #1
	BLT TOEND
	CMP R4, #1
	BLT TOEND
	// we can write to audio so do so
 	LDR R7,=LEFTDATA		
 7d0:	ff203048 	.word	0xff203048
   	LDR R8,=RIGHTDATA		
 7d4:	ff20304c 	.word	0xff20304c

000007d8 <atexit>:
 7d8:	e1a01000 	mov	r1, r0
 7dc:	e3a00000 	mov	r0, #0
 7e0:	e92d4008 	push	{r3, lr}
 7e4:	e1a02000 	mov	r2, r0
 7e8:	e1a03000 	mov	r3, r0
 7ec:	eb00000e 	bl	82c <__register_exitproc>
 7f0:	e8bd4008 	pop	{r3, lr}
 7f4:	e12fff1e 	bx	lr

000007f8 <exit>:
 7f8:	e92d4008 	push	{r3, lr}
 7fc:	e3a01000 	mov	r1, #0
 800:	e1a04000 	mov	r4, r0
 804:	eb000045 	bl	920 <__call_exitprocs>
 808:	e59f3018 	ldr	r3, [pc, #24]	; 828 <exit+0x30>
 80c:	e5930000 	ldr	r0, [r3]
 810:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 814:	e3530000 	cmp	r3, #0
 818:	11a0e00f 	movne	lr, pc
 81c:	112fff13 	bxne	r3
 820:	e1a00004 	mov	r0, r4
 824:	eb0000c9 	bl	b50 <_exit>
 828:	00000c10 	.word	0x00000c10

0000082c <__register_exitproc>:
 82c:	e59fc0e4 	ldr	r12, [pc, #228]	; 918 <__register_exitproc+0xec>
 830:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 834:	e59c4000 	ldr	r4, [r12]
 838:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 83c:	e35c0000 	cmp	r12, #0
 840:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 844:	e59c5004 	ldr	r5, [r12, #4]
 848:	0584c148 	streq	r12, [r4, #328]	; 0x148
 84c:	e355001f 	cmp	r5, #31
 850:	e24dd010 	sub	sp, sp, #16
 854:	e1a06000 	mov	r6, r0
 858:	da000015 	ble	8b4 <__register_exitproc+0x88>
 85c:	e59f00b8 	ldr	r0, [pc, #184]	; 91c <__register_exitproc+0xf0>
 860:	e3500000 	cmp	r0, #0
 864:	1a000001 	bne	870 <__register_exitproc+0x44>
 868:	e3e00000 	mvn	r0, #0
 86c:	ea000018 	b	8d4 <__register_exitproc+0xa8>
 870:	e3a00e19 	mov	r0, #400	; 0x190
 874:	e58d100c 	str	r1, [sp, #12]
 878:	e58d2008 	str	r2, [sp, #8]
 87c:	e58d3004 	str	r3, [sp, #4]
 880:	e320f000 	nop	{0}
 884:	e250c000 	subs	r12, r0, #0
 888:	e59d100c 	ldr	r1, [sp, #12]
 88c:	e59d2008 	ldr	r2, [sp, #8]
 890:	e59d3004 	ldr	r3, [sp, #4]
 894:	0afffff3 	beq	868 <__register_exitproc+0x3c>
 898:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 89c:	e3a00000 	mov	r0, #0
 8a0:	e58c0004 	str	r0, [r12, #4]
 8a4:	e58c5000 	str	r5, [r12]
 8a8:	e584c148 	str	r12, [r4, #328]	; 0x148
 8ac:	e58c0188 	str	r0, [r12, #392]	; 0x188
 8b0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 8b4:	e3560000 	cmp	r6, #0
 8b8:	e59c4004 	ldr	r4, [r12, #4]
 8bc:	1a000007 	bne	8e0 <__register_exitproc+0xb4>
 8c0:	e2843002 	add	r3, r4, #2
 8c4:	e2844001 	add	r4, r4, #1
 8c8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 8cc:	e58c4004 	str	r4, [r12, #4]
 8d0:	e3a00000 	mov	r0, #0
 8d4:	e28dd010 	add	sp, sp, #16
 8d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8dc:	e12fff1e 	bx	lr
 8e0:	e3a00001 	mov	r0, #1
 8e4:	e1a00410 	lsl	r0, r0, r4
 8e8:	e08c8104 	add	r8, r12, r4, lsl #2
 8ec:	e3560002 	cmp	r6, #2
 8f0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 8f4:	e5883108 	str	r3, [r8, #264]	; 0x108
 8f8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 8fc:	e1877000 	orr	r7, r7, r0
 900:	01830000 	orreq	r0, r3, r0
 904:	e1a05008 	mov	r5, r8
 908:	e5882088 	str	r2, [r8, #136]	; 0x88
 90c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 910:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 914:	eaffffe9 	b	8c0 <__register_exitproc+0x94>
 918:	00000c10 	.word	0x00000c10
 91c:	00000000 	.word	0x00000000

00000920 <__call_exitprocs>:
 920:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 924:	e59f3168 	ldr	r3, [pc, #360]	; a94 <__call_exitprocs+0x174>
 928:	e5933000 	ldr	r3, [r3]
 92c:	e24dd014 	sub	sp, sp, #20
 930:	e58d3004 	str	r3, [sp, #4]
 934:	e2833f52 	add	r3, r3, #328	; 0x148
 938:	e58d0008 	str	r0, [sp, #8]
 93c:	e58d300c 	str	r3, [sp, #12]
 940:	e1a07001 	mov	r7, r1
 944:	e3a08001 	mov	r8, #1
 948:	e59d3004 	ldr	r3, [sp, #4]
 94c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 950:	e3560000 	cmp	r6, #0
 954:	e59db00c 	ldr	r11, [sp, #12]
 958:	0a000033 	beq	a2c <__call_exitprocs+0x10c>
 95c:	e5965004 	ldr	r5, [r6, #4]
 960:	e2554001 	subs	r4, r5, #1
 964:	5286a088 	addpl	r10, r6, #136	; 0x88
 968:	5285501f 	addpl	r5, r5, #31
 96c:	508a5105 	addpl	r5, r10, r5, lsl #2
 970:	5a000007 	bpl	994 <__call_exitprocs+0x74>
 974:	ea000029 	b	a20 <__call_exitprocs+0x100>
 978:	e5953000 	ldr	r3, [r5]
 97c:	e1530007 	cmp	r3, r7
 980:	0a000005 	beq	99c <__call_exitprocs+0x7c>
 984:	e2444001 	sub	r4, r4, #1
 988:	e3740001 	cmn	r4, #1
 98c:	e2455004 	sub	r5, r5, #4
 990:	0a000022 	beq	a20 <__call_exitprocs+0x100>
 994:	e3570000 	cmp	r7, #0
 998:	1afffff6 	bne	978 <__call_exitprocs+0x58>
 99c:	e5963004 	ldr	r3, [r6, #4]
 9a0:	e06a2005 	rsb	r2, r10, r5
 9a4:	e2433001 	sub	r3, r3, #1
 9a8:	e0862002 	add	r2, r6, r2
 9ac:	e1530004 	cmp	r3, r4
 9b0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 9b4:	13a01000 	movne	r1, #0
 9b8:	05864004 	streq	r4, [r6, #4]
 9bc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 9c0:	e3530000 	cmp	r3, #0
 9c4:	0affffee 	beq	984 <__call_exitprocs+0x64>
 9c8:	e1a02418 	lsl	r2, r8, r4
 9cc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 9d0:	e1120001 	tst	r2, r1
 9d4:	e5969004 	ldr	r9, [r6, #4]
 9d8:	0a000016 	beq	a38 <__call_exitprocs+0x118>
 9dc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 9e0:	e1120001 	tst	r2, r1
 9e4:	1a000016 	bne	a44 <__call_exitprocs+0x124>
 9e8:	e59d0008 	ldr	r0, [sp, #8]
 9ec:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 9f0:	e1a0e00f 	mov	lr, pc
 9f4:	e12fff13 	bx	r3
 9f8:	e5963004 	ldr	r3, [r6, #4]
 9fc:	e1530009 	cmp	r3, r9
 a00:	1affffd0 	bne	948 <__call_exitprocs+0x28>
 a04:	e59b3000 	ldr	r3, [r11]
 a08:	e1530006 	cmp	r3, r6
 a0c:	1affffcd 	bne	948 <__call_exitprocs+0x28>
 a10:	e2444001 	sub	r4, r4, #1
 a14:	e3740001 	cmn	r4, #1
 a18:	e2455004 	sub	r5, r5, #4
 a1c:	1affffdc 	bne	994 <__call_exitprocs+0x74>
 a20:	e59f1070 	ldr	r1, [pc, #112]	; a98 <__call_exitprocs+0x178>
 a24:	e3510000 	cmp	r1, #0
 a28:	1a000009 	bne	a54 <__call_exitprocs+0x134>
 a2c:	e28dd014 	add	sp, sp, #20
 a30:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a34:	e12fff1e 	bx	lr
 a38:	e1a0e00f 	mov	lr, pc
 a3c:	e12fff13 	bx	r3
 a40:	eaffffec 	b	9f8 <__call_exitprocs+0xd8>
 a44:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a48:	e1a0e00f 	mov	lr, pc
 a4c:	e12fff13 	bx	r3
 a50:	eaffffe8 	b	9f8 <__call_exitprocs+0xd8>
 a54:	e5963004 	ldr	r3, [r6, #4]
 a58:	e3530000 	cmp	r3, #0
 a5c:	e5963000 	ldr	r3, [r6]
 a60:	1a000008 	bne	a88 <__call_exitprocs+0x168>
 a64:	e3530000 	cmp	r3, #0
 a68:	0a000006 	beq	a88 <__call_exitprocs+0x168>
 a6c:	e1a00006 	mov	r0, r6
 a70:	e58b3000 	str	r3, [r11]
 a74:	e320f000 	nop	{0}
 a78:	e59b6000 	ldr	r6, [r11]
 a7c:	e3560000 	cmp	r6, #0
 a80:	1affffb5 	bne	95c <__call_exitprocs+0x3c>
 a84:	eaffffe8 	b	a2c <__call_exitprocs+0x10c>
 a88:	e1a0b006 	mov	r11, r6
 a8c:	e1a06003 	mov	r6, r3
 a90:	eafffff9 	b	a7c <__call_exitprocs+0x15c>
 a94:	00000c10 	.word	0x00000c10
 a98:	00000000 	.word	0x00000000

00000a9c <register_fini>:
 a9c:	e92d4008 	push	{r3, lr}
 aa0:	e59f3010 	ldr	r3, [pc, #16]	; ab8 <register_fini+0x1c>
 aa4:	e3530000 	cmp	r3, #0
 aa8:	159f000c 	ldrne	r0, [pc, #12]	; abc <register_fini+0x20>
 aac:	1bffff49 	blne	7d8 <atexit>
 ab0:	e8bd4008 	pop	{r3, lr}
 ab4:	e12fff1e 	bx	lr
 ab8:	00000c38 	.word	0x00000c38
 abc:	00000ac0 	.word	0x00000ac0

00000ac0 <__libc_fini_array>:
 ac0:	e92d4038 	push	{r3, r4, r5, lr}
 ac4:	e59f5030 	ldr	r5, [pc, #48]	; afc <__libc_fini_array+0x3c>
 ac8:	e59f4030 	ldr	r4, [pc, #48]	; b00 <__libc_fini_array+0x40>
 acc:	e0654004 	rsb	r4, r5, r4
 ad0:	e1b04144 	asrs	r4, r4, #2
 ad4:	10855104 	addne	r5, r5, r4, lsl #2
 ad8:	0a000004 	beq	af0 <__libc_fini_array+0x30>
 adc:	e5353004 	ldr	r3, [r5, #-4]!
 ae0:	e1a0e00f 	mov	lr, pc
 ae4:	e12fff13 	bx	r3
 ae8:	e2544001 	subs	r4, r4, #1
 aec:	1afffffa 	bne	adc <__libc_fini_array+0x1c>
 af0:	eb000050 	bl	c38 <__libc_fini>
 af4:	e8bd4038 	pop	{r3, r4, r5, lr}
 af8:	e12fff1e 	bx	lr
 afc:	00000c50 	.word	0x00000c50
 b00:	00000c54 	.word	0x00000c54

00000b04 <__cs3_premain>:
 b04:	e92d4008 	push	{r3, lr}
 b08:	eb00001d 	bl	b84 <__libc_init_array>
 b0c:	e59f3030 	ldr	r3, [pc, #48]	; b44 <__cs3_premain+0x40>
 b10:	e3530000 	cmp	r3, #0
 b14:	15930000 	ldrne	r0, [r3]
 b18:	01a00003 	moveq	r0, r3
 b1c:	e59f3024 	ldr	r3, [pc, #36]	; b48 <__cs3_premain+0x44>
 b20:	e3530000 	cmp	r3, #0
 b24:	15931000 	ldrne	r1, [r3]
 b28:	01a01003 	moveq	r1, r3
 b2c:	e3a02000 	mov	r2, #0
 b30:	ebfffe56 	bl	490 <main>
 b34:	e59f3010 	ldr	r3, [pc, #16]	; b4c <__cs3_premain+0x48>
 b38:	e3530000 	cmp	r3, #0
 b3c:	1bffff2d 	blne	7f8 <exit>
 b40:	eafffffe 	b	b40 <__cs3_premain+0x3c>
	...
 b4c:	000007f8 	.word	0x000007f8

00000b50 <_exit>:
 b50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 b54:	e3a00018 	mov	r0, #24
 b58:	e59f1004 	ldr	r1, [pc, #4]	; b64 <_exit+0x14>
 b5c:	ef123456 	svc	0x00123456
 b60:	eafffffe 	b	b60 <_exit+0x10>
 b64:	00020026 	.word	0x00020026

00000b68 <__cs3_isr_interrupt>:
 b68:	eafffffe 	b	b68 <__cs3_isr_interrupt>

00000b6c <__cs3_isr_undef>:
 b6c:	eafffffe 	b	b6c <__cs3_isr_undef>

00000b70 <__cs3_isr_swi>:
 b70:	eafffffe 	b	b70 <__cs3_isr_swi>

00000b74 <__cs3_isr_pabort>:
 b74:	eafffffe 	b	b74 <__cs3_isr_pabort>

00000b78 <__cs3_isr_dabort>:
 b78:	eafffffe 	b	b78 <__cs3_isr_dabort>

00000b7c <__cs3_isr_irq>:
 b7c:	eafffffe 	b	b7c <__cs3_isr_irq>

00000b80 <__cs3_isr_fiq>:
 b80:	eafffffe 	b	b80 <__cs3_isr_fiq>

00000b84 <__libc_init_array>:
 b84:	e92d4070 	push	{r4, r5, r6, lr}
 b88:	e59f506c 	ldr	r5, [pc, #108]	; bfc <__libc_init_array+0x78>
 b8c:	e59f606c 	ldr	r6, [pc, #108]	; c00 <__libc_init_array+0x7c>
 b90:	e0656006 	rsb	r6, r5, r6
 b94:	e1b06146 	asrs	r6, r6, #2
 b98:	12455004 	subne	r5, r5, #4
 b9c:	13a04000 	movne	r4, #0
 ba0:	0a000005 	beq	bbc <__libc_init_array+0x38>
 ba4:	e5b53004 	ldr	r3, [r5, #4]!
 ba8:	e2844001 	add	r4, r4, #1
 bac:	e1a0e00f 	mov	lr, pc
 bb0:	e12fff13 	bx	r3
 bb4:	e1560004 	cmp	r6, r4
 bb8:	1afffff9 	bne	ba4 <__libc_init_array+0x20>
 bbc:	e59f5040 	ldr	r5, [pc, #64]	; c04 <__libc_init_array+0x80>
 bc0:	e59f6040 	ldr	r6, [pc, #64]	; c08 <__libc_init_array+0x84>
 bc4:	e0656006 	rsb	r6, r5, r6
 bc8:	eb000012 	bl	c18 <_init>
 bcc:	e1b06146 	asrs	r6, r6, #2
 bd0:	12455004 	subne	r5, r5, #4
 bd4:	13a04000 	movne	r4, #0
 bd8:	0a000005 	beq	bf4 <__libc_init_array+0x70>
 bdc:	e5b53004 	ldr	r3, [r5, #4]!
 be0:	e2844001 	add	r4, r4, #1
 be4:	e1a0e00f 	mov	lr, pc
 be8:	e12fff13 	bx	r3
 bec:	e1560004 	cmp	r6, r4
 bf0:	1afffff9 	bne	bdc <__libc_init_array+0x58>
 bf4:	e8bd4070 	pop	{r4, r5, r6, lr}
 bf8:	e12fff1e 	bx	lr
 bfc:	00000c30 	.word	0x00000c30
 c00:	00000c30 	.word	0x00000c30
 c04:	00000c30 	.word	0x00000c30
 c08:	00000c38 	.word	0x00000c38

Disassembly of section .rodata:

00000c10 <_global_impure_ptr>:
 c10:	00000c78 00000043                       x...C...

00000c18 <_init>:
 c18:	e1a0c00d 	mov	r12, sp
 c1c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c20:	e24cb004 	sub	r11, r12, #4
 c24:	e24bd028 	sub	sp, r11, #40	; 0x28
 c28:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c2c:	e12fff1e 	bx	lr

00000c30 <__init_array_start>:
 c30:	00000a9c 	.word	0x00000a9c

00000c34 <__frame_dummy_init_array_entry>:
 c34:	00000208                                ....

00000c38 <__libc_fini>:
 c38:	e1a0c00d 	mov	r12, sp
 c3c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c40:	e24cb004 	sub	r11, r12, #4
 c44:	e24bd028 	sub	sp, r11, #40	; 0x28
 c48:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c4c:	e12fff1e 	bx	lr

00000c50 <__fini_array_start>:
 c50:	000001c4 	.word	0x000001c4

00000c54 <__cs3_regions>:
	...
 c60:	000010a8 	.word	0x000010a8
 c64:	00000020 	.word	0x00000020
